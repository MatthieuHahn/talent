
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.0
 * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
 */
Prisma.prismaVersion = {
  client: "6.17.0",
  engine: "c0aafc03b8ef6cdced8654b9a817999e02457d6a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  name: 'name',
  brandConfig: 'brandConfig',
  domain: 'domain',
  subdomain: 'subdomain',
  plan: 'plan',
  maxUsers: 'maxUsers',
  maxJobs: 'maxJobs',
  isActive: 'isActive',
  trialEndsAt: 'trialEndsAt',
  contactEmail: 'contactEmail',
  billingEmail: 'billingEmail',
  contactPhone: 'contactPhone',
  billingAddress: 'billingAddress',
  features: 'features',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  password: 'password',
  role: 'role',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLogin: 'lastLogin',
  isActive: 'isActive',
  organizationId: 'organizationId'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  website: 'website',
  logo: 'logo',
  email: 'email',
  phone: 'phone',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.CandidateScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  linkedin: 'linkedin',
  github: 'github',
  portfolio: 'portfolio',
  resume: 'resume',
  summary: 'summary',
  resumeUrl: 'resumeUrl',
  status: 'status',
  location: 'location',
  timezone: 'timezone',
  yearsOfExperience: 'yearsOfExperience',
  currentSalary: 'currentSalary',
  expectedSalary: 'expectedSalary',
  availability: 'availability',
  source: 'source',
  notes: 'notes',
  tags: 'tags',
  companyId: 'companyId',
  addedById: 'addedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  certifications: 'certifications',
  currentRole: 'currentRole',
  education: 'education',
  experience: 'experience',
  industryExperience: 'industryExperience',
  projects: 'projects',
  salaryExpectation: 'salaryExpectation',
  skills: 'skills',
  embedding: 'embedding',
  embeddingAt: 'embeddingAt',
  embeddingModel: 'embeddingModel'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  requirements: 'requirements',
  department: 'department',
  location: 'location',
  remote: 'remote',
  type: 'type',
  level: 'level',
  salaryMin: 'salaryMin',
  salaryMax: 'salaryMax',
  currency: 'currency',
  status: 'status',
  priority: 'priority',
  startDate: 'startDate',
  endDate: 'endDate',
  deadline: 'deadline',
  companyId: 'companyId',
  recruiterId: 'recruiterId',
  jobDescriptionUrl: 'jobDescriptionUrl',
  aiGenerated: 'aiGenerated',
  aiPrompt: 'aiPrompt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  applicationInfo: 'applicationInfo',
  benefits: 'benefits',
  metadata: 'metadata',
  requirementsDetailed: 'requirementsDetailed',
  responsibilities: 'responsibilities',
  jobInfo: 'jobInfo',
  embedding: 'embedding',
  embeddingAt: 'embeddingAt',
  embeddingModel: 'embeddingModel'
};

exports.Prisma.JobApplicationScalarFieldEnum = {
  id: 'id',
  status: 'status',
  appliedAt: 'appliedAt',
  coverLetter: 'coverLetter',
  notes: 'notes',
  rating: 'rating',
  fitScore: 'fitScore',
  candidateId: 'candidateId',
  jobId: 'jobId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchingResultScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  candidateId: 'candidateId',
  score: 'score',
  embeddingSimilarity: 'embeddingSimilarity',
  skillMatches: 'skillMatches',
  aiAnalysis: 'aiAnalysis',
  calculatedAt: 'calculatedAt',
  expiresAt: 'expiresAt',
  organizationId: 'organizationId'
};

exports.Prisma.InterviewScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  status: 'status',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  timezone: 'timezone',
  location: 'location',
  notes: 'notes',
  feedback: 'feedback',
  rating: 'rating',
  outcome: 'outcome',
  candidateId: 'candidateId',
  jobId: 'jobId',
  applicationId: 'applicationId',
  interviewerId: 'interviewerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  description: 'description',
  metadata: 'metadata',
  userId: 'userId',
  candidateId: 'candidateId',
  jobId: 'jobId',
  applicationId: 'applicationId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.SubscriptionPlan = exports.$Enums.SubscriptionPlan = {
  STARTER: 'STARTER',
  PROFESSIONAL: 'PROFESSIONAL',
  ENTERPRISE: 'ENTERPRISE',
  CUSTOM: 'CUSTOM'
};

exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  RECRUITER: 'RECRUITER',
  HIRING_MANAGER: 'HIRING_MANAGER',
  INTERVIEWER: 'INTERVIEWER'
};

exports.CandidateStatus = exports.$Enums.CandidateStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  HIRED: 'HIRED',
  REJECTED: 'REJECTED',
  BLACKLISTED: 'BLACKLISTED'
};

exports.JobType = exports.$Enums.JobType = {
  FULL_TIME: 'FULL_TIME',
  PART_TIME: 'PART_TIME',
  CONTRACT: 'CONTRACT',
  FREELANCE: 'FREELANCE',
  INTERNSHIP: 'INTERNSHIP'
};

exports.JobLevel = exports.$Enums.JobLevel = {
  ENTRY: 'ENTRY',
  JUNIOR: 'JUNIOR',
  MID: 'MID',
  SENIOR: 'SENIOR',
  LEAD: 'LEAD',
  PRINCIPAL: 'PRINCIPAL',
  EXECUTIVE: 'EXECUTIVE'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  CLOSED: 'CLOSED',
  CANCELLED: 'CANCELLED'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  APPLIED: 'APPLIED',
  REVIEWING: 'REVIEWING',
  PHONE_SCREEN: 'PHONE_SCREEN',
  INTERVIEW: 'INTERVIEW',
  TECHNICAL_TEST: 'TECHNICAL_TEST',
  FINAL_INTERVIEW: 'FINAL_INTERVIEW',
  REFERENCE_CHECK: 'REFERENCE_CHECK',
  OFFER_MADE: 'OFFER_MADE',
  OFFER_ACCEPTED: 'OFFER_ACCEPTED',
  OFFER_REJECTED: 'OFFER_REJECTED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN'
};

exports.InterviewType = exports.$Enums.InterviewType = {
  PHONE: 'PHONE',
  VIDEO: 'VIDEO',
  IN_PERSON: 'IN_PERSON',
  TECHNICAL: 'TECHNICAL',
  BEHAVIORAL: 'BEHAVIORAL',
  CULTURAL_FIT: 'CULTURAL_FIT'
};

exports.InterviewStatus = exports.$Enums.InterviewStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  RESCHEDULED: 'RESCHEDULED'
};

exports.InterviewOutcome = exports.$Enums.InterviewOutcome = {
  PASS: 'PASS',
  FAIL: 'FAIL',
  MAYBE: 'MAYBE',
  NO_SHOW: 'NO_SHOW'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  CANDIDATE_ADDED: 'CANDIDATE_ADDED',
  CANDIDATE_UPDATED: 'CANDIDATE_UPDATED',
  JOB_CREATED: 'JOB_CREATED',
  JOB_UPDATED: 'JOB_UPDATED',
  APPLICATION_SUBMITTED: 'APPLICATION_SUBMITTED',
  APPLICATION_STATUS_CHANGED: 'APPLICATION_STATUS_CHANGED',
  INTERVIEW_SCHEDULED: 'INTERVIEW_SCHEDULED',
  INTERVIEW_COMPLETED: 'INTERVIEW_COMPLETED',
  NOTE_ADDED: 'NOTE_ADDED',
  EMAIL_SENT: 'EMAIL_SENT',
  CALL_MADE: 'CALL_MADE',
  AI_MATCH_FOUND: 'AI_MATCH_FOUND',
  ORGANIZATION_CREATED: 'ORGANIZATION_CREATED',
  USER_INVITED: 'USER_INVITED',
  BATCH_UPLOAD_STARTED: 'BATCH_UPLOAD_STARTED',
  BATCH_UPLOAD_COMPLETED: 'BATCH_UPLOAD_COMPLETED',
  BATCH_UPLOAD_FAILED: 'BATCH_UPLOAD_FAILED'
};

exports.Prisma.ModelName = {
  Organization: 'Organization',
  User: 'User',
  Company: 'Company',
  Candidate: 'Candidate',
  Job: 'Job',
  JobApplication: 'JobApplication',
  MatchingResult: 'MatchingResult',
  Interview: 'Interview',
  Activity: 'Activity'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
