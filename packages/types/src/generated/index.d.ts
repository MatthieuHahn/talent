
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Candidate
 * 
 */
export type Candidate = $Result.DefaultSelection<Prisma.$CandidatePayload>
/**
 * Model Job
 * 
 */
export type Job = $Result.DefaultSelection<Prisma.$JobPayload>
/**
 * Model JobApplication
 * 
 */
export type JobApplication = $Result.DefaultSelection<Prisma.$JobApplicationPayload>
/**
 * Model MatchingResult
 * 
 */
export type MatchingResult = $Result.DefaultSelection<Prisma.$MatchingResultPayload>
/**
 * Model Interview
 * 
 */
export type Interview = $Result.DefaultSelection<Prisma.$InterviewPayload>
/**
 * Model Activity
 * 
 */
export type Activity = $Result.DefaultSelection<Prisma.$ActivityPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const SubscriptionPlan: {
  STARTER: 'STARTER',
  PROFESSIONAL: 'PROFESSIONAL',
  ENTERPRISE: 'ENTERPRISE',
  CUSTOM: 'CUSTOM'
};

export type SubscriptionPlan = (typeof SubscriptionPlan)[keyof typeof SubscriptionPlan]


export const UserRole: {
  ADMIN: 'ADMIN',
  RECRUITER: 'RECRUITER',
  HIRING_MANAGER: 'HIRING_MANAGER',
  INTERVIEWER: 'INTERVIEWER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const CandidateStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  HIRED: 'HIRED',
  REJECTED: 'REJECTED',
  BLACKLISTED: 'BLACKLISTED'
};

export type CandidateStatus = (typeof CandidateStatus)[keyof typeof CandidateStatus]


export const JobType: {
  FULL_TIME: 'FULL_TIME',
  PART_TIME: 'PART_TIME',
  CONTRACT: 'CONTRACT',
  FREELANCE: 'FREELANCE',
  INTERNSHIP: 'INTERNSHIP'
};

export type JobType = (typeof JobType)[keyof typeof JobType]


export const JobLevel: {
  ENTRY: 'ENTRY',
  JUNIOR: 'JUNIOR',
  MID: 'MID',
  SENIOR: 'SENIOR',
  LEAD: 'LEAD',
  PRINCIPAL: 'PRINCIPAL',
  EXECUTIVE: 'EXECUTIVE'
};

export type JobLevel = (typeof JobLevel)[keyof typeof JobLevel]


export const JobStatus: {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  CLOSED: 'CLOSED',
  CANCELLED: 'CANCELLED'
};

export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus]


export const Priority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type Priority = (typeof Priority)[keyof typeof Priority]


export const ApplicationStatus: {
  APPLIED: 'APPLIED',
  REVIEWING: 'REVIEWING',
  PHONE_SCREEN: 'PHONE_SCREEN',
  INTERVIEW: 'INTERVIEW',
  TECHNICAL_TEST: 'TECHNICAL_TEST',
  FINAL_INTERVIEW: 'FINAL_INTERVIEW',
  REFERENCE_CHECK: 'REFERENCE_CHECK',
  OFFER_MADE: 'OFFER_MADE',
  OFFER_ACCEPTED: 'OFFER_ACCEPTED',
  OFFER_REJECTED: 'OFFER_REJECTED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN'
};

export type ApplicationStatus = (typeof ApplicationStatus)[keyof typeof ApplicationStatus]


export const InterviewType: {
  PHONE: 'PHONE',
  VIDEO: 'VIDEO',
  IN_PERSON: 'IN_PERSON',
  TECHNICAL: 'TECHNICAL',
  BEHAVIORAL: 'BEHAVIORAL',
  CULTURAL_FIT: 'CULTURAL_FIT'
};

export type InterviewType = (typeof InterviewType)[keyof typeof InterviewType]


export const InterviewStatus: {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  RESCHEDULED: 'RESCHEDULED'
};

export type InterviewStatus = (typeof InterviewStatus)[keyof typeof InterviewStatus]


export const InterviewOutcome: {
  PASS: 'PASS',
  FAIL: 'FAIL',
  MAYBE: 'MAYBE',
  NO_SHOW: 'NO_SHOW'
};

export type InterviewOutcome = (typeof InterviewOutcome)[keyof typeof InterviewOutcome]


export const ActivityType: {
  CANDIDATE_ADDED: 'CANDIDATE_ADDED',
  CANDIDATE_UPDATED: 'CANDIDATE_UPDATED',
  JOB_CREATED: 'JOB_CREATED',
  JOB_UPDATED: 'JOB_UPDATED',
  APPLICATION_SUBMITTED: 'APPLICATION_SUBMITTED',
  APPLICATION_STATUS_CHANGED: 'APPLICATION_STATUS_CHANGED',
  INTERVIEW_SCHEDULED: 'INTERVIEW_SCHEDULED',
  INTERVIEW_COMPLETED: 'INTERVIEW_COMPLETED',
  NOTE_ADDED: 'NOTE_ADDED',
  EMAIL_SENT: 'EMAIL_SENT',
  CALL_MADE: 'CALL_MADE',
  AI_MATCH_FOUND: 'AI_MATCH_FOUND',
  ORGANIZATION_CREATED: 'ORGANIZATION_CREATED',
  USER_INVITED: 'USER_INVITED',
  BATCH_UPLOAD_STARTED: 'BATCH_UPLOAD_STARTED',
  BATCH_UPLOAD_COMPLETED: 'BATCH_UPLOAD_COMPLETED',
  BATCH_UPLOAD_FAILED: 'BATCH_UPLOAD_FAILED'
};

export type ActivityType = (typeof ActivityType)[keyof typeof ActivityType]

}

export type SubscriptionPlan = $Enums.SubscriptionPlan

export const SubscriptionPlan: typeof $Enums.SubscriptionPlan

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type CandidateStatus = $Enums.CandidateStatus

export const CandidateStatus: typeof $Enums.CandidateStatus

export type JobType = $Enums.JobType

export const JobType: typeof $Enums.JobType

export type JobLevel = $Enums.JobLevel

export const JobLevel: typeof $Enums.JobLevel

export type JobStatus = $Enums.JobStatus

export const JobStatus: typeof $Enums.JobStatus

export type Priority = $Enums.Priority

export const Priority: typeof $Enums.Priority

export type ApplicationStatus = $Enums.ApplicationStatus

export const ApplicationStatus: typeof $Enums.ApplicationStatus

export type InterviewType = $Enums.InterviewType

export const InterviewType: typeof $Enums.InterviewType

export type InterviewStatus = $Enums.InterviewStatus

export const InterviewStatus: typeof $Enums.InterviewStatus

export type InterviewOutcome = $Enums.InterviewOutcome

export const InterviewOutcome: typeof $Enums.InterviewOutcome

export type ActivityType = $Enums.ActivityType

export const ActivityType: typeof $Enums.ActivityType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Organizations
 * const organizations = await prisma.organization.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Organizations
   * const organizations = await prisma.organization.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.candidate`: Exposes CRUD operations for the **Candidate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Candidates
    * const candidates = await prisma.candidate.findMany()
    * ```
    */
  get candidate(): Prisma.CandidateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobApplication`: Exposes CRUD operations for the **JobApplication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobApplications
    * const jobApplications = await prisma.jobApplication.findMany()
    * ```
    */
  get jobApplication(): Prisma.JobApplicationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.matchingResult`: Exposes CRUD operations for the **MatchingResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchingResults
    * const matchingResults = await prisma.matchingResult.findMany()
    * ```
    */
  get matchingResult(): Prisma.MatchingResultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.interview`: Exposes CRUD operations for the **Interview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Interviews
    * const interviews = await prisma.interview.findMany()
    * ```
    */
  get interview(): Prisma.InterviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activity`: Exposes CRUD operations for the **Activity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activity.findMany()
    * ```
    */
  get activity(): Prisma.ActivityDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.17.0
   * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Organization: 'Organization',
    User: 'User',
    Company: 'Company',
    Candidate: 'Candidate',
    Job: 'Job',
    JobApplication: 'JobApplication',
    MatchingResult: 'MatchingResult',
    Interview: 'Interview',
    Activity: 'Activity'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "organization" | "user" | "company" | "candidate" | "job" | "jobApplication" | "matchingResult" | "interview" | "activity"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Candidate: {
        payload: Prisma.$CandidatePayload<ExtArgs>
        fields: Prisma.CandidateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          findFirst: {
            args: Prisma.CandidateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          findMany: {
            args: Prisma.CandidateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          create: {
            args: Prisma.CandidateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          createMany: {
            args: Prisma.CandidateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CandidateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          delete: {
            args: Prisma.CandidateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          update: {
            args: Prisma.CandidateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          deleteMany: {
            args: Prisma.CandidateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CandidateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CandidateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          upsert: {
            args: Prisma.CandidateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          aggregate: {
            args: Prisma.CandidateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCandidate>
          }
          groupBy: {
            args: Prisma.CandidateGroupByArgs<ExtArgs>
            result: $Utils.Optional<CandidateGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidateCountArgs<ExtArgs>
            result: $Utils.Optional<CandidateCountAggregateOutputType> | number
          }
        }
      }
      Job: {
        payload: Prisma.$JobPayload<ExtArgs>
        fields: Prisma.JobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findFirst: {
            args: Prisma.JobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findMany: {
            args: Prisma.JobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          create: {
            args: Prisma.JobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          createMany: {
            args: Prisma.JobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          delete: {
            args: Prisma.JobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          update: {
            args: Prisma.JobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          deleteMany: {
            args: Prisma.JobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          upsert: {
            args: Prisma.JobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          aggregate: {
            args: Prisma.JobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob>
          }
          groupBy: {
            args: Prisma.JobGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobCountArgs<ExtArgs>
            result: $Utils.Optional<JobCountAggregateOutputType> | number
          }
        }
      }
      JobApplication: {
        payload: Prisma.$JobApplicationPayload<ExtArgs>
        fields: Prisma.JobApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobApplicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobApplicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>
          }
          findFirst: {
            args: Prisma.JobApplicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobApplicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>
          }
          findMany: {
            args: Prisma.JobApplicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>[]
          }
          create: {
            args: Prisma.JobApplicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>
          }
          createMany: {
            args: Prisma.JobApplicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobApplicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>[]
          }
          delete: {
            args: Prisma.JobApplicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>
          }
          update: {
            args: Prisma.JobApplicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>
          }
          deleteMany: {
            args: Prisma.JobApplicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobApplicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobApplicationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>[]
          }
          upsert: {
            args: Prisma.JobApplicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobApplicationPayload>
          }
          aggregate: {
            args: Prisma.JobApplicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobApplication>
          }
          groupBy: {
            args: Prisma.JobApplicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobApplicationCountArgs<ExtArgs>
            result: $Utils.Optional<JobApplicationCountAggregateOutputType> | number
          }
        }
      }
      MatchingResult: {
        payload: Prisma.$MatchingResultPayload<ExtArgs>
        fields: Prisma.MatchingResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchingResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchingResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingResultPayload>
          }
          findFirst: {
            args: Prisma.MatchingResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchingResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingResultPayload>
          }
          findMany: {
            args: Prisma.MatchingResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingResultPayload>[]
          }
          create: {
            args: Prisma.MatchingResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingResultPayload>
          }
          createMany: {
            args: Prisma.MatchingResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchingResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingResultPayload>[]
          }
          delete: {
            args: Prisma.MatchingResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingResultPayload>
          }
          update: {
            args: Prisma.MatchingResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingResultPayload>
          }
          deleteMany: {
            args: Prisma.MatchingResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchingResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MatchingResultUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingResultPayload>[]
          }
          upsert: {
            args: Prisma.MatchingResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchingResultPayload>
          }
          aggregate: {
            args: Prisma.MatchingResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatchingResult>
          }
          groupBy: {
            args: Prisma.MatchingResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchingResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchingResultCountArgs<ExtArgs>
            result: $Utils.Optional<MatchingResultCountAggregateOutputType> | number
          }
        }
      }
      Interview: {
        payload: Prisma.$InterviewPayload<ExtArgs>
        fields: Prisma.InterviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InterviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InterviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          findFirst: {
            args: Prisma.InterviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InterviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          findMany: {
            args: Prisma.InterviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>[]
          }
          create: {
            args: Prisma.InterviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          createMany: {
            args: Prisma.InterviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InterviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>[]
          }
          delete: {
            args: Prisma.InterviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          update: {
            args: Prisma.InterviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          deleteMany: {
            args: Prisma.InterviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InterviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InterviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>[]
          }
          upsert: {
            args: Prisma.InterviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          aggregate: {
            args: Prisma.InterviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInterview>
          }
          groupBy: {
            args: Prisma.InterviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<InterviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.InterviewCountArgs<ExtArgs>
            result: $Utils.Optional<InterviewCountAggregateOutputType> | number
          }
        }
      }
      Activity: {
        payload: Prisma.$ActivityPayload<ExtArgs>
        fields: Prisma.ActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findFirst: {
            args: Prisma.ActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findMany: {
            args: Prisma.ActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          create: {
            args: Prisma.ActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          createMany: {
            args: Prisma.ActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          delete: {
            args: Prisma.ActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          update: {
            args: Prisma.ActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          deleteMany: {
            args: Prisma.ActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          upsert: {
            args: Prisma.ActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          aggregate: {
            args: Prisma.ActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivity>
          }
          groupBy: {
            args: Prisma.ActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    organization?: OrganizationOmit
    user?: UserOmit
    company?: CompanyOmit
    candidate?: CandidateOmit
    job?: JobOmit
    jobApplication?: JobApplicationOmit
    matchingResult?: MatchingResultOmit
    interview?: InterviewOmit
    activity?: ActivityOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    candidates: number
    companies: number
    jobs: number
    matchingResults: number
    users: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidates?: boolean | OrganizationCountOutputTypeCountCandidatesArgs
    companies?: boolean | OrganizationCountOutputTypeCountCompaniesArgs
    jobs?: boolean | OrganizationCountOutputTypeCountJobsArgs
    matchingResults?: boolean | OrganizationCountOutputTypeCountMatchingResultsArgs
    users?: boolean | OrganizationCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountCandidatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountMatchingResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchingResultWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    activities: number
    candidates: number
    conductedInterviews: number
    jobs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | UserCountOutputTypeCountActivitiesArgs
    candidates?: boolean | UserCountOutputTypeCountCandidatesArgs
    conductedInterviews?: boolean | UserCountOutputTypeCountConductedInterviewsArgs
    jobs?: boolean | UserCountOutputTypeCountJobsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCandidatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConductedInterviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    candidates: number
    jobs: number
    users: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidates?: boolean | CompanyCountOutputTypeCountCandidatesArgs
    jobs?: boolean | CompanyCountOutputTypeCountJobsArgs
    users?: boolean | CompanyCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountCandidatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type CandidateCountOutputType
   */

  export type CandidateCountOutputType = {
    activities: number
    interviews: number
    applications: number
    matchingResults: number
  }

  export type CandidateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | CandidateCountOutputTypeCountActivitiesArgs
    interviews?: boolean | CandidateCountOutputTypeCountInterviewsArgs
    applications?: boolean | CandidateCountOutputTypeCountApplicationsArgs
    matchingResults?: boolean | CandidateCountOutputTypeCountMatchingResultsArgs
  }

  // Custom InputTypes
  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateCountOutputType
     */
    select?: CandidateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountInterviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterviewWhereInput
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobApplicationWhereInput
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountMatchingResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchingResultWhereInput
  }


  /**
   * Count Type JobCountOutputType
   */

  export type JobCountOutputType = {
    activities: number
    interviews: number
    applications: number
    matchingResults: number
  }

  export type JobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | JobCountOutputTypeCountActivitiesArgs
    interviews?: boolean | JobCountOutputTypeCountInterviewsArgs
    applications?: boolean | JobCountOutputTypeCountApplicationsArgs
    matchingResults?: boolean | JobCountOutputTypeCountMatchingResultsArgs
  }

  // Custom InputTypes
  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCountOutputType
     */
    select?: JobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountInterviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterviewWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobApplicationWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountMatchingResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchingResultWhereInput
  }


  /**
   * Count Type JobApplicationCountOutputType
   */

  export type JobApplicationCountOutputType = {
    activities: number
    interviews: number
  }

  export type JobApplicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | JobApplicationCountOutputTypeCountActivitiesArgs
    interviews?: boolean | JobApplicationCountOutputTypeCountInterviewsArgs
  }

  // Custom InputTypes
  /**
   * JobApplicationCountOutputType without action
   */
  export type JobApplicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplicationCountOutputType
     */
    select?: JobApplicationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobApplicationCountOutputType without action
   */
  export type JobApplicationCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }

  /**
   * JobApplicationCountOutputType without action
   */
  export type JobApplicationCountOutputTypeCountInterviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterviewWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationAvgAggregateOutputType = {
    maxUsers: number | null
    maxJobs: number | null
  }

  export type OrganizationSumAggregateOutputType = {
    maxUsers: number | null
    maxJobs: number | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: string | null
    slug: string | null
    name: string | null
    domain: string | null
    subdomain: string | null
    plan: $Enums.SubscriptionPlan | null
    maxUsers: number | null
    maxJobs: number | null
    isActive: boolean | null
    trialEndsAt: Date | null
    contactEmail: string | null
    billingEmail: string | null
    contactPhone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: string | null
    slug: string | null
    name: string | null
    domain: string | null
    subdomain: string | null
    plan: $Enums.SubscriptionPlan | null
    maxUsers: number | null
    maxJobs: number | null
    isActive: boolean | null
    trialEndsAt: Date | null
    contactEmail: string | null
    billingEmail: string | null
    contactPhone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    slug: number
    name: number
    brandConfig: number
    domain: number
    subdomain: number
    plan: number
    maxUsers: number
    maxJobs: number
    isActive: number
    trialEndsAt: number
    contactEmail: number
    billingEmail: number
    contactPhone: number
    billingAddress: number
    features: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrganizationAvgAggregateInputType = {
    maxUsers?: true
    maxJobs?: true
  }

  export type OrganizationSumAggregateInputType = {
    maxUsers?: true
    maxJobs?: true
  }

  export type OrganizationMinAggregateInputType = {
    id?: true
    slug?: true
    name?: true
    domain?: true
    subdomain?: true
    plan?: true
    maxUsers?: true
    maxJobs?: true
    isActive?: true
    trialEndsAt?: true
    contactEmail?: true
    billingEmail?: true
    contactPhone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    slug?: true
    name?: true
    domain?: true
    subdomain?: true
    plan?: true
    maxUsers?: true
    maxJobs?: true
    isActive?: true
    trialEndsAt?: true
    contactEmail?: true
    billingEmail?: true
    contactPhone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    slug?: true
    name?: true
    brandConfig?: true
    domain?: true
    subdomain?: true
    plan?: true
    maxUsers?: true
    maxJobs?: true
    isActive?: true
    trialEndsAt?: true
    contactEmail?: true
    billingEmail?: true
    contactPhone?: true
    billingAddress?: true
    features?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrganizationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrganizationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _avg?: OrganizationAvgAggregateInputType
    _sum?: OrganizationSumAggregateInputType
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: string
    slug: string
    name: string
    brandConfig: JsonValue | null
    domain: string | null
    subdomain: string | null
    plan: $Enums.SubscriptionPlan
    maxUsers: number
    maxJobs: number
    isActive: boolean
    trialEndsAt: Date | null
    contactEmail: string
    billingEmail: string | null
    contactPhone: string | null
    billingAddress: JsonValue | null
    features: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slug?: boolean
    name?: boolean
    brandConfig?: boolean
    domain?: boolean
    subdomain?: boolean
    plan?: boolean
    maxUsers?: boolean
    maxJobs?: boolean
    isActive?: boolean
    trialEndsAt?: boolean
    contactEmail?: boolean
    billingEmail?: boolean
    contactPhone?: boolean
    billingAddress?: boolean
    features?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidates?: boolean | Organization$candidatesArgs<ExtArgs>
    companies?: boolean | Organization$companiesArgs<ExtArgs>
    jobs?: boolean | Organization$jobsArgs<ExtArgs>
    matchingResults?: boolean | Organization$matchingResultsArgs<ExtArgs>
    users?: boolean | Organization$usersArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slug?: boolean
    name?: boolean
    brandConfig?: boolean
    domain?: boolean
    subdomain?: boolean
    plan?: boolean
    maxUsers?: boolean
    maxJobs?: boolean
    isActive?: boolean
    trialEndsAt?: boolean
    contactEmail?: boolean
    billingEmail?: boolean
    contactPhone?: boolean
    billingAddress?: boolean
    features?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slug?: boolean
    name?: boolean
    brandConfig?: boolean
    domain?: boolean
    subdomain?: boolean
    plan?: boolean
    maxUsers?: boolean
    maxJobs?: boolean
    isActive?: boolean
    trialEndsAt?: boolean
    contactEmail?: boolean
    billingEmail?: boolean
    contactPhone?: boolean
    billingAddress?: boolean
    features?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    slug?: boolean
    name?: boolean
    brandConfig?: boolean
    domain?: boolean
    subdomain?: boolean
    plan?: boolean
    maxUsers?: boolean
    maxJobs?: boolean
    isActive?: boolean
    trialEndsAt?: boolean
    contactEmail?: boolean
    billingEmail?: boolean
    contactPhone?: boolean
    billingAddress?: boolean
    features?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "slug" | "name" | "brandConfig" | "domain" | "subdomain" | "plan" | "maxUsers" | "maxJobs" | "isActive" | "trialEndsAt" | "contactEmail" | "billingEmail" | "contactPhone" | "billingAddress" | "features" | "createdAt" | "updatedAt", ExtArgs["result"]["organization"]>
  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidates?: boolean | Organization$candidatesArgs<ExtArgs>
    companies?: boolean | Organization$companiesArgs<ExtArgs>
    jobs?: boolean | Organization$jobsArgs<ExtArgs>
    matchingResults?: boolean | Organization$matchingResultsArgs<ExtArgs>
    users?: boolean | Organization$usersArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OrganizationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      candidates: Prisma.$CandidatePayload<ExtArgs>[]
      companies: Prisma.$CompanyPayload<ExtArgs>[]
      jobs: Prisma.$JobPayload<ExtArgs>[]
      matchingResults: Prisma.$MatchingResultPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      slug: string
      name: string
      brandConfig: Prisma.JsonValue | null
      domain: string | null
      subdomain: string | null
      plan: $Enums.SubscriptionPlan
      maxUsers: number
      maxJobs: number
      isActive: boolean
      trialEndsAt: Date | null
      contactEmail: string
      billingEmail: string | null
      contactPhone: string | null
      billingAddress: Prisma.JsonValue | null
      features: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
     */
    create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizations and returns the data saved in the database.
     * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
     */
    delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations and returns the data updated in the database.
     * @param {OrganizationUpdateManyAndReturnArgs} args - Arguments to update many Organizations.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrganizationUpdateManyAndReturnArgs>(args: SelectSubset<T, OrganizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidates<T extends Organization$candidatesArgs<ExtArgs> = {}>(args?: Subset<T, Organization$candidatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    companies<T extends Organization$companiesArgs<ExtArgs> = {}>(args?: Subset<T, Organization$companiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobs<T extends Organization$jobsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matchingResults<T extends Organization$matchingResultsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$matchingResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchingResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Organization$usersArgs<ExtArgs> = {}>(args?: Subset<T, Organization$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Organization model
   */
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'String'>
    readonly slug: FieldRef<"Organization", 'String'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly brandConfig: FieldRef<"Organization", 'Json'>
    readonly domain: FieldRef<"Organization", 'String'>
    readonly subdomain: FieldRef<"Organization", 'String'>
    readonly plan: FieldRef<"Organization", 'SubscriptionPlan'>
    readonly maxUsers: FieldRef<"Organization", 'Int'>
    readonly maxJobs: FieldRef<"Organization", 'Int'>
    readonly isActive: FieldRef<"Organization", 'Boolean'>
    readonly trialEndsAt: FieldRef<"Organization", 'DateTime'>
    readonly contactEmail: FieldRef<"Organization", 'String'>
    readonly billingEmail: FieldRef<"Organization", 'String'>
    readonly contactPhone: FieldRef<"Organization", 'String'>
    readonly billingAddress: FieldRef<"Organization", 'Json'>
    readonly features: FieldRef<"Organization", 'Json'>
    readonly createdAt: FieldRef<"Organization", 'DateTime'>
    readonly updatedAt: FieldRef<"Organization", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization createManyAndReturn
   */
  export type OrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization updateManyAndReturn
   */
  export type OrganizationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to delete.
     */
    limit?: number
  }

  /**
   * Organization.candidates
   */
  export type Organization$candidatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    where?: CandidateWhereInput
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    cursor?: CandidateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Organization.companies
   */
  export type Organization$companiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Organization.jobs
   */
  export type Organization$jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Organization.matchingResults
   */
  export type Organization$matchingResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingResult
     */
    select?: MatchingResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchingResult
     */
    omit?: MatchingResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingResultInclude<ExtArgs> | null
    where?: MatchingResultWhereInput
    orderBy?: MatchingResultOrderByWithRelationInput | MatchingResultOrderByWithRelationInput[]
    cursor?: MatchingResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchingResultScalarFieldEnum | MatchingResultScalarFieldEnum[]
  }

  /**
   * Organization.users
   */
  export type Organization$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    password: string | null
    role: $Enums.UserRole | null
    companyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
    isActive: boolean | null
    organizationId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    password: string | null
    role: $Enums.UserRole | null
    companyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
    isActive: boolean | null
    organizationId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    firstName: number
    lastName: number
    password: number
    role: number
    companyId: number
    createdAt: number
    updatedAt: number
    lastLogin: number
    isActive: number
    organizationId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    password?: true
    role?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
    isActive?: true
    organizationId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    password?: true
    role?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
    isActive?: true
    organizationId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    password?: true
    role?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
    isActive?: true
    organizationId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    firstName: string
    lastName: string
    password: string
    role: $Enums.UserRole
    companyId: string | null
    createdAt: Date
    updatedAt: Date
    lastLogin: Date | null
    isActive: boolean
    organizationId: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    role?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    isActive?: boolean
    organizationId?: boolean
    activities?: boolean | User$activitiesArgs<ExtArgs>
    candidates?: boolean | User$candidatesArgs<ExtArgs>
    conductedInterviews?: boolean | User$conductedInterviewsArgs<ExtArgs>
    jobs?: boolean | User$jobsArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    role?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    isActive?: boolean
    organizationId?: boolean
    company?: boolean | User$companyArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    role?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    isActive?: boolean
    organizationId?: boolean
    company?: boolean | User$companyArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    role?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    isActive?: boolean
    organizationId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "firstName" | "lastName" | "password" | "role" | "companyId" | "createdAt" | "updatedAt" | "lastLogin" | "isActive" | "organizationId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | User$activitiesArgs<ExtArgs>
    candidates?: boolean | User$candidatesArgs<ExtArgs>
    conductedInterviews?: boolean | User$conductedInterviewsArgs<ExtArgs>
    jobs?: boolean | User$jobsArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | User$companyArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | User$companyArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      activities: Prisma.$ActivityPayload<ExtArgs>[]
      candidates: Prisma.$CandidatePayload<ExtArgs>[]
      conductedInterviews: Prisma.$InterviewPayload<ExtArgs>[]
      jobs: Prisma.$JobPayload<ExtArgs>[]
      company: Prisma.$CompanyPayload<ExtArgs> | null
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      firstName: string
      lastName: string
      password: string
      role: $Enums.UserRole
      companyId: string | null
      createdAt: Date
      updatedAt: Date
      lastLogin: Date | null
      isActive: boolean
      organizationId: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activities<T extends User$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    candidates<T extends User$candidatesArgs<ExtArgs> = {}>(args?: Subset<T, User$candidatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    conductedInterviews<T extends User$conductedInterviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$conductedInterviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobs<T extends User$jobsArgs<ExtArgs> = {}>(args?: Subset<T, User$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    company<T extends User$companyArgs<ExtArgs> = {}>(args?: Subset<T, User$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly companyId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly organizationId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.activities
   */
  export type User$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * User.candidates
   */
  export type User$candidatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    where?: CandidateWhereInput
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    cursor?: CandidateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * User.conductedInterviews
   */
  export type User$conductedInterviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    where?: InterviewWhereInput
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    cursor?: InterviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * User.jobs
   */
  export type User$jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * User.company
   */
  export type User$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    website: string | null
    logo: string | null
    email: string | null
    phone: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    website: string | null
    logo: string | null
    email: string | null
    phone: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    name: number
    description: number
    website: number
    logo: number
    email: number
    phone: number
    address: number
    createdAt: number
    updatedAt: number
    organizationId: number
    _all: number
  }


  export type CompanyMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    website?: true
    logo?: true
    email?: true
    phone?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    website?: true
    logo?: true
    email?: true
    phone?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    website?: true
    logo?: true
    email?: true
    phone?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: string
    name: string
    description: string | null
    website: string | null
    logo: string | null
    email: string | null
    phone: string | null
    address: string | null
    createdAt: Date
    updatedAt: Date
    organizationId: string
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    website?: boolean
    logo?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    candidates?: boolean | Company$candidatesArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    jobs?: boolean | Company$jobsArgs<ExtArgs>
    users?: boolean | Company$usersArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    website?: boolean
    logo?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    website?: boolean
    logo?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    website?: boolean
    logo?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
  }

  export type CompanyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "website" | "logo" | "email" | "phone" | "address" | "createdAt" | "updatedAt" | "organizationId", ExtArgs["result"]["company"]>
  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidates?: boolean | Company$candidatesArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    jobs?: boolean | Company$jobsArgs<ExtArgs>
    users?: boolean | Company$usersArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      candidates: Prisma.$CandidatePayload<ExtArgs>[]
      organization: Prisma.$OrganizationPayload<ExtArgs>
      jobs: Prisma.$JobPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      website: string | null
      logo: string | null
      email: string | null
      phone: string | null
      address: string | null
      createdAt: Date
      updatedAt: Date
      organizationId: string
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies and returns the data updated in the database.
     * @param {CompanyUpdateManyAndReturnArgs} args - Arguments to update many Companies.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidates<T extends Company$candidatesArgs<ExtArgs> = {}>(args?: Subset<T, Company$candidatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    jobs<T extends Company$jobsArgs<ExtArgs> = {}>(args?: Subset<T, Company$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Company$usersArgs<ExtArgs> = {}>(args?: Subset<T, Company$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'String'>
    readonly name: FieldRef<"Company", 'String'>
    readonly description: FieldRef<"Company", 'String'>
    readonly website: FieldRef<"Company", 'String'>
    readonly logo: FieldRef<"Company", 'String'>
    readonly email: FieldRef<"Company", 'String'>
    readonly phone: FieldRef<"Company", 'String'>
    readonly address: FieldRef<"Company", 'String'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
    readonly organizationId: FieldRef<"Company", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company updateManyAndReturn
   */
  export type CompanyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to delete.
     */
    limit?: number
  }

  /**
   * Company.candidates
   */
  export type Company$candidatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    where?: CandidateWhereInput
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    cursor?: CandidateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Company.jobs
   */
  export type Company$jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Company.users
   */
  export type Company$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model Candidate
   */

  export type AggregateCandidate = {
    _count: CandidateCountAggregateOutputType | null
    _avg: CandidateAvgAggregateOutputType | null
    _sum: CandidateSumAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  export type CandidateAvgAggregateOutputType = {
    yearsOfExperience: number | null
    currentSalary: number | null
    expectedSalary: number | null
  }

  export type CandidateSumAggregateOutputType = {
    yearsOfExperience: number | null
    currentSalary: number | null
    expectedSalary: number | null
  }

  export type CandidateMinAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    linkedin: string | null
    github: string | null
    portfolio: string | null
    resume: string | null
    summary: string | null
    resumeUrl: string | null
    status: $Enums.CandidateStatus | null
    location: string | null
    timezone: string | null
    yearsOfExperience: number | null
    currentSalary: number | null
    expectedSalary: number | null
    availability: Date | null
    source: string | null
    notes: string | null
    companyId: string | null
    addedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
    currentRole: string | null
    embedding: string | null
    embeddingAt: Date | null
    embeddingModel: string | null
  }

  export type CandidateMaxAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    linkedin: string | null
    github: string | null
    portfolio: string | null
    resume: string | null
    summary: string | null
    resumeUrl: string | null
    status: $Enums.CandidateStatus | null
    location: string | null
    timezone: string | null
    yearsOfExperience: number | null
    currentSalary: number | null
    expectedSalary: number | null
    availability: Date | null
    source: string | null
    notes: string | null
    companyId: string | null
    addedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
    currentRole: string | null
    embedding: string | null
    embeddingAt: Date | null
    embeddingModel: string | null
  }

  export type CandidateCountAggregateOutputType = {
    id: number
    email: number
    firstName: number
    lastName: number
    phone: number
    linkedin: number
    github: number
    portfolio: number
    resume: number
    summary: number
    resumeUrl: number
    status: number
    location: number
    timezone: number
    yearsOfExperience: number
    currentSalary: number
    expectedSalary: number
    availability: number
    source: number
    notes: number
    tags: number
    companyId: number
    addedById: number
    createdAt: number
    updatedAt: number
    organizationId: number
    certifications: number
    currentRole: number
    education: number
    experience: number
    industryExperience: number
    projects: number
    salaryExpectation: number
    skills: number
    embedding: number
    embeddingAt: number
    embeddingModel: number
    _all: number
  }


  export type CandidateAvgAggregateInputType = {
    yearsOfExperience?: true
    currentSalary?: true
    expectedSalary?: true
  }

  export type CandidateSumAggregateInputType = {
    yearsOfExperience?: true
    currentSalary?: true
    expectedSalary?: true
  }

  export type CandidateMinAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    phone?: true
    linkedin?: true
    github?: true
    portfolio?: true
    resume?: true
    summary?: true
    resumeUrl?: true
    status?: true
    location?: true
    timezone?: true
    yearsOfExperience?: true
    currentSalary?: true
    expectedSalary?: true
    availability?: true
    source?: true
    notes?: true
    companyId?: true
    addedById?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    currentRole?: true
    embedding?: true
    embeddingAt?: true
    embeddingModel?: true
  }

  export type CandidateMaxAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    phone?: true
    linkedin?: true
    github?: true
    portfolio?: true
    resume?: true
    summary?: true
    resumeUrl?: true
    status?: true
    location?: true
    timezone?: true
    yearsOfExperience?: true
    currentSalary?: true
    expectedSalary?: true
    availability?: true
    source?: true
    notes?: true
    companyId?: true
    addedById?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    currentRole?: true
    embedding?: true
    embeddingAt?: true
    embeddingModel?: true
  }

  export type CandidateCountAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    phone?: true
    linkedin?: true
    github?: true
    portfolio?: true
    resume?: true
    summary?: true
    resumeUrl?: true
    status?: true
    location?: true
    timezone?: true
    yearsOfExperience?: true
    currentSalary?: true
    expectedSalary?: true
    availability?: true
    source?: true
    notes?: true
    tags?: true
    companyId?: true
    addedById?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    certifications?: true
    currentRole?: true
    education?: true
    experience?: true
    industryExperience?: true
    projects?: true
    salaryExpectation?: true
    skills?: true
    embedding?: true
    embeddingAt?: true
    embeddingModel?: true
    _all?: true
  }

  export type CandidateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidate to aggregate.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Candidates
    **/
    _count?: true | CandidateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateMaxAggregateInputType
  }

  export type GetCandidateAggregateType<T extends CandidateAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidate[P]>
      : GetScalarType<T[P], AggregateCandidate[P]>
  }




  export type CandidateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateWhereInput
    orderBy?: CandidateOrderByWithAggregationInput | CandidateOrderByWithAggregationInput[]
    by: CandidateScalarFieldEnum[] | CandidateScalarFieldEnum
    having?: CandidateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateCountAggregateInputType | true
    _avg?: CandidateAvgAggregateInputType
    _sum?: CandidateSumAggregateInputType
    _min?: CandidateMinAggregateInputType
    _max?: CandidateMaxAggregateInputType
  }

  export type CandidateGroupByOutputType = {
    id: string
    email: string
    firstName: string
    lastName: string
    phone: string | null
    linkedin: string | null
    github: string | null
    portfolio: string | null
    resume: string | null
    summary: string | null
    resumeUrl: string | null
    status: $Enums.CandidateStatus
    location: string | null
    timezone: string | null
    yearsOfExperience: number | null
    currentSalary: number | null
    expectedSalary: number | null
    availability: Date | null
    source: string | null
    notes: string | null
    tags: string[]
    companyId: string | null
    addedById: string
    createdAt: Date
    updatedAt: Date
    organizationId: string
    certifications: JsonValue | null
    currentRole: string | null
    education: JsonValue | null
    experience: JsonValue | null
    industryExperience: string[]
    projects: JsonValue | null
    salaryExpectation: JsonValue | null
    skills: JsonValue | null
    embedding: string | null
    embeddingAt: Date | null
    embeddingModel: string | null
    _count: CandidateCountAggregateOutputType | null
    _avg: CandidateAvgAggregateOutputType | null
    _sum: CandidateSumAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  type GetCandidateGroupByPayload<T extends CandidateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateGroupByOutputType[P]>
        }
      >
    >


  export type CandidateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    linkedin?: boolean
    github?: boolean
    portfolio?: boolean
    resume?: boolean
    summary?: boolean
    resumeUrl?: boolean
    status?: boolean
    location?: boolean
    timezone?: boolean
    yearsOfExperience?: boolean
    currentSalary?: boolean
    expectedSalary?: boolean
    availability?: boolean
    source?: boolean
    notes?: boolean
    tags?: boolean
    companyId?: boolean
    addedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    certifications?: boolean
    currentRole?: boolean
    education?: boolean
    experience?: boolean
    industryExperience?: boolean
    projects?: boolean
    salaryExpectation?: boolean
    skills?: boolean
    embedding?: boolean
    embeddingAt?: boolean
    embeddingModel?: boolean
    activities?: boolean | Candidate$activitiesArgs<ExtArgs>
    addedBy?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | Candidate$companyArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    interviews?: boolean | Candidate$interviewsArgs<ExtArgs>
    applications?: boolean | Candidate$applicationsArgs<ExtArgs>
    matchingResults?: boolean | Candidate$matchingResultsArgs<ExtArgs>
    _count?: boolean | CandidateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidate"]>

  export type CandidateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    linkedin?: boolean
    github?: boolean
    portfolio?: boolean
    resume?: boolean
    summary?: boolean
    resumeUrl?: boolean
    status?: boolean
    location?: boolean
    timezone?: boolean
    yearsOfExperience?: boolean
    currentSalary?: boolean
    expectedSalary?: boolean
    availability?: boolean
    source?: boolean
    notes?: boolean
    tags?: boolean
    companyId?: boolean
    addedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    certifications?: boolean
    currentRole?: boolean
    education?: boolean
    experience?: boolean
    industryExperience?: boolean
    projects?: boolean
    salaryExpectation?: boolean
    skills?: boolean
    embedding?: boolean
    embeddingAt?: boolean
    embeddingModel?: boolean
    addedBy?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | Candidate$companyArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidate"]>

  export type CandidateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    linkedin?: boolean
    github?: boolean
    portfolio?: boolean
    resume?: boolean
    summary?: boolean
    resumeUrl?: boolean
    status?: boolean
    location?: boolean
    timezone?: boolean
    yearsOfExperience?: boolean
    currentSalary?: boolean
    expectedSalary?: boolean
    availability?: boolean
    source?: boolean
    notes?: boolean
    tags?: boolean
    companyId?: boolean
    addedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    certifications?: boolean
    currentRole?: boolean
    education?: boolean
    experience?: boolean
    industryExperience?: boolean
    projects?: boolean
    salaryExpectation?: boolean
    skills?: boolean
    embedding?: boolean
    embeddingAt?: boolean
    embeddingModel?: boolean
    addedBy?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | Candidate$companyArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidate"]>

  export type CandidateSelectScalar = {
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    linkedin?: boolean
    github?: boolean
    portfolio?: boolean
    resume?: boolean
    summary?: boolean
    resumeUrl?: boolean
    status?: boolean
    location?: boolean
    timezone?: boolean
    yearsOfExperience?: boolean
    currentSalary?: boolean
    expectedSalary?: boolean
    availability?: boolean
    source?: boolean
    notes?: boolean
    tags?: boolean
    companyId?: boolean
    addedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    certifications?: boolean
    currentRole?: boolean
    education?: boolean
    experience?: boolean
    industryExperience?: boolean
    projects?: boolean
    salaryExpectation?: boolean
    skills?: boolean
    embedding?: boolean
    embeddingAt?: boolean
    embeddingModel?: boolean
  }

  export type CandidateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "firstName" | "lastName" | "phone" | "linkedin" | "github" | "portfolio" | "resume" | "summary" | "resumeUrl" | "status" | "location" | "timezone" | "yearsOfExperience" | "currentSalary" | "expectedSalary" | "availability" | "source" | "notes" | "tags" | "companyId" | "addedById" | "createdAt" | "updatedAt" | "organizationId" | "certifications" | "currentRole" | "education" | "experience" | "industryExperience" | "projects" | "salaryExpectation" | "skills" | "embedding" | "embeddingAt" | "embeddingModel", ExtArgs["result"]["candidate"]>
  export type CandidateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | Candidate$activitiesArgs<ExtArgs>
    addedBy?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | Candidate$companyArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    interviews?: boolean | Candidate$interviewsArgs<ExtArgs>
    applications?: boolean | Candidate$applicationsArgs<ExtArgs>
    matchingResults?: boolean | Candidate$matchingResultsArgs<ExtArgs>
    _count?: boolean | CandidateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CandidateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    addedBy?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | Candidate$companyArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type CandidateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    addedBy?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | Candidate$companyArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $CandidatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Candidate"
    objects: {
      activities: Prisma.$ActivityPayload<ExtArgs>[]
      addedBy: Prisma.$UserPayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs> | null
      organization: Prisma.$OrganizationPayload<ExtArgs>
      interviews: Prisma.$InterviewPayload<ExtArgs>[]
      applications: Prisma.$JobApplicationPayload<ExtArgs>[]
      matchingResults: Prisma.$MatchingResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      firstName: string
      lastName: string
      phone: string | null
      linkedin: string | null
      github: string | null
      portfolio: string | null
      resume: string | null
      summary: string | null
      resumeUrl: string | null
      status: $Enums.CandidateStatus
      location: string | null
      timezone: string | null
      yearsOfExperience: number | null
      currentSalary: number | null
      expectedSalary: number | null
      availability: Date | null
      source: string | null
      notes: string | null
      tags: string[]
      companyId: string | null
      addedById: string
      createdAt: Date
      updatedAt: Date
      organizationId: string
      certifications: Prisma.JsonValue | null
      currentRole: string | null
      education: Prisma.JsonValue | null
      experience: Prisma.JsonValue | null
      industryExperience: string[]
      projects: Prisma.JsonValue | null
      salaryExpectation: Prisma.JsonValue | null
      skills: Prisma.JsonValue | null
      embedding: string | null
      embeddingAt: Date | null
      embeddingModel: string | null
    }, ExtArgs["result"]["candidate"]>
    composites: {}
  }

  type CandidateGetPayload<S extends boolean | null | undefined | CandidateDefaultArgs> = $Result.GetResult<Prisma.$CandidatePayload, S>

  type CandidateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CandidateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CandidateCountAggregateInputType | true
    }

  export interface CandidateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Candidate'], meta: { name: 'Candidate' } }
    /**
     * Find zero or one Candidate that matches the filter.
     * @param {CandidateFindUniqueArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CandidateFindUniqueArgs>(args: SelectSubset<T, CandidateFindUniqueArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Candidate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CandidateFindUniqueOrThrowArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CandidateFindUniqueOrThrowArgs>(args: SelectSubset<T, CandidateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Candidate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CandidateFindFirstArgs>(args?: SelectSubset<T, CandidateFindFirstArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Candidate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstOrThrowArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CandidateFindFirstOrThrowArgs>(args?: SelectSubset<T, CandidateFindFirstOrThrowArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Candidates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Candidates
     * const candidates = await prisma.candidate.findMany()
     * 
     * // Get first 10 Candidates
     * const candidates = await prisma.candidate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidateWithIdOnly = await prisma.candidate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CandidateFindManyArgs>(args?: SelectSubset<T, CandidateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Candidate.
     * @param {CandidateCreateArgs} args - Arguments to create a Candidate.
     * @example
     * // Create one Candidate
     * const Candidate = await prisma.candidate.create({
     *   data: {
     *     // ... data to create a Candidate
     *   }
     * })
     * 
     */
    create<T extends CandidateCreateArgs>(args: SelectSubset<T, CandidateCreateArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Candidates.
     * @param {CandidateCreateManyArgs} args - Arguments to create many Candidates.
     * @example
     * // Create many Candidates
     * const candidate = await prisma.candidate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CandidateCreateManyArgs>(args?: SelectSubset<T, CandidateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Candidates and returns the data saved in the database.
     * @param {CandidateCreateManyAndReturnArgs} args - Arguments to create many Candidates.
     * @example
     * // Create many Candidates
     * const candidate = await prisma.candidate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Candidates and only return the `id`
     * const candidateWithIdOnly = await prisma.candidate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CandidateCreateManyAndReturnArgs>(args?: SelectSubset<T, CandidateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Candidate.
     * @param {CandidateDeleteArgs} args - Arguments to delete one Candidate.
     * @example
     * // Delete one Candidate
     * const Candidate = await prisma.candidate.delete({
     *   where: {
     *     // ... filter to delete one Candidate
     *   }
     * })
     * 
     */
    delete<T extends CandidateDeleteArgs>(args: SelectSubset<T, CandidateDeleteArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Candidate.
     * @param {CandidateUpdateArgs} args - Arguments to update one Candidate.
     * @example
     * // Update one Candidate
     * const candidate = await prisma.candidate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CandidateUpdateArgs>(args: SelectSubset<T, CandidateUpdateArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Candidates.
     * @param {CandidateDeleteManyArgs} args - Arguments to filter Candidates to delete.
     * @example
     * // Delete a few Candidates
     * const { count } = await prisma.candidate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CandidateDeleteManyArgs>(args?: SelectSubset<T, CandidateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Candidates
     * const candidate = await prisma.candidate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CandidateUpdateManyArgs>(args: SelectSubset<T, CandidateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidates and returns the data updated in the database.
     * @param {CandidateUpdateManyAndReturnArgs} args - Arguments to update many Candidates.
     * @example
     * // Update many Candidates
     * const candidate = await prisma.candidate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Candidates and only return the `id`
     * const candidateWithIdOnly = await prisma.candidate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CandidateUpdateManyAndReturnArgs>(args: SelectSubset<T, CandidateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Candidate.
     * @param {CandidateUpsertArgs} args - Arguments to update or create a Candidate.
     * @example
     * // Update or create a Candidate
     * const candidate = await prisma.candidate.upsert({
     *   create: {
     *     // ... data to create a Candidate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Candidate we want to update
     *   }
     * })
     */
    upsert<T extends CandidateUpsertArgs>(args: SelectSubset<T, CandidateUpsertArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateCountArgs} args - Arguments to filter Candidates to count.
     * @example
     * // Count the number of Candidates
     * const count = await prisma.candidate.count({
     *   where: {
     *     // ... the filter for the Candidates we want to count
     *   }
     * })
    **/
    count<T extends CandidateCountArgs>(
      args?: Subset<T, CandidateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateAggregateArgs>(args: Subset<T, CandidateAggregateArgs>): Prisma.PrismaPromise<GetCandidateAggregateType<T>>

    /**
     * Group by Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateGroupByArgs['orderBy'] }
        : { orderBy?: CandidateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Candidate model
   */
  readonly fields: CandidateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Candidate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activities<T extends Candidate$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    addedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    company<T extends Candidate$companyArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    interviews<T extends Candidate$interviewsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$interviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    applications<T extends Candidate$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matchingResults<T extends Candidate$matchingResultsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$matchingResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchingResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Candidate model
   */
  interface CandidateFieldRefs {
    readonly id: FieldRef<"Candidate", 'String'>
    readonly email: FieldRef<"Candidate", 'String'>
    readonly firstName: FieldRef<"Candidate", 'String'>
    readonly lastName: FieldRef<"Candidate", 'String'>
    readonly phone: FieldRef<"Candidate", 'String'>
    readonly linkedin: FieldRef<"Candidate", 'String'>
    readonly github: FieldRef<"Candidate", 'String'>
    readonly portfolio: FieldRef<"Candidate", 'String'>
    readonly resume: FieldRef<"Candidate", 'String'>
    readonly summary: FieldRef<"Candidate", 'String'>
    readonly resumeUrl: FieldRef<"Candidate", 'String'>
    readonly status: FieldRef<"Candidate", 'CandidateStatus'>
    readonly location: FieldRef<"Candidate", 'String'>
    readonly timezone: FieldRef<"Candidate", 'String'>
    readonly yearsOfExperience: FieldRef<"Candidate", 'Int'>
    readonly currentSalary: FieldRef<"Candidate", 'Float'>
    readonly expectedSalary: FieldRef<"Candidate", 'Float'>
    readonly availability: FieldRef<"Candidate", 'DateTime'>
    readonly source: FieldRef<"Candidate", 'String'>
    readonly notes: FieldRef<"Candidate", 'String'>
    readonly tags: FieldRef<"Candidate", 'String[]'>
    readonly companyId: FieldRef<"Candidate", 'String'>
    readonly addedById: FieldRef<"Candidate", 'String'>
    readonly createdAt: FieldRef<"Candidate", 'DateTime'>
    readonly updatedAt: FieldRef<"Candidate", 'DateTime'>
    readonly organizationId: FieldRef<"Candidate", 'String'>
    readonly certifications: FieldRef<"Candidate", 'Json'>
    readonly currentRole: FieldRef<"Candidate", 'String'>
    readonly education: FieldRef<"Candidate", 'Json'>
    readonly experience: FieldRef<"Candidate", 'Json'>
    readonly industryExperience: FieldRef<"Candidate", 'String[]'>
    readonly projects: FieldRef<"Candidate", 'Json'>
    readonly salaryExpectation: FieldRef<"Candidate", 'Json'>
    readonly skills: FieldRef<"Candidate", 'Json'>
    readonly embedding: FieldRef<"Candidate", 'String'>
    readonly embeddingAt: FieldRef<"Candidate", 'DateTime'>
    readonly embeddingModel: FieldRef<"Candidate", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Candidate findUnique
   */
  export type CandidateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate findUniqueOrThrow
   */
  export type CandidateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate findFirst
   */
  export type CandidateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     */
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate findFirstOrThrow
   */
  export type CandidateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     */
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate findMany
   */
  export type CandidateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidates to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate create
   */
  export type CandidateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The data needed to create a Candidate.
     */
    data: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
  }

  /**
   * Candidate createMany
   */
  export type CandidateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Candidates.
     */
    data: CandidateCreateManyInput | CandidateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Candidate createManyAndReturn
   */
  export type CandidateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * The data used to create many Candidates.
     */
    data: CandidateCreateManyInput | CandidateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Candidate update
   */
  export type CandidateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The data needed to update a Candidate.
     */
    data: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
    /**
     * Choose, which Candidate to update.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate updateMany
   */
  export type CandidateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Candidates.
     */
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyInput>
    /**
     * Filter which Candidates to update
     */
    where?: CandidateWhereInput
    /**
     * Limit how many Candidates to update.
     */
    limit?: number
  }

  /**
   * Candidate updateManyAndReturn
   */
  export type CandidateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * The data used to update Candidates.
     */
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyInput>
    /**
     * Filter which Candidates to update
     */
    where?: CandidateWhereInput
    /**
     * Limit how many Candidates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Candidate upsert
   */
  export type CandidateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The filter to search for the Candidate to update in case it exists.
     */
    where: CandidateWhereUniqueInput
    /**
     * In case the Candidate found by the `where` argument doesn't exist, create a new Candidate with this data.
     */
    create: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
    /**
     * In case the Candidate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
  }

  /**
   * Candidate delete
   */
  export type CandidateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter which Candidate to delete.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate deleteMany
   */
  export type CandidateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidates to delete
     */
    where?: CandidateWhereInput
    /**
     * Limit how many Candidates to delete.
     */
    limit?: number
  }

  /**
   * Candidate.activities
   */
  export type Candidate$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Candidate.company
   */
  export type Candidate$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * Candidate.interviews
   */
  export type Candidate$interviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    where?: InterviewWhereInput
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    cursor?: InterviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * Candidate.applications
   */
  export type Candidate$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    where?: JobApplicationWhereInput
    orderBy?: JobApplicationOrderByWithRelationInput | JobApplicationOrderByWithRelationInput[]
    cursor?: JobApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobApplicationScalarFieldEnum | JobApplicationScalarFieldEnum[]
  }

  /**
   * Candidate.matchingResults
   */
  export type Candidate$matchingResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingResult
     */
    select?: MatchingResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchingResult
     */
    omit?: MatchingResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingResultInclude<ExtArgs> | null
    where?: MatchingResultWhereInput
    orderBy?: MatchingResultOrderByWithRelationInput | MatchingResultOrderByWithRelationInput[]
    cursor?: MatchingResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchingResultScalarFieldEnum | MatchingResultScalarFieldEnum[]
  }

  /**
   * Candidate without action
   */
  export type CandidateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
  }


  /**
   * Model Job
   */

  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobAvgAggregateOutputType = {
    salaryMin: number | null
    salaryMax: number | null
  }

  export type JobSumAggregateOutputType = {
    salaryMin: number | null
    salaryMax: number | null
  }

  export type JobMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    requirements: string | null
    department: string | null
    location: string | null
    remote: boolean | null
    type: $Enums.JobType | null
    level: $Enums.JobLevel | null
    salaryMin: number | null
    salaryMax: number | null
    currency: string | null
    status: $Enums.JobStatus | null
    priority: $Enums.Priority | null
    startDate: Date | null
    endDate: Date | null
    deadline: Date | null
    companyId: string | null
    recruiterId: string | null
    jobDescriptionUrl: string | null
    aiGenerated: boolean | null
    aiPrompt: string | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
    embedding: string | null
    embeddingAt: Date | null
    embeddingModel: string | null
  }

  export type JobMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    requirements: string | null
    department: string | null
    location: string | null
    remote: boolean | null
    type: $Enums.JobType | null
    level: $Enums.JobLevel | null
    salaryMin: number | null
    salaryMax: number | null
    currency: string | null
    status: $Enums.JobStatus | null
    priority: $Enums.Priority | null
    startDate: Date | null
    endDate: Date | null
    deadline: Date | null
    companyId: string | null
    recruiterId: string | null
    jobDescriptionUrl: string | null
    aiGenerated: boolean | null
    aiPrompt: string | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
    embedding: string | null
    embeddingAt: Date | null
    embeddingModel: string | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    title: number
    description: number
    requirements: number
    department: number
    location: number
    remote: number
    type: number
    level: number
    salaryMin: number
    salaryMax: number
    currency: number
    status: number
    priority: number
    startDate: number
    endDate: number
    deadline: number
    companyId: number
    recruiterId: number
    jobDescriptionUrl: number
    aiGenerated: number
    aiPrompt: number
    createdAt: number
    updatedAt: number
    organizationId: number
    applicationInfo: number
    benefits: number
    metadata: number
    requirementsDetailed: number
    responsibilities: number
    jobInfo: number
    embedding: number
    embeddingAt: number
    embeddingModel: number
    _all: number
  }


  export type JobAvgAggregateInputType = {
    salaryMin?: true
    salaryMax?: true
  }

  export type JobSumAggregateInputType = {
    salaryMin?: true
    salaryMax?: true
  }

  export type JobMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    requirements?: true
    department?: true
    location?: true
    remote?: true
    type?: true
    level?: true
    salaryMin?: true
    salaryMax?: true
    currency?: true
    status?: true
    priority?: true
    startDate?: true
    endDate?: true
    deadline?: true
    companyId?: true
    recruiterId?: true
    jobDescriptionUrl?: true
    aiGenerated?: true
    aiPrompt?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    embedding?: true
    embeddingAt?: true
    embeddingModel?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    requirements?: true
    department?: true
    location?: true
    remote?: true
    type?: true
    level?: true
    salaryMin?: true
    salaryMax?: true
    currency?: true
    status?: true
    priority?: true
    startDate?: true
    endDate?: true
    deadline?: true
    companyId?: true
    recruiterId?: true
    jobDescriptionUrl?: true
    aiGenerated?: true
    aiPrompt?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    embedding?: true
    embeddingAt?: true
    embeddingModel?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    requirements?: true
    department?: true
    location?: true
    remote?: true
    type?: true
    level?: true
    salaryMin?: true
    salaryMax?: true
    currency?: true
    status?: true
    priority?: true
    startDate?: true
    endDate?: true
    deadline?: true
    companyId?: true
    recruiterId?: true
    jobDescriptionUrl?: true
    aiGenerated?: true
    aiPrompt?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    applicationInfo?: true
    benefits?: true
    metadata?: true
    requirementsDetailed?: true
    responsibilities?: true
    jobInfo?: true
    embedding?: true
    embeddingAt?: true
    embeddingModel?: true
    _all?: true
  }

  export type JobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Job to aggregate.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
    orderBy?: JobOrderByWithAggregationInput | JobOrderByWithAggregationInput[]
    by: JobScalarFieldEnum[] | JobScalarFieldEnum
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _avg?: JobAvgAggregateInputType
    _sum?: JobSumAggregateInputType
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }

  export type JobGroupByOutputType = {
    id: string
    title: string
    description: string
    requirements: string | null
    department: string | null
    location: string | null
    remote: boolean
    type: $Enums.JobType
    level: $Enums.JobLevel
    salaryMin: number | null
    salaryMax: number | null
    currency: string
    status: $Enums.JobStatus
    priority: $Enums.Priority
    startDate: Date | null
    endDate: Date | null
    deadline: Date | null
    companyId: string
    recruiterId: string
    jobDescriptionUrl: string | null
    aiGenerated: boolean
    aiPrompt: string | null
    createdAt: Date
    updatedAt: Date
    organizationId: string
    applicationInfo: JsonValue | null
    benefits: JsonValue | null
    metadata: JsonValue | null
    requirementsDetailed: JsonValue | null
    responsibilities: JsonValue | null
    jobInfo: JsonValue | null
    embedding: string | null
    embeddingAt: Date | null
    embeddingModel: string | null
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    requirements?: boolean
    department?: boolean
    location?: boolean
    remote?: boolean
    type?: boolean
    level?: boolean
    salaryMin?: boolean
    salaryMax?: boolean
    currency?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    deadline?: boolean
    companyId?: boolean
    recruiterId?: boolean
    jobDescriptionUrl?: boolean
    aiGenerated?: boolean
    aiPrompt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    applicationInfo?: boolean
    benefits?: boolean
    metadata?: boolean
    requirementsDetailed?: boolean
    responsibilities?: boolean
    jobInfo?: boolean
    embedding?: boolean
    embeddingAt?: boolean
    embeddingModel?: boolean
    activities?: boolean | Job$activitiesArgs<ExtArgs>
    interviews?: boolean | Job$interviewsArgs<ExtArgs>
    applications?: boolean | Job$applicationsArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    recruiter?: boolean | UserDefaultArgs<ExtArgs>
    matchingResults?: boolean | Job$matchingResultsArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    requirements?: boolean
    department?: boolean
    location?: boolean
    remote?: boolean
    type?: boolean
    level?: boolean
    salaryMin?: boolean
    salaryMax?: boolean
    currency?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    deadline?: boolean
    companyId?: boolean
    recruiterId?: boolean
    jobDescriptionUrl?: boolean
    aiGenerated?: boolean
    aiPrompt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    applicationInfo?: boolean
    benefits?: boolean
    metadata?: boolean
    requirementsDetailed?: boolean
    responsibilities?: boolean
    jobInfo?: boolean
    embedding?: boolean
    embeddingAt?: boolean
    embeddingModel?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    recruiter?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    requirements?: boolean
    department?: boolean
    location?: boolean
    remote?: boolean
    type?: boolean
    level?: boolean
    salaryMin?: boolean
    salaryMax?: boolean
    currency?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    deadline?: boolean
    companyId?: boolean
    recruiterId?: boolean
    jobDescriptionUrl?: boolean
    aiGenerated?: boolean
    aiPrompt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    applicationInfo?: boolean
    benefits?: boolean
    metadata?: boolean
    requirementsDetailed?: boolean
    responsibilities?: boolean
    jobInfo?: boolean
    embedding?: boolean
    embeddingAt?: boolean
    embeddingModel?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    recruiter?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    requirements?: boolean
    department?: boolean
    location?: boolean
    remote?: boolean
    type?: boolean
    level?: boolean
    salaryMin?: boolean
    salaryMax?: boolean
    currency?: boolean
    status?: boolean
    priority?: boolean
    startDate?: boolean
    endDate?: boolean
    deadline?: boolean
    companyId?: boolean
    recruiterId?: boolean
    jobDescriptionUrl?: boolean
    aiGenerated?: boolean
    aiPrompt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    applicationInfo?: boolean
    benefits?: boolean
    metadata?: boolean
    requirementsDetailed?: boolean
    responsibilities?: boolean
    jobInfo?: boolean
    embedding?: boolean
    embeddingAt?: boolean
    embeddingModel?: boolean
  }

  export type JobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "requirements" | "department" | "location" | "remote" | "type" | "level" | "salaryMin" | "salaryMax" | "currency" | "status" | "priority" | "startDate" | "endDate" | "deadline" | "companyId" | "recruiterId" | "jobDescriptionUrl" | "aiGenerated" | "aiPrompt" | "createdAt" | "updatedAt" | "organizationId" | "applicationInfo" | "benefits" | "metadata" | "requirementsDetailed" | "responsibilities" | "jobInfo" | "embedding" | "embeddingAt" | "embeddingModel", ExtArgs["result"]["job"]>
  export type JobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | Job$activitiesArgs<ExtArgs>
    interviews?: boolean | Job$interviewsArgs<ExtArgs>
    applications?: boolean | Job$applicationsArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    recruiter?: boolean | UserDefaultArgs<ExtArgs>
    matchingResults?: boolean | Job$matchingResultsArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    recruiter?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type JobIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    recruiter?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $JobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Job"
    objects: {
      activities: Prisma.$ActivityPayload<ExtArgs>[]
      interviews: Prisma.$InterviewPayload<ExtArgs>[]
      applications: Prisma.$JobApplicationPayload<ExtArgs>[]
      company: Prisma.$CompanyPayload<ExtArgs>
      organization: Prisma.$OrganizationPayload<ExtArgs>
      recruiter: Prisma.$UserPayload<ExtArgs>
      matchingResults: Prisma.$MatchingResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      requirements: string | null
      department: string | null
      location: string | null
      remote: boolean
      type: $Enums.JobType
      level: $Enums.JobLevel
      salaryMin: number | null
      salaryMax: number | null
      currency: string
      status: $Enums.JobStatus
      priority: $Enums.Priority
      startDate: Date | null
      endDate: Date | null
      deadline: Date | null
      companyId: string
      recruiterId: string
      jobDescriptionUrl: string | null
      aiGenerated: boolean
      aiPrompt: string | null
      createdAt: Date
      updatedAt: Date
      organizationId: string
      applicationInfo: Prisma.JsonValue | null
      benefits: Prisma.JsonValue | null
      metadata: Prisma.JsonValue | null
      requirementsDetailed: Prisma.JsonValue | null
      responsibilities: Prisma.JsonValue | null
      jobInfo: Prisma.JsonValue | null
      embedding: string | null
      embeddingAt: Date | null
      embeddingModel: string | null
    }, ExtArgs["result"]["job"]>
    composites: {}
  }

  type JobGetPayload<S extends boolean | null | undefined | JobDefaultArgs> = $Result.GetResult<Prisma.$JobPayload, S>

  type JobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobCountAggregateInputType | true
    }

  export interface JobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Job'], meta: { name: 'Job' } }
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobFindUniqueArgs>(args: SelectSubset<T, JobFindUniqueArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Job that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(args: SelectSubset<T, JobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobFindFirstArgs>(args?: SelectSubset<T, JobFindFirstArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(args?: SelectSubset<T, JobFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobFindManyArgs>(args?: SelectSubset<T, JobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
     */
    create<T extends JobCreateArgs>(args: SelectSubset<T, JobCreateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Jobs.
     * @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobCreateManyArgs>(args?: SelectSubset<T, JobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jobs and returns the data saved in the database.
     * @param {JobCreateManyAndReturnArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobCreateManyAndReturnArgs>(args?: SelectSubset<T, JobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
     */
    delete<T extends JobDeleteArgs>(args: SelectSubset<T, JobDeleteArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobUpdateArgs>(args: SelectSubset<T, JobUpdateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobDeleteManyArgs>(args?: SelectSubset<T, JobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobUpdateManyArgs>(args: SelectSubset<T, JobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs and returns the data updated in the database.
     * @param {JobUpdateManyAndReturnArgs} args - Arguments to update many Jobs.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobUpdateManyAndReturnArgs>(args: SelectSubset<T, JobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
     */
    upsert<T extends JobUpsertArgs>(args: SelectSubset<T, JobUpsertArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): Prisma.PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Job model
   */
  readonly fields: JobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activities<T extends Job$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, Job$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    interviews<T extends Job$interviewsArgs<ExtArgs> = {}>(args?: Subset<T, Job$interviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    applications<T extends Job$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, Job$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    recruiter<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    matchingResults<T extends Job$matchingResultsArgs<ExtArgs> = {}>(args?: Subset<T, Job$matchingResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchingResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Job model
   */
  interface JobFieldRefs {
    readonly id: FieldRef<"Job", 'String'>
    readonly title: FieldRef<"Job", 'String'>
    readonly description: FieldRef<"Job", 'String'>
    readonly requirements: FieldRef<"Job", 'String'>
    readonly department: FieldRef<"Job", 'String'>
    readonly location: FieldRef<"Job", 'String'>
    readonly remote: FieldRef<"Job", 'Boolean'>
    readonly type: FieldRef<"Job", 'JobType'>
    readonly level: FieldRef<"Job", 'JobLevel'>
    readonly salaryMin: FieldRef<"Job", 'Float'>
    readonly salaryMax: FieldRef<"Job", 'Float'>
    readonly currency: FieldRef<"Job", 'String'>
    readonly status: FieldRef<"Job", 'JobStatus'>
    readonly priority: FieldRef<"Job", 'Priority'>
    readonly startDate: FieldRef<"Job", 'DateTime'>
    readonly endDate: FieldRef<"Job", 'DateTime'>
    readonly deadline: FieldRef<"Job", 'DateTime'>
    readonly companyId: FieldRef<"Job", 'String'>
    readonly recruiterId: FieldRef<"Job", 'String'>
    readonly jobDescriptionUrl: FieldRef<"Job", 'String'>
    readonly aiGenerated: FieldRef<"Job", 'Boolean'>
    readonly aiPrompt: FieldRef<"Job", 'String'>
    readonly createdAt: FieldRef<"Job", 'DateTime'>
    readonly updatedAt: FieldRef<"Job", 'DateTime'>
    readonly organizationId: FieldRef<"Job", 'String'>
    readonly applicationInfo: FieldRef<"Job", 'Json'>
    readonly benefits: FieldRef<"Job", 'Json'>
    readonly metadata: FieldRef<"Job", 'Json'>
    readonly requirementsDetailed: FieldRef<"Job", 'Json'>
    readonly responsibilities: FieldRef<"Job", 'Json'>
    readonly jobInfo: FieldRef<"Job", 'Json'>
    readonly embedding: FieldRef<"Job", 'String'>
    readonly embeddingAt: FieldRef<"Job", 'DateTime'>
    readonly embeddingModel: FieldRef<"Job", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findUniqueOrThrow
   */
  export type JobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findFirst
   */
  export type JobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findFirstOrThrow
   */
  export type JobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findMany
   */
  export type JobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Jobs to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job create
   */
  export type JobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to create a Job.
     */
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }

  /**
   * Job createMany
   */
  export type JobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job createManyAndReturn
   */
  export type JobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Job update
   */
  export type JobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to update a Job.
     */
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to update.
     */
    limit?: number
  }

  /**
   * Job updateManyAndReturn
   */
  export type JobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Job upsert
   */
  export type JobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The filter to search for the Job to update in case it exists.
     */
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     */
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }

  /**
   * Job delete
   */
  export type JobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter which Job to delete.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jobs to delete
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to delete.
     */
    limit?: number
  }

  /**
   * Job.activities
   */
  export type Job$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Job.interviews
   */
  export type Job$interviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    where?: InterviewWhereInput
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    cursor?: InterviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * Job.applications
   */
  export type Job$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    where?: JobApplicationWhereInput
    orderBy?: JobApplicationOrderByWithRelationInput | JobApplicationOrderByWithRelationInput[]
    cursor?: JobApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobApplicationScalarFieldEnum | JobApplicationScalarFieldEnum[]
  }

  /**
   * Job.matchingResults
   */
  export type Job$matchingResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingResult
     */
    select?: MatchingResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchingResult
     */
    omit?: MatchingResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingResultInclude<ExtArgs> | null
    where?: MatchingResultWhereInput
    orderBy?: MatchingResultOrderByWithRelationInput | MatchingResultOrderByWithRelationInput[]
    cursor?: MatchingResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchingResultScalarFieldEnum | MatchingResultScalarFieldEnum[]
  }

  /**
   * Job without action
   */
  export type JobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
  }


  /**
   * Model JobApplication
   */

  export type AggregateJobApplication = {
    _count: JobApplicationCountAggregateOutputType | null
    _avg: JobApplicationAvgAggregateOutputType | null
    _sum: JobApplicationSumAggregateOutputType | null
    _min: JobApplicationMinAggregateOutputType | null
    _max: JobApplicationMaxAggregateOutputType | null
  }

  export type JobApplicationAvgAggregateOutputType = {
    rating: number | null
    fitScore: number | null
  }

  export type JobApplicationSumAggregateOutputType = {
    rating: number | null
    fitScore: number | null
  }

  export type JobApplicationMinAggregateOutputType = {
    id: string | null
    status: $Enums.ApplicationStatus | null
    appliedAt: Date | null
    coverLetter: string | null
    notes: string | null
    rating: number | null
    fitScore: number | null
    candidateId: string | null
    jobId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobApplicationMaxAggregateOutputType = {
    id: string | null
    status: $Enums.ApplicationStatus | null
    appliedAt: Date | null
    coverLetter: string | null
    notes: string | null
    rating: number | null
    fitScore: number | null
    candidateId: string | null
    jobId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobApplicationCountAggregateOutputType = {
    id: number
    status: number
    appliedAt: number
    coverLetter: number
    notes: number
    rating: number
    fitScore: number
    candidateId: number
    jobId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobApplicationAvgAggregateInputType = {
    rating?: true
    fitScore?: true
  }

  export type JobApplicationSumAggregateInputType = {
    rating?: true
    fitScore?: true
  }

  export type JobApplicationMinAggregateInputType = {
    id?: true
    status?: true
    appliedAt?: true
    coverLetter?: true
    notes?: true
    rating?: true
    fitScore?: true
    candidateId?: true
    jobId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobApplicationMaxAggregateInputType = {
    id?: true
    status?: true
    appliedAt?: true
    coverLetter?: true
    notes?: true
    rating?: true
    fitScore?: true
    candidateId?: true
    jobId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobApplicationCountAggregateInputType = {
    id?: true
    status?: true
    appliedAt?: true
    coverLetter?: true
    notes?: true
    rating?: true
    fitScore?: true
    candidateId?: true
    jobId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobApplication to aggregate.
     */
    where?: JobApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobApplications to fetch.
     */
    orderBy?: JobApplicationOrderByWithRelationInput | JobApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobApplications
    **/
    _count?: true | JobApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobApplicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobApplicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobApplicationMaxAggregateInputType
  }

  export type GetJobApplicationAggregateType<T extends JobApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateJobApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobApplication[P]>
      : GetScalarType<T[P], AggregateJobApplication[P]>
  }




  export type JobApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobApplicationWhereInput
    orderBy?: JobApplicationOrderByWithAggregationInput | JobApplicationOrderByWithAggregationInput[]
    by: JobApplicationScalarFieldEnum[] | JobApplicationScalarFieldEnum
    having?: JobApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobApplicationCountAggregateInputType | true
    _avg?: JobApplicationAvgAggregateInputType
    _sum?: JobApplicationSumAggregateInputType
    _min?: JobApplicationMinAggregateInputType
    _max?: JobApplicationMaxAggregateInputType
  }

  export type JobApplicationGroupByOutputType = {
    id: string
    status: $Enums.ApplicationStatus
    appliedAt: Date
    coverLetter: string | null
    notes: string | null
    rating: number | null
    fitScore: number | null
    candidateId: string
    jobId: string
    createdAt: Date
    updatedAt: Date
    _count: JobApplicationCountAggregateOutputType | null
    _avg: JobApplicationAvgAggregateOutputType | null
    _sum: JobApplicationSumAggregateOutputType | null
    _min: JobApplicationMinAggregateOutputType | null
    _max: JobApplicationMaxAggregateOutputType | null
  }

  type GetJobApplicationGroupByPayload<T extends JobApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], JobApplicationGroupByOutputType[P]>
        }
      >
    >


  export type JobApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    appliedAt?: boolean
    coverLetter?: boolean
    notes?: boolean
    rating?: boolean
    fitScore?: boolean
    candidateId?: boolean
    jobId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activities?: boolean | JobApplication$activitiesArgs<ExtArgs>
    interviews?: boolean | JobApplication$interviewsArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
    _count?: boolean | JobApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobApplication"]>

  export type JobApplicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    appliedAt?: boolean
    coverLetter?: boolean
    notes?: boolean
    rating?: boolean
    fitScore?: boolean
    candidateId?: boolean
    jobId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobApplication"]>

  export type JobApplicationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    appliedAt?: boolean
    coverLetter?: boolean
    notes?: boolean
    rating?: boolean
    fitScore?: boolean
    candidateId?: boolean
    jobId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobApplication"]>

  export type JobApplicationSelectScalar = {
    id?: boolean
    status?: boolean
    appliedAt?: boolean
    coverLetter?: boolean
    notes?: boolean
    rating?: boolean
    fitScore?: boolean
    candidateId?: boolean
    jobId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobApplicationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "status" | "appliedAt" | "coverLetter" | "notes" | "rating" | "fitScore" | "candidateId" | "jobId" | "createdAt" | "updatedAt", ExtArgs["result"]["jobApplication"]>
  export type JobApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | JobApplication$activitiesArgs<ExtArgs>
    interviews?: boolean | JobApplication$interviewsArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
    _count?: boolean | JobApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobApplicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type JobApplicationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $JobApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobApplication"
    objects: {
      activities: Prisma.$ActivityPayload<ExtArgs>[]
      interviews: Prisma.$InterviewPayload<ExtArgs>[]
      candidate: Prisma.$CandidatePayload<ExtArgs>
      job: Prisma.$JobPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: $Enums.ApplicationStatus
      appliedAt: Date
      coverLetter: string | null
      notes: string | null
      rating: number | null
      fitScore: number | null
      candidateId: string
      jobId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["jobApplication"]>
    composites: {}
  }

  type JobApplicationGetPayload<S extends boolean | null | undefined | JobApplicationDefaultArgs> = $Result.GetResult<Prisma.$JobApplicationPayload, S>

  type JobApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobApplicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobApplicationCountAggregateInputType | true
    }

  export interface JobApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobApplication'], meta: { name: 'JobApplication' } }
    /**
     * Find zero or one JobApplication that matches the filter.
     * @param {JobApplicationFindUniqueArgs} args - Arguments to find a JobApplication
     * @example
     * // Get one JobApplication
     * const jobApplication = await prisma.jobApplication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobApplicationFindUniqueArgs>(args: SelectSubset<T, JobApplicationFindUniqueArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobApplication that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobApplicationFindUniqueOrThrowArgs} args - Arguments to find a JobApplication
     * @example
     * // Get one JobApplication
     * const jobApplication = await prisma.jobApplication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobApplicationFindUniqueOrThrowArgs>(args: SelectSubset<T, JobApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobApplication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobApplicationFindFirstArgs} args - Arguments to find a JobApplication
     * @example
     * // Get one JobApplication
     * const jobApplication = await prisma.jobApplication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobApplicationFindFirstArgs>(args?: SelectSubset<T, JobApplicationFindFirstArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobApplication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobApplicationFindFirstOrThrowArgs} args - Arguments to find a JobApplication
     * @example
     * // Get one JobApplication
     * const jobApplication = await prisma.jobApplication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobApplicationFindFirstOrThrowArgs>(args?: SelectSubset<T, JobApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobApplications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobApplications
     * const jobApplications = await prisma.jobApplication.findMany()
     * 
     * // Get first 10 JobApplications
     * const jobApplications = await prisma.jobApplication.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobApplicationWithIdOnly = await prisma.jobApplication.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobApplicationFindManyArgs>(args?: SelectSubset<T, JobApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobApplication.
     * @param {JobApplicationCreateArgs} args - Arguments to create a JobApplication.
     * @example
     * // Create one JobApplication
     * const JobApplication = await prisma.jobApplication.create({
     *   data: {
     *     // ... data to create a JobApplication
     *   }
     * })
     * 
     */
    create<T extends JobApplicationCreateArgs>(args: SelectSubset<T, JobApplicationCreateArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobApplications.
     * @param {JobApplicationCreateManyArgs} args - Arguments to create many JobApplications.
     * @example
     * // Create many JobApplications
     * const jobApplication = await prisma.jobApplication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobApplicationCreateManyArgs>(args?: SelectSubset<T, JobApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobApplications and returns the data saved in the database.
     * @param {JobApplicationCreateManyAndReturnArgs} args - Arguments to create many JobApplications.
     * @example
     * // Create many JobApplications
     * const jobApplication = await prisma.jobApplication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobApplications and only return the `id`
     * const jobApplicationWithIdOnly = await prisma.jobApplication.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobApplicationCreateManyAndReturnArgs>(args?: SelectSubset<T, JobApplicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobApplication.
     * @param {JobApplicationDeleteArgs} args - Arguments to delete one JobApplication.
     * @example
     * // Delete one JobApplication
     * const JobApplication = await prisma.jobApplication.delete({
     *   where: {
     *     // ... filter to delete one JobApplication
     *   }
     * })
     * 
     */
    delete<T extends JobApplicationDeleteArgs>(args: SelectSubset<T, JobApplicationDeleteArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobApplication.
     * @param {JobApplicationUpdateArgs} args - Arguments to update one JobApplication.
     * @example
     * // Update one JobApplication
     * const jobApplication = await prisma.jobApplication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobApplicationUpdateArgs>(args: SelectSubset<T, JobApplicationUpdateArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobApplications.
     * @param {JobApplicationDeleteManyArgs} args - Arguments to filter JobApplications to delete.
     * @example
     * // Delete a few JobApplications
     * const { count } = await prisma.jobApplication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobApplicationDeleteManyArgs>(args?: SelectSubset<T, JobApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobApplications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobApplications
     * const jobApplication = await prisma.jobApplication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobApplicationUpdateManyArgs>(args: SelectSubset<T, JobApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobApplications and returns the data updated in the database.
     * @param {JobApplicationUpdateManyAndReturnArgs} args - Arguments to update many JobApplications.
     * @example
     * // Update many JobApplications
     * const jobApplication = await prisma.jobApplication.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobApplications and only return the `id`
     * const jobApplicationWithIdOnly = await prisma.jobApplication.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobApplicationUpdateManyAndReturnArgs>(args: SelectSubset<T, JobApplicationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobApplication.
     * @param {JobApplicationUpsertArgs} args - Arguments to update or create a JobApplication.
     * @example
     * // Update or create a JobApplication
     * const jobApplication = await prisma.jobApplication.upsert({
     *   create: {
     *     // ... data to create a JobApplication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobApplication we want to update
     *   }
     * })
     */
    upsert<T extends JobApplicationUpsertArgs>(args: SelectSubset<T, JobApplicationUpsertArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobApplications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobApplicationCountArgs} args - Arguments to filter JobApplications to count.
     * @example
     * // Count the number of JobApplications
     * const count = await prisma.jobApplication.count({
     *   where: {
     *     // ... the filter for the JobApplications we want to count
     *   }
     * })
    **/
    count<T extends JobApplicationCountArgs>(
      args?: Subset<T, JobApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobApplication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobApplicationAggregateArgs>(args: Subset<T, JobApplicationAggregateArgs>): Prisma.PrismaPromise<GetJobApplicationAggregateType<T>>

    /**
     * Group by JobApplication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobApplicationGroupByArgs['orderBy'] }
        : { orderBy?: JobApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobApplication model
   */
  readonly fields: JobApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobApplication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activities<T extends JobApplication$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, JobApplication$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    interviews<T extends JobApplication$interviewsArgs<ExtArgs> = {}>(args?: Subset<T, JobApplication$interviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobApplication model
   */
  interface JobApplicationFieldRefs {
    readonly id: FieldRef<"JobApplication", 'String'>
    readonly status: FieldRef<"JobApplication", 'ApplicationStatus'>
    readonly appliedAt: FieldRef<"JobApplication", 'DateTime'>
    readonly coverLetter: FieldRef<"JobApplication", 'String'>
    readonly notes: FieldRef<"JobApplication", 'String'>
    readonly rating: FieldRef<"JobApplication", 'Float'>
    readonly fitScore: FieldRef<"JobApplication", 'Float'>
    readonly candidateId: FieldRef<"JobApplication", 'String'>
    readonly jobId: FieldRef<"JobApplication", 'String'>
    readonly createdAt: FieldRef<"JobApplication", 'DateTime'>
    readonly updatedAt: FieldRef<"JobApplication", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobApplication findUnique
   */
  export type JobApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * Filter, which JobApplication to fetch.
     */
    where: JobApplicationWhereUniqueInput
  }

  /**
   * JobApplication findUniqueOrThrow
   */
  export type JobApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * Filter, which JobApplication to fetch.
     */
    where: JobApplicationWhereUniqueInput
  }

  /**
   * JobApplication findFirst
   */
  export type JobApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * Filter, which JobApplication to fetch.
     */
    where?: JobApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobApplications to fetch.
     */
    orderBy?: JobApplicationOrderByWithRelationInput | JobApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobApplications.
     */
    cursor?: JobApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobApplications.
     */
    distinct?: JobApplicationScalarFieldEnum | JobApplicationScalarFieldEnum[]
  }

  /**
   * JobApplication findFirstOrThrow
   */
  export type JobApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * Filter, which JobApplication to fetch.
     */
    where?: JobApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobApplications to fetch.
     */
    orderBy?: JobApplicationOrderByWithRelationInput | JobApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobApplications.
     */
    cursor?: JobApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobApplications.
     */
    distinct?: JobApplicationScalarFieldEnum | JobApplicationScalarFieldEnum[]
  }

  /**
   * JobApplication findMany
   */
  export type JobApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * Filter, which JobApplications to fetch.
     */
    where?: JobApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobApplications to fetch.
     */
    orderBy?: JobApplicationOrderByWithRelationInput | JobApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobApplications.
     */
    cursor?: JobApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobApplications.
     */
    skip?: number
    distinct?: JobApplicationScalarFieldEnum | JobApplicationScalarFieldEnum[]
  }

  /**
   * JobApplication create
   */
  export type JobApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a JobApplication.
     */
    data: XOR<JobApplicationCreateInput, JobApplicationUncheckedCreateInput>
  }

  /**
   * JobApplication createMany
   */
  export type JobApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobApplications.
     */
    data: JobApplicationCreateManyInput | JobApplicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobApplication createManyAndReturn
   */
  export type JobApplicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * The data used to create many JobApplications.
     */
    data: JobApplicationCreateManyInput | JobApplicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobApplication update
   */
  export type JobApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a JobApplication.
     */
    data: XOR<JobApplicationUpdateInput, JobApplicationUncheckedUpdateInput>
    /**
     * Choose, which JobApplication to update.
     */
    where: JobApplicationWhereUniqueInput
  }

  /**
   * JobApplication updateMany
   */
  export type JobApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobApplications.
     */
    data: XOR<JobApplicationUpdateManyMutationInput, JobApplicationUncheckedUpdateManyInput>
    /**
     * Filter which JobApplications to update
     */
    where?: JobApplicationWhereInput
    /**
     * Limit how many JobApplications to update.
     */
    limit?: number
  }

  /**
   * JobApplication updateManyAndReturn
   */
  export type JobApplicationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * The data used to update JobApplications.
     */
    data: XOR<JobApplicationUpdateManyMutationInput, JobApplicationUncheckedUpdateManyInput>
    /**
     * Filter which JobApplications to update
     */
    where?: JobApplicationWhereInput
    /**
     * Limit how many JobApplications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobApplication upsert
   */
  export type JobApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the JobApplication to update in case it exists.
     */
    where: JobApplicationWhereUniqueInput
    /**
     * In case the JobApplication found by the `where` argument doesn't exist, create a new JobApplication with this data.
     */
    create: XOR<JobApplicationCreateInput, JobApplicationUncheckedCreateInput>
    /**
     * In case the JobApplication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobApplicationUpdateInput, JobApplicationUncheckedUpdateInput>
  }

  /**
   * JobApplication delete
   */
  export type JobApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    /**
     * Filter which JobApplication to delete.
     */
    where: JobApplicationWhereUniqueInput
  }

  /**
   * JobApplication deleteMany
   */
  export type JobApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobApplications to delete
     */
    where?: JobApplicationWhereInput
    /**
     * Limit how many JobApplications to delete.
     */
    limit?: number
  }

  /**
   * JobApplication.activities
   */
  export type JobApplication$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * JobApplication.interviews
   */
  export type JobApplication$interviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    where?: InterviewWhereInput
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    cursor?: InterviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * JobApplication without action
   */
  export type JobApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
  }


  /**
   * Model MatchingResult
   */

  export type AggregateMatchingResult = {
    _count: MatchingResultCountAggregateOutputType | null
    _avg: MatchingResultAvgAggregateOutputType | null
    _sum: MatchingResultSumAggregateOutputType | null
    _min: MatchingResultMinAggregateOutputType | null
    _max: MatchingResultMaxAggregateOutputType | null
  }

  export type MatchingResultAvgAggregateOutputType = {
    score: number | null
    embeddingSimilarity: number | null
  }

  export type MatchingResultSumAggregateOutputType = {
    score: number | null
    embeddingSimilarity: number | null
  }

  export type MatchingResultMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    candidateId: string | null
    score: number | null
    embeddingSimilarity: number | null
    calculatedAt: Date | null
    expiresAt: Date | null
    organizationId: string | null
  }

  export type MatchingResultMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    candidateId: string | null
    score: number | null
    embeddingSimilarity: number | null
    calculatedAt: Date | null
    expiresAt: Date | null
    organizationId: string | null
  }

  export type MatchingResultCountAggregateOutputType = {
    id: number
    jobId: number
    candidateId: number
    score: number
    embeddingSimilarity: number
    skillMatches: number
    aiAnalysis: number
    calculatedAt: number
    expiresAt: number
    organizationId: number
    _all: number
  }


  export type MatchingResultAvgAggregateInputType = {
    score?: true
    embeddingSimilarity?: true
  }

  export type MatchingResultSumAggregateInputType = {
    score?: true
    embeddingSimilarity?: true
  }

  export type MatchingResultMinAggregateInputType = {
    id?: true
    jobId?: true
    candidateId?: true
    score?: true
    embeddingSimilarity?: true
    calculatedAt?: true
    expiresAt?: true
    organizationId?: true
  }

  export type MatchingResultMaxAggregateInputType = {
    id?: true
    jobId?: true
    candidateId?: true
    score?: true
    embeddingSimilarity?: true
    calculatedAt?: true
    expiresAt?: true
    organizationId?: true
  }

  export type MatchingResultCountAggregateInputType = {
    id?: true
    jobId?: true
    candidateId?: true
    score?: true
    embeddingSimilarity?: true
    skillMatches?: true
    aiAnalysis?: true
    calculatedAt?: true
    expiresAt?: true
    organizationId?: true
    _all?: true
  }

  export type MatchingResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchingResult to aggregate.
     */
    where?: MatchingResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchingResults to fetch.
     */
    orderBy?: MatchingResultOrderByWithRelationInput | MatchingResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchingResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchingResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchingResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchingResults
    **/
    _count?: true | MatchingResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchingResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchingResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchingResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchingResultMaxAggregateInputType
  }

  export type GetMatchingResultAggregateType<T extends MatchingResultAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchingResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchingResult[P]>
      : GetScalarType<T[P], AggregateMatchingResult[P]>
  }




  export type MatchingResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchingResultWhereInput
    orderBy?: MatchingResultOrderByWithAggregationInput | MatchingResultOrderByWithAggregationInput[]
    by: MatchingResultScalarFieldEnum[] | MatchingResultScalarFieldEnum
    having?: MatchingResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchingResultCountAggregateInputType | true
    _avg?: MatchingResultAvgAggregateInputType
    _sum?: MatchingResultSumAggregateInputType
    _min?: MatchingResultMinAggregateInputType
    _max?: MatchingResultMaxAggregateInputType
  }

  export type MatchingResultGroupByOutputType = {
    id: string
    jobId: string
    candidateId: string
    score: number
    embeddingSimilarity: number
    skillMatches: JsonValue
    aiAnalysis: JsonValue | null
    calculatedAt: Date
    expiresAt: Date
    organizationId: string
    _count: MatchingResultCountAggregateOutputType | null
    _avg: MatchingResultAvgAggregateOutputType | null
    _sum: MatchingResultSumAggregateOutputType | null
    _min: MatchingResultMinAggregateOutputType | null
    _max: MatchingResultMaxAggregateOutputType | null
  }

  type GetMatchingResultGroupByPayload<T extends MatchingResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchingResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchingResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchingResultGroupByOutputType[P]>
            : GetScalarType<T[P], MatchingResultGroupByOutputType[P]>
        }
      >
    >


  export type MatchingResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    score?: boolean
    embeddingSimilarity?: boolean
    skillMatches?: boolean
    aiAnalysis?: boolean
    calculatedAt?: boolean
    expiresAt?: boolean
    organizationId?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchingResult"]>

  export type MatchingResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    score?: boolean
    embeddingSimilarity?: boolean
    skillMatches?: boolean
    aiAnalysis?: boolean
    calculatedAt?: boolean
    expiresAt?: boolean
    organizationId?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchingResult"]>

  export type MatchingResultSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    score?: boolean
    embeddingSimilarity?: boolean
    skillMatches?: boolean
    aiAnalysis?: boolean
    calculatedAt?: boolean
    expiresAt?: boolean
    organizationId?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchingResult"]>

  export type MatchingResultSelectScalar = {
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    score?: boolean
    embeddingSimilarity?: boolean
    skillMatches?: boolean
    aiAnalysis?: boolean
    calculatedAt?: boolean
    expiresAt?: boolean
    organizationId?: boolean
  }

  export type MatchingResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "candidateId" | "score" | "embeddingSimilarity" | "skillMatches" | "aiAnalysis" | "calculatedAt" | "expiresAt" | "organizationId", ExtArgs["result"]["matchingResult"]>
  export type MatchingResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type MatchingResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type MatchingResultIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $MatchingResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MatchingResult"
    objects: {
      candidate: Prisma.$CandidatePayload<ExtArgs>
      job: Prisma.$JobPayload<ExtArgs>
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      candidateId: string
      score: number
      embeddingSimilarity: number
      skillMatches: Prisma.JsonValue
      aiAnalysis: Prisma.JsonValue | null
      calculatedAt: Date
      expiresAt: Date
      organizationId: string
    }, ExtArgs["result"]["matchingResult"]>
    composites: {}
  }

  type MatchingResultGetPayload<S extends boolean | null | undefined | MatchingResultDefaultArgs> = $Result.GetResult<Prisma.$MatchingResultPayload, S>

  type MatchingResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MatchingResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MatchingResultCountAggregateInputType | true
    }

  export interface MatchingResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MatchingResult'], meta: { name: 'MatchingResult' } }
    /**
     * Find zero or one MatchingResult that matches the filter.
     * @param {MatchingResultFindUniqueArgs} args - Arguments to find a MatchingResult
     * @example
     * // Get one MatchingResult
     * const matchingResult = await prisma.matchingResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchingResultFindUniqueArgs>(args: SelectSubset<T, MatchingResultFindUniqueArgs<ExtArgs>>): Prisma__MatchingResultClient<$Result.GetResult<Prisma.$MatchingResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MatchingResult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MatchingResultFindUniqueOrThrowArgs} args - Arguments to find a MatchingResult
     * @example
     * // Get one MatchingResult
     * const matchingResult = await prisma.matchingResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchingResultFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchingResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchingResultClient<$Result.GetResult<Prisma.$MatchingResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MatchingResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchingResultFindFirstArgs} args - Arguments to find a MatchingResult
     * @example
     * // Get one MatchingResult
     * const matchingResult = await prisma.matchingResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchingResultFindFirstArgs>(args?: SelectSubset<T, MatchingResultFindFirstArgs<ExtArgs>>): Prisma__MatchingResultClient<$Result.GetResult<Prisma.$MatchingResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MatchingResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchingResultFindFirstOrThrowArgs} args - Arguments to find a MatchingResult
     * @example
     * // Get one MatchingResult
     * const matchingResult = await prisma.matchingResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchingResultFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchingResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchingResultClient<$Result.GetResult<Prisma.$MatchingResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MatchingResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchingResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchingResults
     * const matchingResults = await prisma.matchingResult.findMany()
     * 
     * // Get first 10 MatchingResults
     * const matchingResults = await prisma.matchingResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchingResultWithIdOnly = await prisma.matchingResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchingResultFindManyArgs>(args?: SelectSubset<T, MatchingResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchingResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MatchingResult.
     * @param {MatchingResultCreateArgs} args - Arguments to create a MatchingResult.
     * @example
     * // Create one MatchingResult
     * const MatchingResult = await prisma.matchingResult.create({
     *   data: {
     *     // ... data to create a MatchingResult
     *   }
     * })
     * 
     */
    create<T extends MatchingResultCreateArgs>(args: SelectSubset<T, MatchingResultCreateArgs<ExtArgs>>): Prisma__MatchingResultClient<$Result.GetResult<Prisma.$MatchingResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MatchingResults.
     * @param {MatchingResultCreateManyArgs} args - Arguments to create many MatchingResults.
     * @example
     * // Create many MatchingResults
     * const matchingResult = await prisma.matchingResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchingResultCreateManyArgs>(args?: SelectSubset<T, MatchingResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MatchingResults and returns the data saved in the database.
     * @param {MatchingResultCreateManyAndReturnArgs} args - Arguments to create many MatchingResults.
     * @example
     * // Create many MatchingResults
     * const matchingResult = await prisma.matchingResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MatchingResults and only return the `id`
     * const matchingResultWithIdOnly = await prisma.matchingResult.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchingResultCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchingResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchingResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MatchingResult.
     * @param {MatchingResultDeleteArgs} args - Arguments to delete one MatchingResult.
     * @example
     * // Delete one MatchingResult
     * const MatchingResult = await prisma.matchingResult.delete({
     *   where: {
     *     // ... filter to delete one MatchingResult
     *   }
     * })
     * 
     */
    delete<T extends MatchingResultDeleteArgs>(args: SelectSubset<T, MatchingResultDeleteArgs<ExtArgs>>): Prisma__MatchingResultClient<$Result.GetResult<Prisma.$MatchingResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MatchingResult.
     * @param {MatchingResultUpdateArgs} args - Arguments to update one MatchingResult.
     * @example
     * // Update one MatchingResult
     * const matchingResult = await prisma.matchingResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchingResultUpdateArgs>(args: SelectSubset<T, MatchingResultUpdateArgs<ExtArgs>>): Prisma__MatchingResultClient<$Result.GetResult<Prisma.$MatchingResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MatchingResults.
     * @param {MatchingResultDeleteManyArgs} args - Arguments to filter MatchingResults to delete.
     * @example
     * // Delete a few MatchingResults
     * const { count } = await prisma.matchingResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchingResultDeleteManyArgs>(args?: SelectSubset<T, MatchingResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchingResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchingResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchingResults
     * const matchingResult = await prisma.matchingResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchingResultUpdateManyArgs>(args: SelectSubset<T, MatchingResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchingResults and returns the data updated in the database.
     * @param {MatchingResultUpdateManyAndReturnArgs} args - Arguments to update many MatchingResults.
     * @example
     * // Update many MatchingResults
     * const matchingResult = await prisma.matchingResult.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MatchingResults and only return the `id`
     * const matchingResultWithIdOnly = await prisma.matchingResult.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MatchingResultUpdateManyAndReturnArgs>(args: SelectSubset<T, MatchingResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchingResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MatchingResult.
     * @param {MatchingResultUpsertArgs} args - Arguments to update or create a MatchingResult.
     * @example
     * // Update or create a MatchingResult
     * const matchingResult = await prisma.matchingResult.upsert({
     *   create: {
     *     // ... data to create a MatchingResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchingResult we want to update
     *   }
     * })
     */
    upsert<T extends MatchingResultUpsertArgs>(args: SelectSubset<T, MatchingResultUpsertArgs<ExtArgs>>): Prisma__MatchingResultClient<$Result.GetResult<Prisma.$MatchingResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MatchingResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchingResultCountArgs} args - Arguments to filter MatchingResults to count.
     * @example
     * // Count the number of MatchingResults
     * const count = await prisma.matchingResult.count({
     *   where: {
     *     // ... the filter for the MatchingResults we want to count
     *   }
     * })
    **/
    count<T extends MatchingResultCountArgs>(
      args?: Subset<T, MatchingResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchingResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchingResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchingResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchingResultAggregateArgs>(args: Subset<T, MatchingResultAggregateArgs>): Prisma.PrismaPromise<GetMatchingResultAggregateType<T>>

    /**
     * Group by MatchingResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchingResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchingResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchingResultGroupByArgs['orderBy'] }
        : { orderBy?: MatchingResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchingResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchingResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MatchingResult model
   */
  readonly fields: MatchingResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchingResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchingResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MatchingResult model
   */
  interface MatchingResultFieldRefs {
    readonly id: FieldRef<"MatchingResult", 'String'>
    readonly jobId: FieldRef<"MatchingResult", 'String'>
    readonly candidateId: FieldRef<"MatchingResult", 'String'>
    readonly score: FieldRef<"MatchingResult", 'Float'>
    readonly embeddingSimilarity: FieldRef<"MatchingResult", 'Float'>
    readonly skillMatches: FieldRef<"MatchingResult", 'Json'>
    readonly aiAnalysis: FieldRef<"MatchingResult", 'Json'>
    readonly calculatedAt: FieldRef<"MatchingResult", 'DateTime'>
    readonly expiresAt: FieldRef<"MatchingResult", 'DateTime'>
    readonly organizationId: FieldRef<"MatchingResult", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MatchingResult findUnique
   */
  export type MatchingResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingResult
     */
    select?: MatchingResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchingResult
     */
    omit?: MatchingResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingResultInclude<ExtArgs> | null
    /**
     * Filter, which MatchingResult to fetch.
     */
    where: MatchingResultWhereUniqueInput
  }

  /**
   * MatchingResult findUniqueOrThrow
   */
  export type MatchingResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingResult
     */
    select?: MatchingResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchingResult
     */
    omit?: MatchingResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingResultInclude<ExtArgs> | null
    /**
     * Filter, which MatchingResult to fetch.
     */
    where: MatchingResultWhereUniqueInput
  }

  /**
   * MatchingResult findFirst
   */
  export type MatchingResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingResult
     */
    select?: MatchingResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchingResult
     */
    omit?: MatchingResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingResultInclude<ExtArgs> | null
    /**
     * Filter, which MatchingResult to fetch.
     */
    where?: MatchingResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchingResults to fetch.
     */
    orderBy?: MatchingResultOrderByWithRelationInput | MatchingResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchingResults.
     */
    cursor?: MatchingResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchingResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchingResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchingResults.
     */
    distinct?: MatchingResultScalarFieldEnum | MatchingResultScalarFieldEnum[]
  }

  /**
   * MatchingResult findFirstOrThrow
   */
  export type MatchingResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingResult
     */
    select?: MatchingResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchingResult
     */
    omit?: MatchingResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingResultInclude<ExtArgs> | null
    /**
     * Filter, which MatchingResult to fetch.
     */
    where?: MatchingResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchingResults to fetch.
     */
    orderBy?: MatchingResultOrderByWithRelationInput | MatchingResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchingResults.
     */
    cursor?: MatchingResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchingResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchingResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchingResults.
     */
    distinct?: MatchingResultScalarFieldEnum | MatchingResultScalarFieldEnum[]
  }

  /**
   * MatchingResult findMany
   */
  export type MatchingResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingResult
     */
    select?: MatchingResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchingResult
     */
    omit?: MatchingResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingResultInclude<ExtArgs> | null
    /**
     * Filter, which MatchingResults to fetch.
     */
    where?: MatchingResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchingResults to fetch.
     */
    orderBy?: MatchingResultOrderByWithRelationInput | MatchingResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchingResults.
     */
    cursor?: MatchingResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchingResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchingResults.
     */
    skip?: number
    distinct?: MatchingResultScalarFieldEnum | MatchingResultScalarFieldEnum[]
  }

  /**
   * MatchingResult create
   */
  export type MatchingResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingResult
     */
    select?: MatchingResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchingResult
     */
    omit?: MatchingResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingResultInclude<ExtArgs> | null
    /**
     * The data needed to create a MatchingResult.
     */
    data: XOR<MatchingResultCreateInput, MatchingResultUncheckedCreateInput>
  }

  /**
   * MatchingResult createMany
   */
  export type MatchingResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MatchingResults.
     */
    data: MatchingResultCreateManyInput | MatchingResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MatchingResult createManyAndReturn
   */
  export type MatchingResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingResult
     */
    select?: MatchingResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MatchingResult
     */
    omit?: MatchingResultOmit<ExtArgs> | null
    /**
     * The data used to create many MatchingResults.
     */
    data: MatchingResultCreateManyInput | MatchingResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchingResult update
   */
  export type MatchingResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingResult
     */
    select?: MatchingResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchingResult
     */
    omit?: MatchingResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingResultInclude<ExtArgs> | null
    /**
     * The data needed to update a MatchingResult.
     */
    data: XOR<MatchingResultUpdateInput, MatchingResultUncheckedUpdateInput>
    /**
     * Choose, which MatchingResult to update.
     */
    where: MatchingResultWhereUniqueInput
  }

  /**
   * MatchingResult updateMany
   */
  export type MatchingResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MatchingResults.
     */
    data: XOR<MatchingResultUpdateManyMutationInput, MatchingResultUncheckedUpdateManyInput>
    /**
     * Filter which MatchingResults to update
     */
    where?: MatchingResultWhereInput
    /**
     * Limit how many MatchingResults to update.
     */
    limit?: number
  }

  /**
   * MatchingResult updateManyAndReturn
   */
  export type MatchingResultUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingResult
     */
    select?: MatchingResultSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MatchingResult
     */
    omit?: MatchingResultOmit<ExtArgs> | null
    /**
     * The data used to update MatchingResults.
     */
    data: XOR<MatchingResultUpdateManyMutationInput, MatchingResultUncheckedUpdateManyInput>
    /**
     * Filter which MatchingResults to update
     */
    where?: MatchingResultWhereInput
    /**
     * Limit how many MatchingResults to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingResultIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchingResult upsert
   */
  export type MatchingResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingResult
     */
    select?: MatchingResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchingResult
     */
    omit?: MatchingResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingResultInclude<ExtArgs> | null
    /**
     * The filter to search for the MatchingResult to update in case it exists.
     */
    where: MatchingResultWhereUniqueInput
    /**
     * In case the MatchingResult found by the `where` argument doesn't exist, create a new MatchingResult with this data.
     */
    create: XOR<MatchingResultCreateInput, MatchingResultUncheckedCreateInput>
    /**
     * In case the MatchingResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchingResultUpdateInput, MatchingResultUncheckedUpdateInput>
  }

  /**
   * MatchingResult delete
   */
  export type MatchingResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingResult
     */
    select?: MatchingResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchingResult
     */
    omit?: MatchingResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingResultInclude<ExtArgs> | null
    /**
     * Filter which MatchingResult to delete.
     */
    where: MatchingResultWhereUniqueInput
  }

  /**
   * MatchingResult deleteMany
   */
  export type MatchingResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchingResults to delete
     */
    where?: MatchingResultWhereInput
    /**
     * Limit how many MatchingResults to delete.
     */
    limit?: number
  }

  /**
   * MatchingResult without action
   */
  export type MatchingResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchingResult
     */
    select?: MatchingResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchingResult
     */
    omit?: MatchingResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchingResultInclude<ExtArgs> | null
  }


  /**
   * Model Interview
   */

  export type AggregateInterview = {
    _count: InterviewCountAggregateOutputType | null
    _avg: InterviewAvgAggregateOutputType | null
    _sum: InterviewSumAggregateOutputType | null
    _min: InterviewMinAggregateOutputType | null
    _max: InterviewMaxAggregateOutputType | null
  }

  export type InterviewAvgAggregateOutputType = {
    duration: number | null
    rating: number | null
  }

  export type InterviewSumAggregateOutputType = {
    duration: number | null
    rating: number | null
  }

  export type InterviewMinAggregateOutputType = {
    id: string | null
    title: string | null
    type: $Enums.InterviewType | null
    status: $Enums.InterviewStatus | null
    scheduledAt: Date | null
    duration: number | null
    timezone: string | null
    location: string | null
    notes: string | null
    feedback: string | null
    rating: number | null
    outcome: $Enums.InterviewOutcome | null
    candidateId: string | null
    jobId: string | null
    applicationId: string | null
    interviewerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InterviewMaxAggregateOutputType = {
    id: string | null
    title: string | null
    type: $Enums.InterviewType | null
    status: $Enums.InterviewStatus | null
    scheduledAt: Date | null
    duration: number | null
    timezone: string | null
    location: string | null
    notes: string | null
    feedback: string | null
    rating: number | null
    outcome: $Enums.InterviewOutcome | null
    candidateId: string | null
    jobId: string | null
    applicationId: string | null
    interviewerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InterviewCountAggregateOutputType = {
    id: number
    title: number
    type: number
    status: number
    scheduledAt: number
    duration: number
    timezone: number
    location: number
    notes: number
    feedback: number
    rating: number
    outcome: number
    candidateId: number
    jobId: number
    applicationId: number
    interviewerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InterviewAvgAggregateInputType = {
    duration?: true
    rating?: true
  }

  export type InterviewSumAggregateInputType = {
    duration?: true
    rating?: true
  }

  export type InterviewMinAggregateInputType = {
    id?: true
    title?: true
    type?: true
    status?: true
    scheduledAt?: true
    duration?: true
    timezone?: true
    location?: true
    notes?: true
    feedback?: true
    rating?: true
    outcome?: true
    candidateId?: true
    jobId?: true
    applicationId?: true
    interviewerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InterviewMaxAggregateInputType = {
    id?: true
    title?: true
    type?: true
    status?: true
    scheduledAt?: true
    duration?: true
    timezone?: true
    location?: true
    notes?: true
    feedback?: true
    rating?: true
    outcome?: true
    candidateId?: true
    jobId?: true
    applicationId?: true
    interviewerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InterviewCountAggregateInputType = {
    id?: true
    title?: true
    type?: true
    status?: true
    scheduledAt?: true
    duration?: true
    timezone?: true
    location?: true
    notes?: true
    feedback?: true
    rating?: true
    outcome?: true
    candidateId?: true
    jobId?: true
    applicationId?: true
    interviewerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InterviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interview to aggregate.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Interviews
    **/
    _count?: true | InterviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InterviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InterviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InterviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InterviewMaxAggregateInputType
  }

  export type GetInterviewAggregateType<T extends InterviewAggregateArgs> = {
        [P in keyof T & keyof AggregateInterview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInterview[P]>
      : GetScalarType<T[P], AggregateInterview[P]>
  }




  export type InterviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterviewWhereInput
    orderBy?: InterviewOrderByWithAggregationInput | InterviewOrderByWithAggregationInput[]
    by: InterviewScalarFieldEnum[] | InterviewScalarFieldEnum
    having?: InterviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InterviewCountAggregateInputType | true
    _avg?: InterviewAvgAggregateInputType
    _sum?: InterviewSumAggregateInputType
    _min?: InterviewMinAggregateInputType
    _max?: InterviewMaxAggregateInputType
  }

  export type InterviewGroupByOutputType = {
    id: string
    title: string
    type: $Enums.InterviewType
    status: $Enums.InterviewStatus
    scheduledAt: Date
    duration: number
    timezone: string | null
    location: string | null
    notes: string | null
    feedback: string | null
    rating: number | null
    outcome: $Enums.InterviewOutcome | null
    candidateId: string
    jobId: string
    applicationId: string | null
    interviewerId: string
    createdAt: Date
    updatedAt: Date
    _count: InterviewCountAggregateOutputType | null
    _avg: InterviewAvgAggregateOutputType | null
    _sum: InterviewSumAggregateOutputType | null
    _min: InterviewMinAggregateOutputType | null
    _max: InterviewMaxAggregateOutputType | null
  }

  type GetInterviewGroupByPayload<T extends InterviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InterviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InterviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InterviewGroupByOutputType[P]>
            : GetScalarType<T[P], InterviewGroupByOutputType[P]>
        }
      >
    >


  export type InterviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    type?: boolean
    status?: boolean
    scheduledAt?: boolean
    duration?: boolean
    timezone?: boolean
    location?: boolean
    notes?: boolean
    feedback?: boolean
    rating?: boolean
    outcome?: boolean
    candidateId?: boolean
    jobId?: boolean
    applicationId?: boolean
    interviewerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    application?: boolean | Interview$applicationArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    interviewer?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interview"]>

  export type InterviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    type?: boolean
    status?: boolean
    scheduledAt?: boolean
    duration?: boolean
    timezone?: boolean
    location?: boolean
    notes?: boolean
    feedback?: boolean
    rating?: boolean
    outcome?: boolean
    candidateId?: boolean
    jobId?: boolean
    applicationId?: boolean
    interviewerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    application?: boolean | Interview$applicationArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    interviewer?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interview"]>

  export type InterviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    type?: boolean
    status?: boolean
    scheduledAt?: boolean
    duration?: boolean
    timezone?: boolean
    location?: boolean
    notes?: boolean
    feedback?: boolean
    rating?: boolean
    outcome?: boolean
    candidateId?: boolean
    jobId?: boolean
    applicationId?: boolean
    interviewerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    application?: boolean | Interview$applicationArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    interviewer?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interview"]>

  export type InterviewSelectScalar = {
    id?: boolean
    title?: boolean
    type?: boolean
    status?: boolean
    scheduledAt?: boolean
    duration?: boolean
    timezone?: boolean
    location?: boolean
    notes?: boolean
    feedback?: boolean
    rating?: boolean
    outcome?: boolean
    candidateId?: boolean
    jobId?: boolean
    applicationId?: boolean
    interviewerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InterviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "type" | "status" | "scheduledAt" | "duration" | "timezone" | "location" | "notes" | "feedback" | "rating" | "outcome" | "candidateId" | "jobId" | "applicationId" | "interviewerId" | "createdAt" | "updatedAt", ExtArgs["result"]["interview"]>
  export type InterviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | Interview$applicationArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    interviewer?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type InterviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | Interview$applicationArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    interviewer?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type InterviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | Interview$applicationArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    interviewer?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $InterviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Interview"
    objects: {
      application: Prisma.$JobApplicationPayload<ExtArgs> | null
      candidate: Prisma.$CandidatePayload<ExtArgs>
      interviewer: Prisma.$UserPayload<ExtArgs>
      job: Prisma.$JobPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      type: $Enums.InterviewType
      status: $Enums.InterviewStatus
      scheduledAt: Date
      duration: number
      timezone: string | null
      location: string | null
      notes: string | null
      feedback: string | null
      rating: number | null
      outcome: $Enums.InterviewOutcome | null
      candidateId: string
      jobId: string
      applicationId: string | null
      interviewerId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["interview"]>
    composites: {}
  }

  type InterviewGetPayload<S extends boolean | null | undefined | InterviewDefaultArgs> = $Result.GetResult<Prisma.$InterviewPayload, S>

  type InterviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InterviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InterviewCountAggregateInputType | true
    }

  export interface InterviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Interview'], meta: { name: 'Interview' } }
    /**
     * Find zero or one Interview that matches the filter.
     * @param {InterviewFindUniqueArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InterviewFindUniqueArgs>(args: SelectSubset<T, InterviewFindUniqueArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Interview that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InterviewFindUniqueOrThrowArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InterviewFindUniqueOrThrowArgs>(args: SelectSubset<T, InterviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Interview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewFindFirstArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InterviewFindFirstArgs>(args?: SelectSubset<T, InterviewFindFirstArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Interview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewFindFirstOrThrowArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InterviewFindFirstOrThrowArgs>(args?: SelectSubset<T, InterviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Interviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Interviews
     * const interviews = await prisma.interview.findMany()
     * 
     * // Get first 10 Interviews
     * const interviews = await prisma.interview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interviewWithIdOnly = await prisma.interview.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InterviewFindManyArgs>(args?: SelectSubset<T, InterviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Interview.
     * @param {InterviewCreateArgs} args - Arguments to create a Interview.
     * @example
     * // Create one Interview
     * const Interview = await prisma.interview.create({
     *   data: {
     *     // ... data to create a Interview
     *   }
     * })
     * 
     */
    create<T extends InterviewCreateArgs>(args: SelectSubset<T, InterviewCreateArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Interviews.
     * @param {InterviewCreateManyArgs} args - Arguments to create many Interviews.
     * @example
     * // Create many Interviews
     * const interview = await prisma.interview.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InterviewCreateManyArgs>(args?: SelectSubset<T, InterviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Interviews and returns the data saved in the database.
     * @param {InterviewCreateManyAndReturnArgs} args - Arguments to create many Interviews.
     * @example
     * // Create many Interviews
     * const interview = await prisma.interview.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Interviews and only return the `id`
     * const interviewWithIdOnly = await prisma.interview.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InterviewCreateManyAndReturnArgs>(args?: SelectSubset<T, InterviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Interview.
     * @param {InterviewDeleteArgs} args - Arguments to delete one Interview.
     * @example
     * // Delete one Interview
     * const Interview = await prisma.interview.delete({
     *   where: {
     *     // ... filter to delete one Interview
     *   }
     * })
     * 
     */
    delete<T extends InterviewDeleteArgs>(args: SelectSubset<T, InterviewDeleteArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Interview.
     * @param {InterviewUpdateArgs} args - Arguments to update one Interview.
     * @example
     * // Update one Interview
     * const interview = await prisma.interview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InterviewUpdateArgs>(args: SelectSubset<T, InterviewUpdateArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Interviews.
     * @param {InterviewDeleteManyArgs} args - Arguments to filter Interviews to delete.
     * @example
     * // Delete a few Interviews
     * const { count } = await prisma.interview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InterviewDeleteManyArgs>(args?: SelectSubset<T, InterviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Interviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Interviews
     * const interview = await prisma.interview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InterviewUpdateManyArgs>(args: SelectSubset<T, InterviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Interviews and returns the data updated in the database.
     * @param {InterviewUpdateManyAndReturnArgs} args - Arguments to update many Interviews.
     * @example
     * // Update many Interviews
     * const interview = await prisma.interview.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Interviews and only return the `id`
     * const interviewWithIdOnly = await prisma.interview.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InterviewUpdateManyAndReturnArgs>(args: SelectSubset<T, InterviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Interview.
     * @param {InterviewUpsertArgs} args - Arguments to update or create a Interview.
     * @example
     * // Update or create a Interview
     * const interview = await prisma.interview.upsert({
     *   create: {
     *     // ... data to create a Interview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Interview we want to update
     *   }
     * })
     */
    upsert<T extends InterviewUpsertArgs>(args: SelectSubset<T, InterviewUpsertArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Interviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewCountArgs} args - Arguments to filter Interviews to count.
     * @example
     * // Count the number of Interviews
     * const count = await prisma.interview.count({
     *   where: {
     *     // ... the filter for the Interviews we want to count
     *   }
     * })
    **/
    count<T extends InterviewCountArgs>(
      args?: Subset<T, InterviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InterviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Interview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InterviewAggregateArgs>(args: Subset<T, InterviewAggregateArgs>): Prisma.PrismaPromise<GetInterviewAggregateType<T>>

    /**
     * Group by Interview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InterviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InterviewGroupByArgs['orderBy'] }
        : { orderBy?: InterviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InterviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInterviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Interview model
   */
  readonly fields: InterviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Interview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InterviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends Interview$applicationArgs<ExtArgs> = {}>(args?: Subset<T, Interview$applicationArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    interviewer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Interview model
   */
  interface InterviewFieldRefs {
    readonly id: FieldRef<"Interview", 'String'>
    readonly title: FieldRef<"Interview", 'String'>
    readonly type: FieldRef<"Interview", 'InterviewType'>
    readonly status: FieldRef<"Interview", 'InterviewStatus'>
    readonly scheduledAt: FieldRef<"Interview", 'DateTime'>
    readonly duration: FieldRef<"Interview", 'Int'>
    readonly timezone: FieldRef<"Interview", 'String'>
    readonly location: FieldRef<"Interview", 'String'>
    readonly notes: FieldRef<"Interview", 'String'>
    readonly feedback: FieldRef<"Interview", 'String'>
    readonly rating: FieldRef<"Interview", 'Float'>
    readonly outcome: FieldRef<"Interview", 'InterviewOutcome'>
    readonly candidateId: FieldRef<"Interview", 'String'>
    readonly jobId: FieldRef<"Interview", 'String'>
    readonly applicationId: FieldRef<"Interview", 'String'>
    readonly interviewerId: FieldRef<"Interview", 'String'>
    readonly createdAt: FieldRef<"Interview", 'DateTime'>
    readonly updatedAt: FieldRef<"Interview", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Interview findUnique
   */
  export type InterviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter, which Interview to fetch.
     */
    where: InterviewWhereUniqueInput
  }

  /**
   * Interview findUniqueOrThrow
   */
  export type InterviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter, which Interview to fetch.
     */
    where: InterviewWhereUniqueInput
  }

  /**
   * Interview findFirst
   */
  export type InterviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter, which Interview to fetch.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interviews.
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interviews.
     */
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * Interview findFirstOrThrow
   */
  export type InterviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter, which Interview to fetch.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interviews.
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interviews.
     */
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * Interview findMany
   */
  export type InterviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter, which Interviews to fetch.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Interviews.
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * Interview create
   */
  export type InterviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Interview.
     */
    data: XOR<InterviewCreateInput, InterviewUncheckedCreateInput>
  }

  /**
   * Interview createMany
   */
  export type InterviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Interviews.
     */
    data: InterviewCreateManyInput | InterviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Interview createManyAndReturn
   */
  export type InterviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * The data used to create many Interviews.
     */
    data: InterviewCreateManyInput | InterviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Interview update
   */
  export type InterviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Interview.
     */
    data: XOR<InterviewUpdateInput, InterviewUncheckedUpdateInput>
    /**
     * Choose, which Interview to update.
     */
    where: InterviewWhereUniqueInput
  }

  /**
   * Interview updateMany
   */
  export type InterviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Interviews.
     */
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyInput>
    /**
     * Filter which Interviews to update
     */
    where?: InterviewWhereInput
    /**
     * Limit how many Interviews to update.
     */
    limit?: number
  }

  /**
   * Interview updateManyAndReturn
   */
  export type InterviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * The data used to update Interviews.
     */
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyInput>
    /**
     * Filter which Interviews to update
     */
    where?: InterviewWhereInput
    /**
     * Limit how many Interviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Interview upsert
   */
  export type InterviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Interview to update in case it exists.
     */
    where: InterviewWhereUniqueInput
    /**
     * In case the Interview found by the `where` argument doesn't exist, create a new Interview with this data.
     */
    create: XOR<InterviewCreateInput, InterviewUncheckedCreateInput>
    /**
     * In case the Interview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InterviewUpdateInput, InterviewUncheckedUpdateInput>
  }

  /**
   * Interview delete
   */
  export type InterviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter which Interview to delete.
     */
    where: InterviewWhereUniqueInput
  }

  /**
   * Interview deleteMany
   */
  export type InterviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interviews to delete
     */
    where?: InterviewWhereInput
    /**
     * Limit how many Interviews to delete.
     */
    limit?: number
  }

  /**
   * Interview.application
   */
  export type Interview$applicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    where?: JobApplicationWhereInput
  }

  /**
   * Interview without action
   */
  export type InterviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
  }


  /**
   * Model Activity
   */

  export type AggregateActivity = {
    _count: ActivityCountAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  export type ActivityMinAggregateOutputType = {
    id: string | null
    type: $Enums.ActivityType | null
    title: string | null
    description: string | null
    userId: string | null
    candidateId: string | null
    jobId: string | null
    applicationId: string | null
    createdAt: Date | null
  }

  export type ActivityMaxAggregateOutputType = {
    id: string | null
    type: $Enums.ActivityType | null
    title: string | null
    description: string | null
    userId: string | null
    candidateId: string | null
    jobId: string | null
    applicationId: string | null
    createdAt: Date | null
  }

  export type ActivityCountAggregateOutputType = {
    id: number
    type: number
    title: number
    description: number
    metadata: number
    userId: number
    candidateId: number
    jobId: number
    applicationId: number
    createdAt: number
    _all: number
  }


  export type ActivityMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    userId?: true
    candidateId?: true
    jobId?: true
    applicationId?: true
    createdAt?: true
  }

  export type ActivityMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    userId?: true
    candidateId?: true
    jobId?: true
    applicationId?: true
    createdAt?: true
  }

  export type ActivityCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    metadata?: true
    userId?: true
    candidateId?: true
    jobId?: true
    applicationId?: true
    createdAt?: true
    _all?: true
  }

  export type ActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activity to aggregate.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Activities
    **/
    _count?: true | ActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityMaxAggregateInputType
  }

  export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivity[P]>
      : GetScalarType<T[P], AggregateActivity[P]>
  }




  export type ActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithAggregationInput | ActivityOrderByWithAggregationInput[]
    by: ActivityScalarFieldEnum[] | ActivityScalarFieldEnum
    having?: ActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityCountAggregateInputType | true
    _min?: ActivityMinAggregateInputType
    _max?: ActivityMaxAggregateInputType
  }

  export type ActivityGroupByOutputType = {
    id: string
    type: $Enums.ActivityType
    title: string
    description: string | null
    metadata: JsonValue | null
    userId: string | null
    candidateId: string | null
    jobId: string | null
    applicationId: string | null
    createdAt: Date
    _count: ActivityCountAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  type GetActivityGroupByPayload<T extends ActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityGroupByOutputType[P]>
        }
      >
    >


  export type ActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    metadata?: boolean
    userId?: boolean
    candidateId?: boolean
    jobId?: boolean
    applicationId?: boolean
    createdAt?: boolean
    application?: boolean | Activity$applicationArgs<ExtArgs>
    candidate?: boolean | Activity$candidateArgs<ExtArgs>
    job?: boolean | Activity$jobArgs<ExtArgs>
    user?: boolean | Activity$userArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    metadata?: boolean
    userId?: boolean
    candidateId?: boolean
    jobId?: boolean
    applicationId?: boolean
    createdAt?: boolean
    application?: boolean | Activity$applicationArgs<ExtArgs>
    candidate?: boolean | Activity$candidateArgs<ExtArgs>
    job?: boolean | Activity$jobArgs<ExtArgs>
    user?: boolean | Activity$userArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    metadata?: boolean
    userId?: boolean
    candidateId?: boolean
    jobId?: boolean
    applicationId?: boolean
    createdAt?: boolean
    application?: boolean | Activity$applicationArgs<ExtArgs>
    candidate?: boolean | Activity$candidateArgs<ExtArgs>
    job?: boolean | Activity$jobArgs<ExtArgs>
    user?: boolean | Activity$userArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    metadata?: boolean
    userId?: boolean
    candidateId?: boolean
    jobId?: boolean
    applicationId?: boolean
    createdAt?: boolean
  }

  export type ActivityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "title" | "description" | "metadata" | "userId" | "candidateId" | "jobId" | "applicationId" | "createdAt", ExtArgs["result"]["activity"]>
  export type ActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | Activity$applicationArgs<ExtArgs>
    candidate?: boolean | Activity$candidateArgs<ExtArgs>
    job?: boolean | Activity$jobArgs<ExtArgs>
    user?: boolean | Activity$userArgs<ExtArgs>
  }
  export type ActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | Activity$applicationArgs<ExtArgs>
    candidate?: boolean | Activity$candidateArgs<ExtArgs>
    job?: boolean | Activity$jobArgs<ExtArgs>
    user?: boolean | Activity$userArgs<ExtArgs>
  }
  export type ActivityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | Activity$applicationArgs<ExtArgs>
    candidate?: boolean | Activity$candidateArgs<ExtArgs>
    job?: boolean | Activity$jobArgs<ExtArgs>
    user?: boolean | Activity$userArgs<ExtArgs>
  }

  export type $ActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Activity"
    objects: {
      application: Prisma.$JobApplicationPayload<ExtArgs> | null
      candidate: Prisma.$CandidatePayload<ExtArgs> | null
      job: Prisma.$JobPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.ActivityType
      title: string
      description: string | null
      metadata: Prisma.JsonValue | null
      userId: string | null
      candidateId: string | null
      jobId: string | null
      applicationId: string | null
      createdAt: Date
    }, ExtArgs["result"]["activity"]>
    composites: {}
  }

  type ActivityGetPayload<S extends boolean | null | undefined | ActivityDefaultArgs> = $Result.GetResult<Prisma.$ActivityPayload, S>

  type ActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityCountAggregateInputType | true
    }

  export interface ActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Activity'], meta: { name: 'Activity' } }
    /**
     * Find zero or one Activity that matches the filter.
     * @param {ActivityFindUniqueArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityFindUniqueArgs>(args: SelectSubset<T, ActivityFindUniqueArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Activity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityFindUniqueOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityFindFirstArgs>(args?: SelectSubset<T, ActivityFindFirstArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activity.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityWithIdOnly = await prisma.activity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityFindManyArgs>(args?: SelectSubset<T, ActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Activity.
     * @param {ActivityCreateArgs} args - Arguments to create a Activity.
     * @example
     * // Create one Activity
     * const Activity = await prisma.activity.create({
     *   data: {
     *     // ... data to create a Activity
     *   }
     * })
     * 
     */
    create<T extends ActivityCreateArgs>(args: SelectSubset<T, ActivityCreateArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Activities.
     * @param {ActivityCreateManyArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activity = await prisma.activity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityCreateManyArgs>(args?: SelectSubset<T, ActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Activities and returns the data saved in the database.
     * @param {ActivityCreateManyAndReturnArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activity = await prisma.activity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Activities and only return the `id`
     * const activityWithIdOnly = await prisma.activity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Activity.
     * @param {ActivityDeleteArgs} args - Arguments to delete one Activity.
     * @example
     * // Delete one Activity
     * const Activity = await prisma.activity.delete({
     *   where: {
     *     // ... filter to delete one Activity
     *   }
     * })
     * 
     */
    delete<T extends ActivityDeleteArgs>(args: SelectSubset<T, ActivityDeleteArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Activity.
     * @param {ActivityUpdateArgs} args - Arguments to update one Activity.
     * @example
     * // Update one Activity
     * const activity = await prisma.activity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityUpdateArgs>(args: SelectSubset<T, ActivityUpdateArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Activities.
     * @param {ActivityDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityDeleteManyArgs>(args?: SelectSubset<T, ActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityUpdateManyArgs>(args: SelectSubset<T, ActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities and returns the data updated in the database.
     * @param {ActivityUpdateManyAndReturnArgs} args - Arguments to update many Activities.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Activities and only return the `id`
     * const activityWithIdOnly = await prisma.activity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Activity.
     * @param {ActivityUpsertArgs} args - Arguments to update or create a Activity.
     * @example
     * // Update or create a Activity
     * const activity = await prisma.activity.upsert({
     *   create: {
     *     // ... data to create a Activity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activity we want to update
     *   }
     * })
     */
    upsert<T extends ActivityUpsertArgs>(args: SelectSubset<T, ActivityUpsertArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activity.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends ActivityCountArgs>(
      args?: Subset<T, ActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityAggregateArgs>(args: Subset<T, ActivityAggregateArgs>): Prisma.PrismaPromise<GetActivityAggregateType<T>>

    /**
     * Group by Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityGroupByArgs['orderBy'] }
        : { orderBy?: ActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Activity model
   */
  readonly fields: ActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Activity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends Activity$applicationArgs<ExtArgs> = {}>(args?: Subset<T, Activity$applicationArgs<ExtArgs>>): Prisma__JobApplicationClient<$Result.GetResult<Prisma.$JobApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    candidate<T extends Activity$candidateArgs<ExtArgs> = {}>(args?: Subset<T, Activity$candidateArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    job<T extends Activity$jobArgs<ExtArgs> = {}>(args?: Subset<T, Activity$jobArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends Activity$userArgs<ExtArgs> = {}>(args?: Subset<T, Activity$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Activity model
   */
  interface ActivityFieldRefs {
    readonly id: FieldRef<"Activity", 'String'>
    readonly type: FieldRef<"Activity", 'ActivityType'>
    readonly title: FieldRef<"Activity", 'String'>
    readonly description: FieldRef<"Activity", 'String'>
    readonly metadata: FieldRef<"Activity", 'Json'>
    readonly userId: FieldRef<"Activity", 'String'>
    readonly candidateId: FieldRef<"Activity", 'String'>
    readonly jobId: FieldRef<"Activity", 'String'>
    readonly applicationId: FieldRef<"Activity", 'String'>
    readonly createdAt: FieldRef<"Activity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Activity findUnique
   */
  export type ActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity findUniqueOrThrow
   */
  export type ActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity findFirst
   */
  export type ActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity findFirstOrThrow
   */
  export type ActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity findMany
   */
  export type ActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activities to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity create
   */
  export type ActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a Activity.
     */
    data: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
  }

  /**
   * Activity createMany
   */
  export type ActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Activities.
     */
    data: ActivityCreateManyInput | ActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Activity createManyAndReturn
   */
  export type ActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * The data used to create many Activities.
     */
    data: ActivityCreateManyInput | ActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Activity update
   */
  export type ActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a Activity.
     */
    data: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
    /**
     * Choose, which Activity to update.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity updateMany
   */
  export type ActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput
    /**
     * Limit how many Activities to update.
     */
    limit?: number
  }

  /**
   * Activity updateManyAndReturn
   */
  export type ActivityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput
    /**
     * Limit how many Activities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Activity upsert
   */
  export type ActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the Activity to update in case it exists.
     */
    where: ActivityWhereUniqueInput
    /**
     * In case the Activity found by the `where` argument doesn't exist, create a new Activity with this data.
     */
    create: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
    /**
     * In case the Activity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
  }

  /**
   * Activity delete
   */
  export type ActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter which Activity to delete.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity deleteMany
   */
  export type ActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activities to delete
     */
    where?: ActivityWhereInput
    /**
     * Limit how many Activities to delete.
     */
    limit?: number
  }

  /**
   * Activity.application
   */
  export type Activity$applicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobApplication
     */
    select?: JobApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobApplication
     */
    omit?: JobApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobApplicationInclude<ExtArgs> | null
    where?: JobApplicationWhereInput
  }

  /**
   * Activity.candidate
   */
  export type Activity$candidateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    where?: CandidateWhereInput
  }

  /**
   * Activity.job
   */
  export type Activity$jobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
  }

  /**
   * Activity.user
   */
  export type Activity$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Activity without action
   */
  export type ActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    slug: 'slug',
    name: 'name',
    brandConfig: 'brandConfig',
    domain: 'domain',
    subdomain: 'subdomain',
    plan: 'plan',
    maxUsers: 'maxUsers',
    maxJobs: 'maxJobs',
    isActive: 'isActive',
    trialEndsAt: 'trialEndsAt',
    contactEmail: 'contactEmail',
    billingEmail: 'billingEmail',
    contactPhone: 'contactPhone',
    billingAddress: 'billingAddress',
    features: 'features',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    password: 'password',
    role: 'role',
    companyId: 'companyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLogin: 'lastLogin',
    isActive: 'isActive',
    organizationId: 'organizationId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    website: 'website',
    logo: 'logo',
    email: 'email',
    phone: 'phone',
    address: 'address',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    organizationId: 'organizationId'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const CandidateScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    linkedin: 'linkedin',
    github: 'github',
    portfolio: 'portfolio',
    resume: 'resume',
    summary: 'summary',
    resumeUrl: 'resumeUrl',
    status: 'status',
    location: 'location',
    timezone: 'timezone',
    yearsOfExperience: 'yearsOfExperience',
    currentSalary: 'currentSalary',
    expectedSalary: 'expectedSalary',
    availability: 'availability',
    source: 'source',
    notes: 'notes',
    tags: 'tags',
    companyId: 'companyId',
    addedById: 'addedById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    organizationId: 'organizationId',
    certifications: 'certifications',
    currentRole: 'currentRole',
    education: 'education',
    experience: 'experience',
    industryExperience: 'industryExperience',
    projects: 'projects',
    salaryExpectation: 'salaryExpectation',
    skills: 'skills',
    embedding: 'embedding',
    embeddingAt: 'embeddingAt',
    embeddingModel: 'embeddingModel'
  };

  export type CandidateScalarFieldEnum = (typeof CandidateScalarFieldEnum)[keyof typeof CandidateScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    requirements: 'requirements',
    department: 'department',
    location: 'location',
    remote: 'remote',
    type: 'type',
    level: 'level',
    salaryMin: 'salaryMin',
    salaryMax: 'salaryMax',
    currency: 'currency',
    status: 'status',
    priority: 'priority',
    startDate: 'startDate',
    endDate: 'endDate',
    deadline: 'deadline',
    companyId: 'companyId',
    recruiterId: 'recruiterId',
    jobDescriptionUrl: 'jobDescriptionUrl',
    aiGenerated: 'aiGenerated',
    aiPrompt: 'aiPrompt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    organizationId: 'organizationId',
    applicationInfo: 'applicationInfo',
    benefits: 'benefits',
    metadata: 'metadata',
    requirementsDetailed: 'requirementsDetailed',
    responsibilities: 'responsibilities',
    jobInfo: 'jobInfo',
    embedding: 'embedding',
    embeddingAt: 'embeddingAt',
    embeddingModel: 'embeddingModel'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const JobApplicationScalarFieldEnum: {
    id: 'id',
    status: 'status',
    appliedAt: 'appliedAt',
    coverLetter: 'coverLetter',
    notes: 'notes',
    rating: 'rating',
    fitScore: 'fitScore',
    candidateId: 'candidateId',
    jobId: 'jobId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobApplicationScalarFieldEnum = (typeof JobApplicationScalarFieldEnum)[keyof typeof JobApplicationScalarFieldEnum]


  export const MatchingResultScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    candidateId: 'candidateId',
    score: 'score',
    embeddingSimilarity: 'embeddingSimilarity',
    skillMatches: 'skillMatches',
    aiAnalysis: 'aiAnalysis',
    calculatedAt: 'calculatedAt',
    expiresAt: 'expiresAt',
    organizationId: 'organizationId'
  };

  export type MatchingResultScalarFieldEnum = (typeof MatchingResultScalarFieldEnum)[keyof typeof MatchingResultScalarFieldEnum]


  export const InterviewScalarFieldEnum: {
    id: 'id',
    title: 'title',
    type: 'type',
    status: 'status',
    scheduledAt: 'scheduledAt',
    duration: 'duration',
    timezone: 'timezone',
    location: 'location',
    notes: 'notes',
    feedback: 'feedback',
    rating: 'rating',
    outcome: 'outcome',
    candidateId: 'candidateId',
    jobId: 'jobId',
    applicationId: 'applicationId',
    interviewerId: 'interviewerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InterviewScalarFieldEnum = (typeof InterviewScalarFieldEnum)[keyof typeof InterviewScalarFieldEnum]


  export const ActivityScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    description: 'description',
    metadata: 'metadata',
    userId: 'userId',
    candidateId: 'candidateId',
    jobId: 'jobId',
    applicationId: 'applicationId',
    createdAt: 'createdAt'
  };

  export type ActivityScalarFieldEnum = (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'SubscriptionPlan'
   */
  export type EnumSubscriptionPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionPlan'>
    


  /**
   * Reference to a field of type 'SubscriptionPlan[]'
   */
  export type ListEnumSubscriptionPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionPlan[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'CandidateStatus'
   */
  export type EnumCandidateStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CandidateStatus'>
    


  /**
   * Reference to a field of type 'CandidateStatus[]'
   */
  export type ListEnumCandidateStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CandidateStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'JobType'
   */
  export type EnumJobTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobType'>
    


  /**
   * Reference to a field of type 'JobType[]'
   */
  export type ListEnumJobTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobType[]'>
    


  /**
   * Reference to a field of type 'JobLevel'
   */
  export type EnumJobLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobLevel'>
    


  /**
   * Reference to a field of type 'JobLevel[]'
   */
  export type ListEnumJobLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobLevel[]'>
    


  /**
   * Reference to a field of type 'JobStatus'
   */
  export type EnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus'>
    


  /**
   * Reference to a field of type 'JobStatus[]'
   */
  export type ListEnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus[]'>
    


  /**
   * Reference to a field of type 'Priority'
   */
  export type EnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority'>
    


  /**
   * Reference to a field of type 'Priority[]'
   */
  export type ListEnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority[]'>
    


  /**
   * Reference to a field of type 'ApplicationStatus'
   */
  export type EnumApplicationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApplicationStatus'>
    


  /**
   * Reference to a field of type 'ApplicationStatus[]'
   */
  export type ListEnumApplicationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApplicationStatus[]'>
    


  /**
   * Reference to a field of type 'InterviewType'
   */
  export type EnumInterviewTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InterviewType'>
    


  /**
   * Reference to a field of type 'InterviewType[]'
   */
  export type ListEnumInterviewTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InterviewType[]'>
    


  /**
   * Reference to a field of type 'InterviewStatus'
   */
  export type EnumInterviewStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InterviewStatus'>
    


  /**
   * Reference to a field of type 'InterviewStatus[]'
   */
  export type ListEnumInterviewStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InterviewStatus[]'>
    


  /**
   * Reference to a field of type 'InterviewOutcome'
   */
  export type EnumInterviewOutcomeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InterviewOutcome'>
    


  /**
   * Reference to a field of type 'InterviewOutcome[]'
   */
  export type ListEnumInterviewOutcomeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InterviewOutcome[]'>
    


  /**
   * Reference to a field of type 'ActivityType'
   */
  export type EnumActivityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActivityType'>
    


  /**
   * Reference to a field of type 'ActivityType[]'
   */
  export type ListEnumActivityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActivityType[]'>
    
  /**
   * Deep Input Types
   */


  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: StringFilter<"Organization"> | string
    slug?: StringFilter<"Organization"> | string
    name?: StringFilter<"Organization"> | string
    brandConfig?: JsonNullableFilter<"Organization">
    domain?: StringNullableFilter<"Organization"> | string | null
    subdomain?: StringNullableFilter<"Organization"> | string | null
    plan?: EnumSubscriptionPlanFilter<"Organization"> | $Enums.SubscriptionPlan
    maxUsers?: IntFilter<"Organization"> | number
    maxJobs?: IntFilter<"Organization"> | number
    isActive?: BoolFilter<"Organization"> | boolean
    trialEndsAt?: DateTimeNullableFilter<"Organization"> | Date | string | null
    contactEmail?: StringFilter<"Organization"> | string
    billingEmail?: StringNullableFilter<"Organization"> | string | null
    contactPhone?: StringNullableFilter<"Organization"> | string | null
    billingAddress?: JsonNullableFilter<"Organization">
    features?: JsonFilter<"Organization">
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    candidates?: CandidateListRelationFilter
    companies?: CompanyListRelationFilter
    jobs?: JobListRelationFilter
    matchingResults?: MatchingResultListRelationFilter
    users?: UserListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    slug?: SortOrder
    name?: SortOrder
    brandConfig?: SortOrderInput | SortOrder
    domain?: SortOrderInput | SortOrder
    subdomain?: SortOrderInput | SortOrder
    plan?: SortOrder
    maxUsers?: SortOrder
    maxJobs?: SortOrder
    isActive?: SortOrder
    trialEndsAt?: SortOrderInput | SortOrder
    contactEmail?: SortOrder
    billingEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    billingAddress?: SortOrderInput | SortOrder
    features?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidates?: CandidateOrderByRelationAggregateInput
    companies?: CompanyOrderByRelationAggregateInput
    jobs?: JobOrderByRelationAggregateInput
    matchingResults?: MatchingResultOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    name?: StringFilter<"Organization"> | string
    brandConfig?: JsonNullableFilter<"Organization">
    domain?: StringNullableFilter<"Organization"> | string | null
    subdomain?: StringNullableFilter<"Organization"> | string | null
    plan?: EnumSubscriptionPlanFilter<"Organization"> | $Enums.SubscriptionPlan
    maxUsers?: IntFilter<"Organization"> | number
    maxJobs?: IntFilter<"Organization"> | number
    isActive?: BoolFilter<"Organization"> | boolean
    trialEndsAt?: DateTimeNullableFilter<"Organization"> | Date | string | null
    contactEmail?: StringFilter<"Organization"> | string
    billingEmail?: StringNullableFilter<"Organization"> | string | null
    contactPhone?: StringNullableFilter<"Organization"> | string | null
    billingAddress?: JsonNullableFilter<"Organization">
    features?: JsonFilter<"Organization">
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    candidates?: CandidateListRelationFilter
    companies?: CompanyListRelationFilter
    jobs?: JobListRelationFilter
    matchingResults?: MatchingResultListRelationFilter
    users?: UserListRelationFilter
  }, "id" | "slug">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    slug?: SortOrder
    name?: SortOrder
    brandConfig?: SortOrderInput | SortOrder
    domain?: SortOrderInput | SortOrder
    subdomain?: SortOrderInput | SortOrder
    plan?: SortOrder
    maxUsers?: SortOrder
    maxJobs?: SortOrder
    isActive?: SortOrder
    trialEndsAt?: SortOrderInput | SortOrder
    contactEmail?: SortOrder
    billingEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    billingAddress?: SortOrderInput | SortOrder
    features?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _avg?: OrganizationAvgOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
    _sum?: OrganizationSumOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Organization"> | string
    slug?: StringWithAggregatesFilter<"Organization"> | string
    name?: StringWithAggregatesFilter<"Organization"> | string
    brandConfig?: JsonNullableWithAggregatesFilter<"Organization">
    domain?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    subdomain?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    plan?: EnumSubscriptionPlanWithAggregatesFilter<"Organization"> | $Enums.SubscriptionPlan
    maxUsers?: IntWithAggregatesFilter<"Organization"> | number
    maxJobs?: IntWithAggregatesFilter<"Organization"> | number
    isActive?: BoolWithAggregatesFilter<"Organization"> | boolean
    trialEndsAt?: DateTimeNullableWithAggregatesFilter<"Organization"> | Date | string | null
    contactEmail?: StringWithAggregatesFilter<"Organization"> | string
    billingEmail?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    contactPhone?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    billingAddress?: JsonNullableWithAggregatesFilter<"Organization">
    features?: JsonWithAggregatesFilter<"Organization">
    createdAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    companyId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    isActive?: BoolFilter<"User"> | boolean
    organizationId?: StringFilter<"User"> | string
    activities?: ActivityListRelationFilter
    candidates?: CandidateListRelationFilter
    conductedInterviews?: InterviewListRelationFilter
    jobs?: JobListRelationFilter
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    role?: SortOrder
    companyId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    isActive?: SortOrder
    organizationId?: SortOrder
    activities?: ActivityOrderByRelationAggregateInput
    candidates?: CandidateOrderByRelationAggregateInput
    conductedInterviews?: InterviewOrderByRelationAggregateInput
    jobs?: JobOrderByRelationAggregateInput
    company?: CompanyOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    companyId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    isActive?: BoolFilter<"User"> | boolean
    organizationId?: StringFilter<"User"> | string
    activities?: ActivityListRelationFilter
    candidates?: CandidateListRelationFilter
    conductedInterviews?: InterviewListRelationFilter
    jobs?: JobListRelationFilter
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    role?: SortOrder
    companyId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    isActive?: SortOrder
    organizationId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    companyId?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    organizationId?: StringWithAggregatesFilter<"User"> | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    description?: StringNullableFilter<"Company"> | string | null
    website?: StringNullableFilter<"Company"> | string | null
    logo?: StringNullableFilter<"Company"> | string | null
    email?: StringNullableFilter<"Company"> | string | null
    phone?: StringNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    organizationId?: StringFilter<"Company"> | string
    candidates?: CandidateListRelationFilter
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    jobs?: JobListRelationFilter
    users?: UserListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    candidates?: CandidateOrderByRelationAggregateInput
    organization?: OrganizationOrderByWithRelationInput
    jobs?: JobOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    name?: StringFilter<"Company"> | string
    description?: StringNullableFilter<"Company"> | string | null
    website?: StringNullableFilter<"Company"> | string | null
    logo?: StringNullableFilter<"Company"> | string | null
    email?: StringNullableFilter<"Company"> | string | null
    phone?: StringNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    organizationId?: StringFilter<"Company"> | string
    candidates?: CandidateListRelationFilter
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    jobs?: JobListRelationFilter
    users?: UserListRelationFilter
  }, "id">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Company"> | string
    name?: StringWithAggregatesFilter<"Company"> | string
    description?: StringNullableWithAggregatesFilter<"Company"> | string | null
    website?: StringNullableWithAggregatesFilter<"Company"> | string | null
    logo?: StringNullableWithAggregatesFilter<"Company"> | string | null
    email?: StringNullableWithAggregatesFilter<"Company"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Company"> | string | null
    address?: StringNullableWithAggregatesFilter<"Company"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    organizationId?: StringWithAggregatesFilter<"Company"> | string
  }

  export type CandidateWhereInput = {
    AND?: CandidateWhereInput | CandidateWhereInput[]
    OR?: CandidateWhereInput[]
    NOT?: CandidateWhereInput | CandidateWhereInput[]
    id?: StringFilter<"Candidate"> | string
    email?: StringFilter<"Candidate"> | string
    firstName?: StringFilter<"Candidate"> | string
    lastName?: StringFilter<"Candidate"> | string
    phone?: StringNullableFilter<"Candidate"> | string | null
    linkedin?: StringNullableFilter<"Candidate"> | string | null
    github?: StringNullableFilter<"Candidate"> | string | null
    portfolio?: StringNullableFilter<"Candidate"> | string | null
    resume?: StringNullableFilter<"Candidate"> | string | null
    summary?: StringNullableFilter<"Candidate"> | string | null
    resumeUrl?: StringNullableFilter<"Candidate"> | string | null
    status?: EnumCandidateStatusFilter<"Candidate"> | $Enums.CandidateStatus
    location?: StringNullableFilter<"Candidate"> | string | null
    timezone?: StringNullableFilter<"Candidate"> | string | null
    yearsOfExperience?: IntNullableFilter<"Candidate"> | number | null
    currentSalary?: FloatNullableFilter<"Candidate"> | number | null
    expectedSalary?: FloatNullableFilter<"Candidate"> | number | null
    availability?: DateTimeNullableFilter<"Candidate"> | Date | string | null
    source?: StringNullableFilter<"Candidate"> | string | null
    notes?: StringNullableFilter<"Candidate"> | string | null
    tags?: StringNullableListFilter<"Candidate">
    companyId?: StringNullableFilter<"Candidate"> | string | null
    addedById?: StringFilter<"Candidate"> | string
    createdAt?: DateTimeFilter<"Candidate"> | Date | string
    updatedAt?: DateTimeFilter<"Candidate"> | Date | string
    organizationId?: StringFilter<"Candidate"> | string
    certifications?: JsonNullableFilter<"Candidate">
    currentRole?: StringNullableFilter<"Candidate"> | string | null
    education?: JsonNullableFilter<"Candidate">
    experience?: JsonNullableFilter<"Candidate">
    industryExperience?: StringNullableListFilter<"Candidate">
    projects?: JsonNullableFilter<"Candidate">
    salaryExpectation?: JsonNullableFilter<"Candidate">
    skills?: JsonNullableFilter<"Candidate">
    embedding?: StringNullableFilter<"Candidate"> | string | null
    embeddingAt?: DateTimeNullableFilter<"Candidate"> | Date | string | null
    embeddingModel?: StringNullableFilter<"Candidate"> | string | null
    activities?: ActivityListRelationFilter
    addedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    interviews?: InterviewListRelationFilter
    applications?: JobApplicationListRelationFilter
    matchingResults?: MatchingResultListRelationFilter
  }

  export type CandidateOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    linkedin?: SortOrderInput | SortOrder
    github?: SortOrderInput | SortOrder
    portfolio?: SortOrderInput | SortOrder
    resume?: SortOrderInput | SortOrder
    summary?: SortOrderInput | SortOrder
    resumeUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    location?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    yearsOfExperience?: SortOrderInput | SortOrder
    currentSalary?: SortOrderInput | SortOrder
    expectedSalary?: SortOrderInput | SortOrder
    availability?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    tags?: SortOrder
    companyId?: SortOrderInput | SortOrder
    addedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    certifications?: SortOrderInput | SortOrder
    currentRole?: SortOrderInput | SortOrder
    education?: SortOrderInput | SortOrder
    experience?: SortOrderInput | SortOrder
    industryExperience?: SortOrder
    projects?: SortOrderInput | SortOrder
    salaryExpectation?: SortOrderInput | SortOrder
    skills?: SortOrderInput | SortOrder
    embedding?: SortOrderInput | SortOrder
    embeddingAt?: SortOrderInput | SortOrder
    embeddingModel?: SortOrderInput | SortOrder
    activities?: ActivityOrderByRelationAggregateInput
    addedBy?: UserOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
    interviews?: InterviewOrderByRelationAggregateInput
    applications?: JobApplicationOrderByRelationAggregateInput
    matchingResults?: MatchingResultOrderByRelationAggregateInput
  }

  export type CandidateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email_organizationId?: CandidateEmailOrganizationIdCompoundUniqueInput
    AND?: CandidateWhereInput | CandidateWhereInput[]
    OR?: CandidateWhereInput[]
    NOT?: CandidateWhereInput | CandidateWhereInput[]
    email?: StringFilter<"Candidate"> | string
    firstName?: StringFilter<"Candidate"> | string
    lastName?: StringFilter<"Candidate"> | string
    phone?: StringNullableFilter<"Candidate"> | string | null
    linkedin?: StringNullableFilter<"Candidate"> | string | null
    github?: StringNullableFilter<"Candidate"> | string | null
    portfolio?: StringNullableFilter<"Candidate"> | string | null
    resume?: StringNullableFilter<"Candidate"> | string | null
    summary?: StringNullableFilter<"Candidate"> | string | null
    resumeUrl?: StringNullableFilter<"Candidate"> | string | null
    status?: EnumCandidateStatusFilter<"Candidate"> | $Enums.CandidateStatus
    location?: StringNullableFilter<"Candidate"> | string | null
    timezone?: StringNullableFilter<"Candidate"> | string | null
    yearsOfExperience?: IntNullableFilter<"Candidate"> | number | null
    currentSalary?: FloatNullableFilter<"Candidate"> | number | null
    expectedSalary?: FloatNullableFilter<"Candidate"> | number | null
    availability?: DateTimeNullableFilter<"Candidate"> | Date | string | null
    source?: StringNullableFilter<"Candidate"> | string | null
    notes?: StringNullableFilter<"Candidate"> | string | null
    tags?: StringNullableListFilter<"Candidate">
    companyId?: StringNullableFilter<"Candidate"> | string | null
    addedById?: StringFilter<"Candidate"> | string
    createdAt?: DateTimeFilter<"Candidate"> | Date | string
    updatedAt?: DateTimeFilter<"Candidate"> | Date | string
    organizationId?: StringFilter<"Candidate"> | string
    certifications?: JsonNullableFilter<"Candidate">
    currentRole?: StringNullableFilter<"Candidate"> | string | null
    education?: JsonNullableFilter<"Candidate">
    experience?: JsonNullableFilter<"Candidate">
    industryExperience?: StringNullableListFilter<"Candidate">
    projects?: JsonNullableFilter<"Candidate">
    salaryExpectation?: JsonNullableFilter<"Candidate">
    skills?: JsonNullableFilter<"Candidate">
    embedding?: StringNullableFilter<"Candidate"> | string | null
    embeddingAt?: DateTimeNullableFilter<"Candidate"> | Date | string | null
    embeddingModel?: StringNullableFilter<"Candidate"> | string | null
    activities?: ActivityListRelationFilter
    addedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    interviews?: InterviewListRelationFilter
    applications?: JobApplicationListRelationFilter
    matchingResults?: MatchingResultListRelationFilter
  }, "id" | "email_organizationId">

  export type CandidateOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    linkedin?: SortOrderInput | SortOrder
    github?: SortOrderInput | SortOrder
    portfolio?: SortOrderInput | SortOrder
    resume?: SortOrderInput | SortOrder
    summary?: SortOrderInput | SortOrder
    resumeUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    location?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    yearsOfExperience?: SortOrderInput | SortOrder
    currentSalary?: SortOrderInput | SortOrder
    expectedSalary?: SortOrderInput | SortOrder
    availability?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    tags?: SortOrder
    companyId?: SortOrderInput | SortOrder
    addedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    certifications?: SortOrderInput | SortOrder
    currentRole?: SortOrderInput | SortOrder
    education?: SortOrderInput | SortOrder
    experience?: SortOrderInput | SortOrder
    industryExperience?: SortOrder
    projects?: SortOrderInput | SortOrder
    salaryExpectation?: SortOrderInput | SortOrder
    skills?: SortOrderInput | SortOrder
    embedding?: SortOrderInput | SortOrder
    embeddingAt?: SortOrderInput | SortOrder
    embeddingModel?: SortOrderInput | SortOrder
    _count?: CandidateCountOrderByAggregateInput
    _avg?: CandidateAvgOrderByAggregateInput
    _max?: CandidateMaxOrderByAggregateInput
    _min?: CandidateMinOrderByAggregateInput
    _sum?: CandidateSumOrderByAggregateInput
  }

  export type CandidateScalarWhereWithAggregatesInput = {
    AND?: CandidateScalarWhereWithAggregatesInput | CandidateScalarWhereWithAggregatesInput[]
    OR?: CandidateScalarWhereWithAggregatesInput[]
    NOT?: CandidateScalarWhereWithAggregatesInput | CandidateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Candidate"> | string
    email?: StringWithAggregatesFilter<"Candidate"> | string
    firstName?: StringWithAggregatesFilter<"Candidate"> | string
    lastName?: StringWithAggregatesFilter<"Candidate"> | string
    phone?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    linkedin?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    github?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    portfolio?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    resume?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    summary?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    resumeUrl?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    status?: EnumCandidateStatusWithAggregatesFilter<"Candidate"> | $Enums.CandidateStatus
    location?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    timezone?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    yearsOfExperience?: IntNullableWithAggregatesFilter<"Candidate"> | number | null
    currentSalary?: FloatNullableWithAggregatesFilter<"Candidate"> | number | null
    expectedSalary?: FloatNullableWithAggregatesFilter<"Candidate"> | number | null
    availability?: DateTimeNullableWithAggregatesFilter<"Candidate"> | Date | string | null
    source?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    tags?: StringNullableListFilter<"Candidate">
    companyId?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    addedById?: StringWithAggregatesFilter<"Candidate"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Candidate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Candidate"> | Date | string
    organizationId?: StringWithAggregatesFilter<"Candidate"> | string
    certifications?: JsonNullableWithAggregatesFilter<"Candidate">
    currentRole?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    education?: JsonNullableWithAggregatesFilter<"Candidate">
    experience?: JsonNullableWithAggregatesFilter<"Candidate">
    industryExperience?: StringNullableListFilter<"Candidate">
    projects?: JsonNullableWithAggregatesFilter<"Candidate">
    salaryExpectation?: JsonNullableWithAggregatesFilter<"Candidate">
    skills?: JsonNullableWithAggregatesFilter<"Candidate">
    embedding?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    embeddingAt?: DateTimeNullableWithAggregatesFilter<"Candidate"> | Date | string | null
    embeddingModel?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
  }

  export type JobWhereInput = {
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    id?: StringFilter<"Job"> | string
    title?: StringFilter<"Job"> | string
    description?: StringFilter<"Job"> | string
    requirements?: StringNullableFilter<"Job"> | string | null
    department?: StringNullableFilter<"Job"> | string | null
    location?: StringNullableFilter<"Job"> | string | null
    remote?: BoolFilter<"Job"> | boolean
    type?: EnumJobTypeFilter<"Job"> | $Enums.JobType
    level?: EnumJobLevelFilter<"Job"> | $Enums.JobLevel
    salaryMin?: FloatNullableFilter<"Job"> | number | null
    salaryMax?: FloatNullableFilter<"Job"> | number | null
    currency?: StringFilter<"Job"> | string
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    priority?: EnumPriorityFilter<"Job"> | $Enums.Priority
    startDate?: DateTimeNullableFilter<"Job"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Job"> | Date | string | null
    deadline?: DateTimeNullableFilter<"Job"> | Date | string | null
    companyId?: StringFilter<"Job"> | string
    recruiterId?: StringFilter<"Job"> | string
    jobDescriptionUrl?: StringNullableFilter<"Job"> | string | null
    aiGenerated?: BoolFilter<"Job"> | boolean
    aiPrompt?: StringNullableFilter<"Job"> | string | null
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
    organizationId?: StringFilter<"Job"> | string
    applicationInfo?: JsonNullableFilter<"Job">
    benefits?: JsonNullableFilter<"Job">
    metadata?: JsonNullableFilter<"Job">
    requirementsDetailed?: JsonNullableFilter<"Job">
    responsibilities?: JsonNullableFilter<"Job">
    jobInfo?: JsonNullableFilter<"Job">
    embedding?: StringNullableFilter<"Job"> | string | null
    embeddingAt?: DateTimeNullableFilter<"Job"> | Date | string | null
    embeddingModel?: StringNullableFilter<"Job"> | string | null
    activities?: ActivityListRelationFilter
    interviews?: InterviewListRelationFilter
    applications?: JobApplicationListRelationFilter
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    recruiter?: XOR<UserScalarRelationFilter, UserWhereInput>
    matchingResults?: MatchingResultListRelationFilter
  }

  export type JobOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    requirements?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    remote?: SortOrder
    type?: SortOrder
    level?: SortOrder
    salaryMin?: SortOrderInput | SortOrder
    salaryMax?: SortOrderInput | SortOrder
    currency?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    deadline?: SortOrderInput | SortOrder
    companyId?: SortOrder
    recruiterId?: SortOrder
    jobDescriptionUrl?: SortOrderInput | SortOrder
    aiGenerated?: SortOrder
    aiPrompt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    applicationInfo?: SortOrderInput | SortOrder
    benefits?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    requirementsDetailed?: SortOrderInput | SortOrder
    responsibilities?: SortOrderInput | SortOrder
    jobInfo?: SortOrderInput | SortOrder
    embedding?: SortOrderInput | SortOrder
    embeddingAt?: SortOrderInput | SortOrder
    embeddingModel?: SortOrderInput | SortOrder
    activities?: ActivityOrderByRelationAggregateInput
    interviews?: InterviewOrderByRelationAggregateInput
    applications?: JobApplicationOrderByRelationAggregateInput
    company?: CompanyOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
    recruiter?: UserOrderByWithRelationInput
    matchingResults?: MatchingResultOrderByRelationAggregateInput
  }

  export type JobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    title?: StringFilter<"Job"> | string
    description?: StringFilter<"Job"> | string
    requirements?: StringNullableFilter<"Job"> | string | null
    department?: StringNullableFilter<"Job"> | string | null
    location?: StringNullableFilter<"Job"> | string | null
    remote?: BoolFilter<"Job"> | boolean
    type?: EnumJobTypeFilter<"Job"> | $Enums.JobType
    level?: EnumJobLevelFilter<"Job"> | $Enums.JobLevel
    salaryMin?: FloatNullableFilter<"Job"> | number | null
    salaryMax?: FloatNullableFilter<"Job"> | number | null
    currency?: StringFilter<"Job"> | string
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    priority?: EnumPriorityFilter<"Job"> | $Enums.Priority
    startDate?: DateTimeNullableFilter<"Job"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Job"> | Date | string | null
    deadline?: DateTimeNullableFilter<"Job"> | Date | string | null
    companyId?: StringFilter<"Job"> | string
    recruiterId?: StringFilter<"Job"> | string
    jobDescriptionUrl?: StringNullableFilter<"Job"> | string | null
    aiGenerated?: BoolFilter<"Job"> | boolean
    aiPrompt?: StringNullableFilter<"Job"> | string | null
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
    organizationId?: StringFilter<"Job"> | string
    applicationInfo?: JsonNullableFilter<"Job">
    benefits?: JsonNullableFilter<"Job">
    metadata?: JsonNullableFilter<"Job">
    requirementsDetailed?: JsonNullableFilter<"Job">
    responsibilities?: JsonNullableFilter<"Job">
    jobInfo?: JsonNullableFilter<"Job">
    embedding?: StringNullableFilter<"Job"> | string | null
    embeddingAt?: DateTimeNullableFilter<"Job"> | Date | string | null
    embeddingModel?: StringNullableFilter<"Job"> | string | null
    activities?: ActivityListRelationFilter
    interviews?: InterviewListRelationFilter
    applications?: JobApplicationListRelationFilter
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    recruiter?: XOR<UserScalarRelationFilter, UserWhereInput>
    matchingResults?: MatchingResultListRelationFilter
  }, "id">

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    requirements?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    remote?: SortOrder
    type?: SortOrder
    level?: SortOrder
    salaryMin?: SortOrderInput | SortOrder
    salaryMax?: SortOrderInput | SortOrder
    currency?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    deadline?: SortOrderInput | SortOrder
    companyId?: SortOrder
    recruiterId?: SortOrder
    jobDescriptionUrl?: SortOrderInput | SortOrder
    aiGenerated?: SortOrder
    aiPrompt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    applicationInfo?: SortOrderInput | SortOrder
    benefits?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    requirementsDetailed?: SortOrderInput | SortOrder
    responsibilities?: SortOrderInput | SortOrder
    jobInfo?: SortOrderInput | SortOrder
    embedding?: SortOrderInput | SortOrder
    embeddingAt?: SortOrderInput | SortOrder
    embeddingModel?: SortOrderInput | SortOrder
    _count?: JobCountOrderByAggregateInput
    _avg?: JobAvgOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
    _sum?: JobSumOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    OR?: JobScalarWhereWithAggregatesInput[]
    NOT?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Job"> | string
    title?: StringWithAggregatesFilter<"Job"> | string
    description?: StringWithAggregatesFilter<"Job"> | string
    requirements?: StringNullableWithAggregatesFilter<"Job"> | string | null
    department?: StringNullableWithAggregatesFilter<"Job"> | string | null
    location?: StringNullableWithAggregatesFilter<"Job"> | string | null
    remote?: BoolWithAggregatesFilter<"Job"> | boolean
    type?: EnumJobTypeWithAggregatesFilter<"Job"> | $Enums.JobType
    level?: EnumJobLevelWithAggregatesFilter<"Job"> | $Enums.JobLevel
    salaryMin?: FloatNullableWithAggregatesFilter<"Job"> | number | null
    salaryMax?: FloatNullableWithAggregatesFilter<"Job"> | number | null
    currency?: StringWithAggregatesFilter<"Job"> | string
    status?: EnumJobStatusWithAggregatesFilter<"Job"> | $Enums.JobStatus
    priority?: EnumPriorityWithAggregatesFilter<"Job"> | $Enums.Priority
    startDate?: DateTimeNullableWithAggregatesFilter<"Job"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"Job"> | Date | string | null
    deadline?: DateTimeNullableWithAggregatesFilter<"Job"> | Date | string | null
    companyId?: StringWithAggregatesFilter<"Job"> | string
    recruiterId?: StringWithAggregatesFilter<"Job"> | string
    jobDescriptionUrl?: StringNullableWithAggregatesFilter<"Job"> | string | null
    aiGenerated?: BoolWithAggregatesFilter<"Job"> | boolean
    aiPrompt?: StringNullableWithAggregatesFilter<"Job"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
    organizationId?: StringWithAggregatesFilter<"Job"> | string
    applicationInfo?: JsonNullableWithAggregatesFilter<"Job">
    benefits?: JsonNullableWithAggregatesFilter<"Job">
    metadata?: JsonNullableWithAggregatesFilter<"Job">
    requirementsDetailed?: JsonNullableWithAggregatesFilter<"Job">
    responsibilities?: JsonNullableWithAggregatesFilter<"Job">
    jobInfo?: JsonNullableWithAggregatesFilter<"Job">
    embedding?: StringNullableWithAggregatesFilter<"Job"> | string | null
    embeddingAt?: DateTimeNullableWithAggregatesFilter<"Job"> | Date | string | null
    embeddingModel?: StringNullableWithAggregatesFilter<"Job"> | string | null
  }

  export type JobApplicationWhereInput = {
    AND?: JobApplicationWhereInput | JobApplicationWhereInput[]
    OR?: JobApplicationWhereInput[]
    NOT?: JobApplicationWhereInput | JobApplicationWhereInput[]
    id?: StringFilter<"JobApplication"> | string
    status?: EnumApplicationStatusFilter<"JobApplication"> | $Enums.ApplicationStatus
    appliedAt?: DateTimeFilter<"JobApplication"> | Date | string
    coverLetter?: StringNullableFilter<"JobApplication"> | string | null
    notes?: StringNullableFilter<"JobApplication"> | string | null
    rating?: FloatNullableFilter<"JobApplication"> | number | null
    fitScore?: FloatNullableFilter<"JobApplication"> | number | null
    candidateId?: StringFilter<"JobApplication"> | string
    jobId?: StringFilter<"JobApplication"> | string
    createdAt?: DateTimeFilter<"JobApplication"> | Date | string
    updatedAt?: DateTimeFilter<"JobApplication"> | Date | string
    activities?: ActivityListRelationFilter
    interviews?: InterviewListRelationFilter
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }

  export type JobApplicationOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    appliedAt?: SortOrder
    coverLetter?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    fitScore?: SortOrderInput | SortOrder
    candidateId?: SortOrder
    jobId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activities?: ActivityOrderByRelationAggregateInput
    interviews?: InterviewOrderByRelationAggregateInput
    candidate?: CandidateOrderByWithRelationInput
    job?: JobOrderByWithRelationInput
  }

  export type JobApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    candidateId_jobId?: JobApplicationCandidateIdJobIdCompoundUniqueInput
    AND?: JobApplicationWhereInput | JobApplicationWhereInput[]
    OR?: JobApplicationWhereInput[]
    NOT?: JobApplicationWhereInput | JobApplicationWhereInput[]
    status?: EnumApplicationStatusFilter<"JobApplication"> | $Enums.ApplicationStatus
    appliedAt?: DateTimeFilter<"JobApplication"> | Date | string
    coverLetter?: StringNullableFilter<"JobApplication"> | string | null
    notes?: StringNullableFilter<"JobApplication"> | string | null
    rating?: FloatNullableFilter<"JobApplication"> | number | null
    fitScore?: FloatNullableFilter<"JobApplication"> | number | null
    candidateId?: StringFilter<"JobApplication"> | string
    jobId?: StringFilter<"JobApplication"> | string
    createdAt?: DateTimeFilter<"JobApplication"> | Date | string
    updatedAt?: DateTimeFilter<"JobApplication"> | Date | string
    activities?: ActivityListRelationFilter
    interviews?: InterviewListRelationFilter
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }, "id" | "candidateId_jobId">

  export type JobApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    appliedAt?: SortOrder
    coverLetter?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    fitScore?: SortOrderInput | SortOrder
    candidateId?: SortOrder
    jobId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobApplicationCountOrderByAggregateInput
    _avg?: JobApplicationAvgOrderByAggregateInput
    _max?: JobApplicationMaxOrderByAggregateInput
    _min?: JobApplicationMinOrderByAggregateInput
    _sum?: JobApplicationSumOrderByAggregateInput
  }

  export type JobApplicationScalarWhereWithAggregatesInput = {
    AND?: JobApplicationScalarWhereWithAggregatesInput | JobApplicationScalarWhereWithAggregatesInput[]
    OR?: JobApplicationScalarWhereWithAggregatesInput[]
    NOT?: JobApplicationScalarWhereWithAggregatesInput | JobApplicationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JobApplication"> | string
    status?: EnumApplicationStatusWithAggregatesFilter<"JobApplication"> | $Enums.ApplicationStatus
    appliedAt?: DateTimeWithAggregatesFilter<"JobApplication"> | Date | string
    coverLetter?: StringNullableWithAggregatesFilter<"JobApplication"> | string | null
    notes?: StringNullableWithAggregatesFilter<"JobApplication"> | string | null
    rating?: FloatNullableWithAggregatesFilter<"JobApplication"> | number | null
    fitScore?: FloatNullableWithAggregatesFilter<"JobApplication"> | number | null
    candidateId?: StringWithAggregatesFilter<"JobApplication"> | string
    jobId?: StringWithAggregatesFilter<"JobApplication"> | string
    createdAt?: DateTimeWithAggregatesFilter<"JobApplication"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"JobApplication"> | Date | string
  }

  export type MatchingResultWhereInput = {
    AND?: MatchingResultWhereInput | MatchingResultWhereInput[]
    OR?: MatchingResultWhereInput[]
    NOT?: MatchingResultWhereInput | MatchingResultWhereInput[]
    id?: StringFilter<"MatchingResult"> | string
    jobId?: StringFilter<"MatchingResult"> | string
    candidateId?: StringFilter<"MatchingResult"> | string
    score?: FloatFilter<"MatchingResult"> | number
    embeddingSimilarity?: FloatFilter<"MatchingResult"> | number
    skillMatches?: JsonFilter<"MatchingResult">
    aiAnalysis?: JsonNullableFilter<"MatchingResult">
    calculatedAt?: DateTimeFilter<"MatchingResult"> | Date | string
    expiresAt?: DateTimeFilter<"MatchingResult"> | Date | string
    organizationId?: StringFilter<"MatchingResult"> | string
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }

  export type MatchingResultOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    score?: SortOrder
    embeddingSimilarity?: SortOrder
    skillMatches?: SortOrder
    aiAnalysis?: SortOrderInput | SortOrder
    calculatedAt?: SortOrder
    expiresAt?: SortOrder
    organizationId?: SortOrder
    candidate?: CandidateOrderByWithRelationInput
    job?: JobOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
  }

  export type MatchingResultWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jobId_candidateId?: MatchingResultJobIdCandidateIdCompoundUniqueInput
    AND?: MatchingResultWhereInput | MatchingResultWhereInput[]
    OR?: MatchingResultWhereInput[]
    NOT?: MatchingResultWhereInput | MatchingResultWhereInput[]
    jobId?: StringFilter<"MatchingResult"> | string
    candidateId?: StringFilter<"MatchingResult"> | string
    score?: FloatFilter<"MatchingResult"> | number
    embeddingSimilarity?: FloatFilter<"MatchingResult"> | number
    skillMatches?: JsonFilter<"MatchingResult">
    aiAnalysis?: JsonNullableFilter<"MatchingResult">
    calculatedAt?: DateTimeFilter<"MatchingResult"> | Date | string
    expiresAt?: DateTimeFilter<"MatchingResult"> | Date | string
    organizationId?: StringFilter<"MatchingResult"> | string
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }, "id" | "jobId_candidateId">

  export type MatchingResultOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    score?: SortOrder
    embeddingSimilarity?: SortOrder
    skillMatches?: SortOrder
    aiAnalysis?: SortOrderInput | SortOrder
    calculatedAt?: SortOrder
    expiresAt?: SortOrder
    organizationId?: SortOrder
    _count?: MatchingResultCountOrderByAggregateInput
    _avg?: MatchingResultAvgOrderByAggregateInput
    _max?: MatchingResultMaxOrderByAggregateInput
    _min?: MatchingResultMinOrderByAggregateInput
    _sum?: MatchingResultSumOrderByAggregateInput
  }

  export type MatchingResultScalarWhereWithAggregatesInput = {
    AND?: MatchingResultScalarWhereWithAggregatesInput | MatchingResultScalarWhereWithAggregatesInput[]
    OR?: MatchingResultScalarWhereWithAggregatesInput[]
    NOT?: MatchingResultScalarWhereWithAggregatesInput | MatchingResultScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MatchingResult"> | string
    jobId?: StringWithAggregatesFilter<"MatchingResult"> | string
    candidateId?: StringWithAggregatesFilter<"MatchingResult"> | string
    score?: FloatWithAggregatesFilter<"MatchingResult"> | number
    embeddingSimilarity?: FloatWithAggregatesFilter<"MatchingResult"> | number
    skillMatches?: JsonWithAggregatesFilter<"MatchingResult">
    aiAnalysis?: JsonNullableWithAggregatesFilter<"MatchingResult">
    calculatedAt?: DateTimeWithAggregatesFilter<"MatchingResult"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"MatchingResult"> | Date | string
    organizationId?: StringWithAggregatesFilter<"MatchingResult"> | string
  }

  export type InterviewWhereInput = {
    AND?: InterviewWhereInput | InterviewWhereInput[]
    OR?: InterviewWhereInput[]
    NOT?: InterviewWhereInput | InterviewWhereInput[]
    id?: StringFilter<"Interview"> | string
    title?: StringFilter<"Interview"> | string
    type?: EnumInterviewTypeFilter<"Interview"> | $Enums.InterviewType
    status?: EnumInterviewStatusFilter<"Interview"> | $Enums.InterviewStatus
    scheduledAt?: DateTimeFilter<"Interview"> | Date | string
    duration?: IntFilter<"Interview"> | number
    timezone?: StringNullableFilter<"Interview"> | string | null
    location?: StringNullableFilter<"Interview"> | string | null
    notes?: StringNullableFilter<"Interview"> | string | null
    feedback?: StringNullableFilter<"Interview"> | string | null
    rating?: FloatNullableFilter<"Interview"> | number | null
    outcome?: EnumInterviewOutcomeNullableFilter<"Interview"> | $Enums.InterviewOutcome | null
    candidateId?: StringFilter<"Interview"> | string
    jobId?: StringFilter<"Interview"> | string
    applicationId?: StringNullableFilter<"Interview"> | string | null
    interviewerId?: StringFilter<"Interview"> | string
    createdAt?: DateTimeFilter<"Interview"> | Date | string
    updatedAt?: DateTimeFilter<"Interview"> | Date | string
    application?: XOR<JobApplicationNullableScalarRelationFilter, JobApplicationWhereInput> | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    interviewer?: XOR<UserScalarRelationFilter, UserWhereInput>
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }

  export type InterviewOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    type?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    timezone?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    outcome?: SortOrderInput | SortOrder
    candidateId?: SortOrder
    jobId?: SortOrder
    applicationId?: SortOrderInput | SortOrder
    interviewerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    application?: JobApplicationOrderByWithRelationInput
    candidate?: CandidateOrderByWithRelationInput
    interviewer?: UserOrderByWithRelationInput
    job?: JobOrderByWithRelationInput
  }

  export type InterviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InterviewWhereInput | InterviewWhereInput[]
    OR?: InterviewWhereInput[]
    NOT?: InterviewWhereInput | InterviewWhereInput[]
    title?: StringFilter<"Interview"> | string
    type?: EnumInterviewTypeFilter<"Interview"> | $Enums.InterviewType
    status?: EnumInterviewStatusFilter<"Interview"> | $Enums.InterviewStatus
    scheduledAt?: DateTimeFilter<"Interview"> | Date | string
    duration?: IntFilter<"Interview"> | number
    timezone?: StringNullableFilter<"Interview"> | string | null
    location?: StringNullableFilter<"Interview"> | string | null
    notes?: StringNullableFilter<"Interview"> | string | null
    feedback?: StringNullableFilter<"Interview"> | string | null
    rating?: FloatNullableFilter<"Interview"> | number | null
    outcome?: EnumInterviewOutcomeNullableFilter<"Interview"> | $Enums.InterviewOutcome | null
    candidateId?: StringFilter<"Interview"> | string
    jobId?: StringFilter<"Interview"> | string
    applicationId?: StringNullableFilter<"Interview"> | string | null
    interviewerId?: StringFilter<"Interview"> | string
    createdAt?: DateTimeFilter<"Interview"> | Date | string
    updatedAt?: DateTimeFilter<"Interview"> | Date | string
    application?: XOR<JobApplicationNullableScalarRelationFilter, JobApplicationWhereInput> | null
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    interviewer?: XOR<UserScalarRelationFilter, UserWhereInput>
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }, "id">

  export type InterviewOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    type?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    timezone?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    outcome?: SortOrderInput | SortOrder
    candidateId?: SortOrder
    jobId?: SortOrder
    applicationId?: SortOrderInput | SortOrder
    interviewerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InterviewCountOrderByAggregateInput
    _avg?: InterviewAvgOrderByAggregateInput
    _max?: InterviewMaxOrderByAggregateInput
    _min?: InterviewMinOrderByAggregateInput
    _sum?: InterviewSumOrderByAggregateInput
  }

  export type InterviewScalarWhereWithAggregatesInput = {
    AND?: InterviewScalarWhereWithAggregatesInput | InterviewScalarWhereWithAggregatesInput[]
    OR?: InterviewScalarWhereWithAggregatesInput[]
    NOT?: InterviewScalarWhereWithAggregatesInput | InterviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Interview"> | string
    title?: StringWithAggregatesFilter<"Interview"> | string
    type?: EnumInterviewTypeWithAggregatesFilter<"Interview"> | $Enums.InterviewType
    status?: EnumInterviewStatusWithAggregatesFilter<"Interview"> | $Enums.InterviewStatus
    scheduledAt?: DateTimeWithAggregatesFilter<"Interview"> | Date | string
    duration?: IntWithAggregatesFilter<"Interview"> | number
    timezone?: StringNullableWithAggregatesFilter<"Interview"> | string | null
    location?: StringNullableWithAggregatesFilter<"Interview"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Interview"> | string | null
    feedback?: StringNullableWithAggregatesFilter<"Interview"> | string | null
    rating?: FloatNullableWithAggregatesFilter<"Interview"> | number | null
    outcome?: EnumInterviewOutcomeNullableWithAggregatesFilter<"Interview"> | $Enums.InterviewOutcome | null
    candidateId?: StringWithAggregatesFilter<"Interview"> | string
    jobId?: StringWithAggregatesFilter<"Interview"> | string
    applicationId?: StringNullableWithAggregatesFilter<"Interview"> | string | null
    interviewerId?: StringWithAggregatesFilter<"Interview"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Interview"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Interview"> | Date | string
  }

  export type ActivityWhereInput = {
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    id?: StringFilter<"Activity"> | string
    type?: EnumActivityTypeFilter<"Activity"> | $Enums.ActivityType
    title?: StringFilter<"Activity"> | string
    description?: StringNullableFilter<"Activity"> | string | null
    metadata?: JsonNullableFilter<"Activity">
    userId?: StringNullableFilter<"Activity"> | string | null
    candidateId?: StringNullableFilter<"Activity"> | string | null
    jobId?: StringNullableFilter<"Activity"> | string | null
    applicationId?: StringNullableFilter<"Activity"> | string | null
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    application?: XOR<JobApplicationNullableScalarRelationFilter, JobApplicationWhereInput> | null
    candidate?: XOR<CandidateNullableScalarRelationFilter, CandidateWhereInput> | null
    job?: XOR<JobNullableScalarRelationFilter, JobWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ActivityOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    candidateId?: SortOrderInput | SortOrder
    jobId?: SortOrderInput | SortOrder
    applicationId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    application?: JobApplicationOrderByWithRelationInput
    candidate?: CandidateOrderByWithRelationInput
    job?: JobOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    type?: EnumActivityTypeFilter<"Activity"> | $Enums.ActivityType
    title?: StringFilter<"Activity"> | string
    description?: StringNullableFilter<"Activity"> | string | null
    metadata?: JsonNullableFilter<"Activity">
    userId?: StringNullableFilter<"Activity"> | string | null
    candidateId?: StringNullableFilter<"Activity"> | string | null
    jobId?: StringNullableFilter<"Activity"> | string | null
    applicationId?: StringNullableFilter<"Activity"> | string | null
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    application?: XOR<JobApplicationNullableScalarRelationFilter, JobApplicationWhereInput> | null
    candidate?: XOR<CandidateNullableScalarRelationFilter, CandidateWhereInput> | null
    job?: XOR<JobNullableScalarRelationFilter, JobWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type ActivityOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    candidateId?: SortOrderInput | SortOrder
    jobId?: SortOrderInput | SortOrder
    applicationId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ActivityCountOrderByAggregateInput
    _max?: ActivityMaxOrderByAggregateInput
    _min?: ActivityMinOrderByAggregateInput
  }

  export type ActivityScalarWhereWithAggregatesInput = {
    AND?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    OR?: ActivityScalarWhereWithAggregatesInput[]
    NOT?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Activity"> | string
    type?: EnumActivityTypeWithAggregatesFilter<"Activity"> | $Enums.ActivityType
    title?: StringWithAggregatesFilter<"Activity"> | string
    description?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Activity">
    userId?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    candidateId?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    jobId?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    applicationId?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Activity"> | Date | string
  }

  export type OrganizationCreateInput = {
    id?: string
    slug: string
    name: string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: string | null
    subdomain?: string | null
    plan?: $Enums.SubscriptionPlan
    maxUsers?: number
    maxJobs?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    contactEmail: string
    billingEmail?: string | null
    contactPhone?: string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateCreateNestedManyWithoutOrganizationInput
    companies?: CompanyCreateNestedManyWithoutOrganizationInput
    jobs?: JobCreateNestedManyWithoutOrganizationInput
    matchingResults?: MatchingResultCreateNestedManyWithoutOrganizationInput
    users?: UserCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: string
    slug: string
    name: string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: string | null
    subdomain?: string | null
    plan?: $Enums.SubscriptionPlan
    maxUsers?: number
    maxJobs?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    contactEmail: string
    billingEmail?: string | null
    contactPhone?: string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateUncheckedCreateNestedManyWithoutOrganizationInput
    companies?: CompanyUncheckedCreateNestedManyWithoutOrganizationInput
    jobs?: JobUncheckedCreateNestedManyWithoutOrganizationInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutOrganizationInput
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxJobs?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUpdateManyWithoutOrganizationNestedInput
    companies?: CompanyUpdateManyWithoutOrganizationNestedInput
    jobs?: JobUpdateManyWithoutOrganizationNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutOrganizationNestedInput
    users?: UserUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxJobs?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUncheckedUpdateManyWithoutOrganizationNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutOrganizationNestedInput
    jobs?: JobUncheckedUpdateManyWithoutOrganizationNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutOrganizationNestedInput
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: string
    slug: string
    name: string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: string | null
    subdomain?: string | null
    plan?: $Enums.SubscriptionPlan
    maxUsers?: number
    maxJobs?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    contactEmail: string
    billingEmail?: string | null
    contactPhone?: string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrganizationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxJobs?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxJobs?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    activities?: ActivityCreateNestedManyWithoutUserInput
    candidates?: CandidateCreateNestedManyWithoutAddedByInput
    conductedInterviews?: InterviewCreateNestedManyWithoutInterviewerInput
    jobs?: JobCreateNestedManyWithoutRecruiterInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    organizationId: string
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    candidates?: CandidateUncheckedCreateNestedManyWithoutAddedByInput
    conductedInterviews?: InterviewUncheckedCreateNestedManyWithoutInterviewerInput
    jobs?: JobUncheckedCreateNestedManyWithoutRecruiterInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    activities?: ActivityUpdateManyWithoutUserNestedInput
    candidates?: CandidateUpdateManyWithoutAddedByNestedInput
    conductedInterviews?: InterviewUpdateManyWithoutInterviewerNestedInput
    jobs?: JobUpdateManyWithoutRecruiterNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    candidates?: CandidateUncheckedUpdateManyWithoutAddedByNestedInput
    conductedInterviews?: InterviewUncheckedUpdateManyWithoutInterviewerNestedInput
    jobs?: JobUncheckedUpdateManyWithoutRecruiterNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    organizationId: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type CompanyCreateInput = {
    id?: string
    name: string
    description?: string | null
    website?: string | null
    logo?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateCreateNestedManyWithoutCompanyInput
    organization: OrganizationCreateNestedOneWithoutCompaniesInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    users?: UserCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    website?: string | null
    logo?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    candidates?: CandidateUncheckedCreateNestedManyWithoutCompanyInput
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUpdateManyWithoutCompanyNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutCompaniesNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    users?: UserUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    candidates?: CandidateUncheckedUpdateManyWithoutCompanyNestedInput
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    website?: string | null
    logo?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
  }

  export type CompanyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateCreateInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityCreateNestedManyWithoutCandidateInput
    addedBy: UserCreateNestedOneWithoutCandidatesInput
    company?: CompanyCreateNestedOneWithoutCandidatesInput
    organization: OrganizationCreateNestedOneWithoutCandidatesInput
    interviews?: InterviewCreateNestedManyWithoutCandidateInput
    applications?: JobApplicationCreateNestedManyWithoutCandidateInput
    matchingResults?: MatchingResultCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    companyId?: string | null
    addedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutCandidateInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutCandidateInput
    applications?: JobApplicationUncheckedCreateNestedManyWithoutCandidateInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutCandidateNestedInput
    addedBy?: UserUpdateOneRequiredWithoutCandidatesNestedInput
    company?: CompanyUpdateOneWithoutCandidatesNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutCandidatesNestedInput
    interviews?: InterviewUpdateManyWithoutCandidateNestedInput
    applications?: JobApplicationUpdateManyWithoutCandidateNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    addedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutCandidateNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutCandidateNestedInput
    applications?: JobApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateCreateManyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    companyId?: string | null
    addedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
  }

  export type CandidateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    addedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobCreateInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityCreateNestedManyWithoutJobInput
    interviews?: InterviewCreateNestedManyWithoutJobInput
    applications?: JobApplicationCreateNestedManyWithoutJobInput
    company: CompanyCreateNestedOneWithoutJobsInput
    organization: OrganizationCreateNestedOneWithoutJobsInput
    recruiter: UserCreateNestedOneWithoutJobsInput
    matchingResults?: MatchingResultCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    companyId: string
    recruiterId: string
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutJobInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutJobInput
    applications?: JobApplicationUncheckedCreateNestedManyWithoutJobInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutJobNestedInput
    interviews?: InterviewUpdateManyWithoutJobNestedInput
    applications?: JobApplicationUpdateManyWithoutJobNestedInput
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutJobsNestedInput
    recruiter?: UserUpdateOneRequiredWithoutJobsNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    recruiterId?: StringFieldUpdateOperationsInput | string
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutJobNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutJobNestedInput
    applications?: JobApplicationUncheckedUpdateManyWithoutJobNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobCreateManyInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    companyId: string
    recruiterId: string
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
  }

  export type JobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    recruiterId?: StringFieldUpdateOperationsInput | string
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobApplicationCreateInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    appliedAt?: Date | string
    coverLetter?: string | null
    notes?: string | null
    rating?: number | null
    fitScore?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityCreateNestedManyWithoutApplicationInput
    interviews?: InterviewCreateNestedManyWithoutApplicationInput
    candidate: CandidateCreateNestedOneWithoutApplicationsInput
    job: JobCreateNestedOneWithoutApplicationsInput
  }

  export type JobApplicationUncheckedCreateInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    appliedAt?: Date | string
    coverLetter?: string | null
    notes?: string | null
    rating?: number | null
    fitScore?: number | null
    candidateId: string
    jobId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityUncheckedCreateNestedManyWithoutApplicationInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type JobApplicationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUpdateManyWithoutApplicationNestedInput
    interviews?: InterviewUpdateManyWithoutApplicationNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutApplicationsNestedInput
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type JobApplicationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateId?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUncheckedUpdateManyWithoutApplicationNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type JobApplicationCreateManyInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    appliedAt?: Date | string
    coverLetter?: string | null
    notes?: string | null
    rating?: number | null
    fitScore?: number | null
    candidateId: string
    jobId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobApplicationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobApplicationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateId?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchingResultCreateInput = {
    id?: string
    score: number
    embeddingSimilarity: number
    skillMatches: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: Date | string
    expiresAt: Date | string
    candidate: CandidateCreateNestedOneWithoutMatchingResultsInput
    job: JobCreateNestedOneWithoutMatchingResultsInput
    organization: OrganizationCreateNestedOneWithoutMatchingResultsInput
  }

  export type MatchingResultUncheckedCreateInput = {
    id?: string
    jobId: string
    candidateId: string
    score: number
    embeddingSimilarity: number
    skillMatches: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: Date | string
    expiresAt: Date | string
    organizationId: string
  }

  export type MatchingResultUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    embeddingSimilarity?: FloatFieldUpdateOperationsInput | number
    skillMatches?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidateUpdateOneRequiredWithoutMatchingResultsNestedInput
    job?: JobUpdateOneRequiredWithoutMatchingResultsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutMatchingResultsNestedInput
  }

  export type MatchingResultUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    embeddingSimilarity?: FloatFieldUpdateOperationsInput | number
    skillMatches?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type MatchingResultCreateManyInput = {
    id?: string
    jobId: string
    candidateId: string
    score: number
    embeddingSimilarity: number
    skillMatches: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: Date | string
    expiresAt: Date | string
    organizationId: string
  }

  export type MatchingResultUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    embeddingSimilarity?: FloatFieldUpdateOperationsInput | number
    skillMatches?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchingResultUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    embeddingSimilarity?: FloatFieldUpdateOperationsInput | number
    skillMatches?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type InterviewCreateInput = {
    id?: string
    title: string
    type?: $Enums.InterviewType
    status?: $Enums.InterviewStatus
    scheduledAt: Date | string
    duration?: number
    timezone?: string | null
    location?: string | null
    notes?: string | null
    feedback?: string | null
    rating?: number | null
    outcome?: $Enums.InterviewOutcome | null
    createdAt?: Date | string
    updatedAt?: Date | string
    application?: JobApplicationCreateNestedOneWithoutInterviewsInput
    candidate: CandidateCreateNestedOneWithoutInterviewsInput
    interviewer: UserCreateNestedOneWithoutConductedInterviewsInput
    job: JobCreateNestedOneWithoutInterviewsInput
  }

  export type InterviewUncheckedCreateInput = {
    id?: string
    title: string
    type?: $Enums.InterviewType
    status?: $Enums.InterviewStatus
    scheduledAt: Date | string
    duration?: number
    timezone?: string | null
    location?: string | null
    notes?: string | null
    feedback?: string | null
    rating?: number | null
    outcome?: $Enums.InterviewOutcome | null
    candidateId: string
    jobId: string
    applicationId?: string | null
    interviewerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InterviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: JobApplicationUpdateOneWithoutInterviewsNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutInterviewsNestedInput
    interviewer?: UserUpdateOneRequiredWithoutConductedInterviewsNestedInput
    job?: JobUpdateOneRequiredWithoutInterviewsNestedInput
  }

  export type InterviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    candidateId?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewCreateManyInput = {
    id?: string
    title: string
    type?: $Enums.InterviewType
    status?: $Enums.InterviewStatus
    scheduledAt: Date | string
    duration?: number
    timezone?: string | null
    location?: string | null
    notes?: string | null
    feedback?: string | null
    rating?: number | null
    outcome?: $Enums.InterviewOutcome | null
    candidateId: string
    jobId: string
    applicationId?: string | null
    interviewerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InterviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    candidateId?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityCreateInput = {
    id?: string
    type: $Enums.ActivityType
    title: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    application?: JobApplicationCreateNestedOneWithoutActivitiesInput
    candidate?: CandidateCreateNestedOneWithoutActivitiesInput
    job?: JobCreateNestedOneWithoutActivitiesInput
    user?: UserCreateNestedOneWithoutActivitiesInput
  }

  export type ActivityUncheckedCreateInput = {
    id?: string
    type: $Enums.ActivityType
    title: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    candidateId?: string | null
    jobId?: string | null
    applicationId?: string | null
    createdAt?: Date | string
  }

  export type ActivityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: JobApplicationUpdateOneWithoutActivitiesNestedInput
    candidate?: CandidateUpdateOneWithoutActivitiesNestedInput
    job?: JobUpdateOneWithoutActivitiesNestedInput
    user?: UserUpdateOneWithoutActivitiesNestedInput
  }

  export type ActivityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityCreateManyInput = {
    id?: string
    type: $Enums.ActivityType
    title: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    candidateId?: string | null
    jobId?: string | null
    applicationId?: string | null
    createdAt?: Date | string
  }

  export type ActivityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumSubscriptionPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionPlan | EnumSubscriptionPlanFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionPlanFilter<$PrismaModel> | $Enums.SubscriptionPlan
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CandidateListRelationFilter = {
    every?: CandidateWhereInput
    some?: CandidateWhereInput
    none?: CandidateWhereInput
  }

  export type CompanyListRelationFilter = {
    every?: CompanyWhereInput
    some?: CompanyWhereInput
    none?: CompanyWhereInput
  }

  export type JobListRelationFilter = {
    every?: JobWhereInput
    some?: JobWhereInput
    none?: JobWhereInput
  }

  export type MatchingResultListRelationFilter = {
    every?: MatchingResultWhereInput
    some?: MatchingResultWhereInput
    none?: MatchingResultWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CandidateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchingResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    name?: SortOrder
    brandConfig?: SortOrder
    domain?: SortOrder
    subdomain?: SortOrder
    plan?: SortOrder
    maxUsers?: SortOrder
    maxJobs?: SortOrder
    isActive?: SortOrder
    trialEndsAt?: SortOrder
    contactEmail?: SortOrder
    billingEmail?: SortOrder
    contactPhone?: SortOrder
    billingAddress?: SortOrder
    features?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationAvgOrderByAggregateInput = {
    maxUsers?: SortOrder
    maxJobs?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    name?: SortOrder
    domain?: SortOrder
    subdomain?: SortOrder
    plan?: SortOrder
    maxUsers?: SortOrder
    maxJobs?: SortOrder
    isActive?: SortOrder
    trialEndsAt?: SortOrder
    contactEmail?: SortOrder
    billingEmail?: SortOrder
    contactPhone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    name?: SortOrder
    domain?: SortOrder
    subdomain?: SortOrder
    plan?: SortOrder
    maxUsers?: SortOrder
    maxJobs?: SortOrder
    isActive?: SortOrder
    trialEndsAt?: SortOrder
    contactEmail?: SortOrder
    billingEmail?: SortOrder
    contactPhone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationSumOrderByAggregateInput = {
    maxUsers?: SortOrder
    maxJobs?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumSubscriptionPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionPlan | EnumSubscriptionPlanFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionPlanWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionPlan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionPlanFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionPlanFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type ActivityListRelationFilter = {
    every?: ActivityWhereInput
    some?: ActivityWhereInput
    none?: ActivityWhereInput
  }

  export type InterviewListRelationFilter = {
    every?: InterviewWhereInput
    some?: InterviewWhereInput
    none?: InterviewWhereInput
  }

  export type CompanyNullableScalarRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type OrganizationScalarRelationFilter = {
    is?: OrganizationWhereInput
    isNot?: OrganizationWhereInput
  }

  export type ActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InterviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    role?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
    isActive?: SortOrder
    organizationId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    role?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
    isActive?: SortOrder
    organizationId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    role?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
    isActive?: SortOrder
    organizationId?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    website?: SortOrder
    logo?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    website?: SortOrder
    logo?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    website?: SortOrder
    logo?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
  }

  export type EnumCandidateStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CandidateStatus | EnumCandidateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCandidateStatusFilter<$PrismaModel> | $Enums.CandidateStatus
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type JobApplicationListRelationFilter = {
    every?: JobApplicationWhereInput
    some?: JobApplicationWhereInput
    none?: JobApplicationWhereInput
  }

  export type JobApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidateEmailOrganizationIdCompoundUniqueInput = {
    email: string
    organizationId: string
  }

  export type CandidateCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    linkedin?: SortOrder
    github?: SortOrder
    portfolio?: SortOrder
    resume?: SortOrder
    summary?: SortOrder
    resumeUrl?: SortOrder
    status?: SortOrder
    location?: SortOrder
    timezone?: SortOrder
    yearsOfExperience?: SortOrder
    currentSalary?: SortOrder
    expectedSalary?: SortOrder
    availability?: SortOrder
    source?: SortOrder
    notes?: SortOrder
    tags?: SortOrder
    companyId?: SortOrder
    addedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    certifications?: SortOrder
    currentRole?: SortOrder
    education?: SortOrder
    experience?: SortOrder
    industryExperience?: SortOrder
    projects?: SortOrder
    salaryExpectation?: SortOrder
    skills?: SortOrder
    embedding?: SortOrder
    embeddingAt?: SortOrder
    embeddingModel?: SortOrder
  }

  export type CandidateAvgOrderByAggregateInput = {
    yearsOfExperience?: SortOrder
    currentSalary?: SortOrder
    expectedSalary?: SortOrder
  }

  export type CandidateMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    linkedin?: SortOrder
    github?: SortOrder
    portfolio?: SortOrder
    resume?: SortOrder
    summary?: SortOrder
    resumeUrl?: SortOrder
    status?: SortOrder
    location?: SortOrder
    timezone?: SortOrder
    yearsOfExperience?: SortOrder
    currentSalary?: SortOrder
    expectedSalary?: SortOrder
    availability?: SortOrder
    source?: SortOrder
    notes?: SortOrder
    companyId?: SortOrder
    addedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    currentRole?: SortOrder
    embedding?: SortOrder
    embeddingAt?: SortOrder
    embeddingModel?: SortOrder
  }

  export type CandidateMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    linkedin?: SortOrder
    github?: SortOrder
    portfolio?: SortOrder
    resume?: SortOrder
    summary?: SortOrder
    resumeUrl?: SortOrder
    status?: SortOrder
    location?: SortOrder
    timezone?: SortOrder
    yearsOfExperience?: SortOrder
    currentSalary?: SortOrder
    expectedSalary?: SortOrder
    availability?: SortOrder
    source?: SortOrder
    notes?: SortOrder
    companyId?: SortOrder
    addedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    currentRole?: SortOrder
    embedding?: SortOrder
    embeddingAt?: SortOrder
    embeddingModel?: SortOrder
  }

  export type CandidateSumOrderByAggregateInput = {
    yearsOfExperience?: SortOrder
    currentSalary?: SortOrder
    expectedSalary?: SortOrder
  }

  export type EnumCandidateStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CandidateStatus | EnumCandidateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCandidateStatusWithAggregatesFilter<$PrismaModel> | $Enums.CandidateStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCandidateStatusFilter<$PrismaModel>
    _max?: NestedEnumCandidateStatusFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumJobTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeFilter<$PrismaModel> | $Enums.JobType
  }

  export type EnumJobLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.JobLevel | EnumJobLevelFieldRefInput<$PrismaModel>
    in?: $Enums.JobLevel[] | ListEnumJobLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobLevel[] | ListEnumJobLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumJobLevelFilter<$PrismaModel> | $Enums.JobLevel
  }

  export type EnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type EnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type CompanyScalarRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    requirements?: SortOrder
    department?: SortOrder
    location?: SortOrder
    remote?: SortOrder
    type?: SortOrder
    level?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    deadline?: SortOrder
    companyId?: SortOrder
    recruiterId?: SortOrder
    jobDescriptionUrl?: SortOrder
    aiGenerated?: SortOrder
    aiPrompt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    applicationInfo?: SortOrder
    benefits?: SortOrder
    metadata?: SortOrder
    requirementsDetailed?: SortOrder
    responsibilities?: SortOrder
    jobInfo?: SortOrder
    embedding?: SortOrder
    embeddingAt?: SortOrder
    embeddingModel?: SortOrder
  }

  export type JobAvgOrderByAggregateInput = {
    salaryMin?: SortOrder
    salaryMax?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    requirements?: SortOrder
    department?: SortOrder
    location?: SortOrder
    remote?: SortOrder
    type?: SortOrder
    level?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    deadline?: SortOrder
    companyId?: SortOrder
    recruiterId?: SortOrder
    jobDescriptionUrl?: SortOrder
    aiGenerated?: SortOrder
    aiPrompt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    embedding?: SortOrder
    embeddingAt?: SortOrder
    embeddingModel?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    requirements?: SortOrder
    department?: SortOrder
    location?: SortOrder
    remote?: SortOrder
    type?: SortOrder
    level?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    deadline?: SortOrder
    companyId?: SortOrder
    recruiterId?: SortOrder
    jobDescriptionUrl?: SortOrder
    aiGenerated?: SortOrder
    aiPrompt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    embedding?: SortOrder
    embeddingAt?: SortOrder
    embeddingModel?: SortOrder
  }

  export type JobSumOrderByAggregateInput = {
    salaryMin?: SortOrder
    salaryMax?: SortOrder
  }

  export type EnumJobTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeWithAggregatesFilter<$PrismaModel> | $Enums.JobType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobTypeFilter<$PrismaModel>
    _max?: NestedEnumJobTypeFilter<$PrismaModel>
  }

  export type EnumJobLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobLevel | EnumJobLevelFieldRefInput<$PrismaModel>
    in?: $Enums.JobLevel[] | ListEnumJobLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobLevel[] | ListEnumJobLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumJobLevelWithAggregatesFilter<$PrismaModel> | $Enums.JobLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobLevelFilter<$PrismaModel>
    _max?: NestedEnumJobLevelFilter<$PrismaModel>
  }

  export type EnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type EnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type EnumApplicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusFilter<$PrismaModel> | $Enums.ApplicationStatus
  }

  export type CandidateScalarRelationFilter = {
    is?: CandidateWhereInput
    isNot?: CandidateWhereInput
  }

  export type JobScalarRelationFilter = {
    is?: JobWhereInput
    isNot?: JobWhereInput
  }

  export type JobApplicationCandidateIdJobIdCompoundUniqueInput = {
    candidateId: string
    jobId: string
  }

  export type JobApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    appliedAt?: SortOrder
    coverLetter?: SortOrder
    notes?: SortOrder
    rating?: SortOrder
    fitScore?: SortOrder
    candidateId?: SortOrder
    jobId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobApplicationAvgOrderByAggregateInput = {
    rating?: SortOrder
    fitScore?: SortOrder
  }

  export type JobApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    appliedAt?: SortOrder
    coverLetter?: SortOrder
    notes?: SortOrder
    rating?: SortOrder
    fitScore?: SortOrder
    candidateId?: SortOrder
    jobId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    appliedAt?: SortOrder
    coverLetter?: SortOrder
    notes?: SortOrder
    rating?: SortOrder
    fitScore?: SortOrder
    candidateId?: SortOrder
    jobId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobApplicationSumOrderByAggregateInput = {
    rating?: SortOrder
    fitScore?: SortOrder
  }

  export type EnumApplicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type MatchingResultJobIdCandidateIdCompoundUniqueInput = {
    jobId: string
    candidateId: string
  }

  export type MatchingResultCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    score?: SortOrder
    embeddingSimilarity?: SortOrder
    skillMatches?: SortOrder
    aiAnalysis?: SortOrder
    calculatedAt?: SortOrder
    expiresAt?: SortOrder
    organizationId?: SortOrder
  }

  export type MatchingResultAvgOrderByAggregateInput = {
    score?: SortOrder
    embeddingSimilarity?: SortOrder
  }

  export type MatchingResultMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    score?: SortOrder
    embeddingSimilarity?: SortOrder
    calculatedAt?: SortOrder
    expiresAt?: SortOrder
    organizationId?: SortOrder
  }

  export type MatchingResultMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    score?: SortOrder
    embeddingSimilarity?: SortOrder
    calculatedAt?: SortOrder
    expiresAt?: SortOrder
    organizationId?: SortOrder
  }

  export type MatchingResultSumOrderByAggregateInput = {
    score?: SortOrder
    embeddingSimilarity?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumInterviewTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewType | EnumInterviewTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InterviewType[] | ListEnumInterviewTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterviewType[] | ListEnumInterviewTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInterviewTypeFilter<$PrismaModel> | $Enums.InterviewType
  }

  export type EnumInterviewStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewStatus | EnumInterviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInterviewStatusFilter<$PrismaModel> | $Enums.InterviewStatus
  }

  export type EnumInterviewOutcomeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewOutcome | EnumInterviewOutcomeFieldRefInput<$PrismaModel> | null
    in?: $Enums.InterviewOutcome[] | ListEnumInterviewOutcomeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.InterviewOutcome[] | ListEnumInterviewOutcomeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumInterviewOutcomeNullableFilter<$PrismaModel> | $Enums.InterviewOutcome | null
  }

  export type JobApplicationNullableScalarRelationFilter = {
    is?: JobApplicationWhereInput | null
    isNot?: JobApplicationWhereInput | null
  }

  export type InterviewCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    type?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    timezone?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    feedback?: SortOrder
    rating?: SortOrder
    outcome?: SortOrder
    candidateId?: SortOrder
    jobId?: SortOrder
    applicationId?: SortOrder
    interviewerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InterviewAvgOrderByAggregateInput = {
    duration?: SortOrder
    rating?: SortOrder
  }

  export type InterviewMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    type?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    timezone?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    feedback?: SortOrder
    rating?: SortOrder
    outcome?: SortOrder
    candidateId?: SortOrder
    jobId?: SortOrder
    applicationId?: SortOrder
    interviewerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InterviewMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    type?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    timezone?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    feedback?: SortOrder
    rating?: SortOrder
    outcome?: SortOrder
    candidateId?: SortOrder
    jobId?: SortOrder
    applicationId?: SortOrder
    interviewerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InterviewSumOrderByAggregateInput = {
    duration?: SortOrder
    rating?: SortOrder
  }

  export type EnumInterviewTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewType | EnumInterviewTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InterviewType[] | ListEnumInterviewTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterviewType[] | ListEnumInterviewTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInterviewTypeWithAggregatesFilter<$PrismaModel> | $Enums.InterviewType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInterviewTypeFilter<$PrismaModel>
    _max?: NestedEnumInterviewTypeFilter<$PrismaModel>
  }

  export type EnumInterviewStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewStatus | EnumInterviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInterviewStatusWithAggregatesFilter<$PrismaModel> | $Enums.InterviewStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInterviewStatusFilter<$PrismaModel>
    _max?: NestedEnumInterviewStatusFilter<$PrismaModel>
  }

  export type EnumInterviewOutcomeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewOutcome | EnumInterviewOutcomeFieldRefInput<$PrismaModel> | null
    in?: $Enums.InterviewOutcome[] | ListEnumInterviewOutcomeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.InterviewOutcome[] | ListEnumInterviewOutcomeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumInterviewOutcomeNullableWithAggregatesFilter<$PrismaModel> | $Enums.InterviewOutcome | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumInterviewOutcomeNullableFilter<$PrismaModel>
    _max?: NestedEnumInterviewOutcomeNullableFilter<$PrismaModel>
  }

  export type EnumActivityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityType | EnumActivityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActivityType[] | ListEnumActivityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActivityType[] | ListEnumActivityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumActivityTypeFilter<$PrismaModel> | $Enums.ActivityType
  }

  export type CandidateNullableScalarRelationFilter = {
    is?: CandidateWhereInput | null
    isNot?: CandidateWhereInput | null
  }

  export type JobNullableScalarRelationFilter = {
    is?: JobWhereInput | null
    isNot?: JobWhereInput | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ActivityCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    userId?: SortOrder
    candidateId?: SortOrder
    jobId?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    candidateId?: SortOrder
    jobId?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    candidateId?: SortOrder
    jobId?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumActivityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityType | EnumActivityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActivityType[] | ListEnumActivityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActivityType[] | ListEnumActivityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumActivityTypeWithAggregatesFilter<$PrismaModel> | $Enums.ActivityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActivityTypeFilter<$PrismaModel>
    _max?: NestedEnumActivityTypeFilter<$PrismaModel>
  }

  export type CandidateCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<CandidateCreateWithoutOrganizationInput, CandidateUncheckedCreateWithoutOrganizationInput> | CandidateCreateWithoutOrganizationInput[] | CandidateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutOrganizationInput | CandidateCreateOrConnectWithoutOrganizationInput[]
    createMany?: CandidateCreateManyOrganizationInputEnvelope
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
  }

  export type CompanyCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<CompanyCreateWithoutOrganizationInput, CompanyUncheckedCreateWithoutOrganizationInput> | CompanyCreateWithoutOrganizationInput[] | CompanyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOrganizationInput | CompanyCreateOrConnectWithoutOrganizationInput[]
    createMany?: CompanyCreateManyOrganizationInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type JobCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<JobCreateWithoutOrganizationInput, JobUncheckedCreateWithoutOrganizationInput> | JobCreateWithoutOrganizationInput[] | JobUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: JobCreateOrConnectWithoutOrganizationInput | JobCreateOrConnectWithoutOrganizationInput[]
    createMany?: JobCreateManyOrganizationInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type MatchingResultCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<MatchingResultCreateWithoutOrganizationInput, MatchingResultUncheckedCreateWithoutOrganizationInput> | MatchingResultCreateWithoutOrganizationInput[] | MatchingResultUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MatchingResultCreateOrConnectWithoutOrganizationInput | MatchingResultCreateOrConnectWithoutOrganizationInput[]
    createMany?: MatchingResultCreateManyOrganizationInputEnvelope
    connect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CandidateUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<CandidateCreateWithoutOrganizationInput, CandidateUncheckedCreateWithoutOrganizationInput> | CandidateCreateWithoutOrganizationInput[] | CandidateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutOrganizationInput | CandidateCreateOrConnectWithoutOrganizationInput[]
    createMany?: CandidateCreateManyOrganizationInputEnvelope
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<CompanyCreateWithoutOrganizationInput, CompanyUncheckedCreateWithoutOrganizationInput> | CompanyCreateWithoutOrganizationInput[] | CompanyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOrganizationInput | CompanyCreateOrConnectWithoutOrganizationInput[]
    createMany?: CompanyCreateManyOrganizationInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<JobCreateWithoutOrganizationInput, JobUncheckedCreateWithoutOrganizationInput> | JobCreateWithoutOrganizationInput[] | JobUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: JobCreateOrConnectWithoutOrganizationInput | JobCreateOrConnectWithoutOrganizationInput[]
    createMany?: JobCreateManyOrganizationInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type MatchingResultUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<MatchingResultCreateWithoutOrganizationInput, MatchingResultUncheckedCreateWithoutOrganizationInput> | MatchingResultCreateWithoutOrganizationInput[] | MatchingResultUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MatchingResultCreateOrConnectWithoutOrganizationInput | MatchingResultCreateOrConnectWithoutOrganizationInput[]
    createMany?: MatchingResultCreateManyOrganizationInputEnvelope
    connect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumSubscriptionPlanFieldUpdateOperationsInput = {
    set?: $Enums.SubscriptionPlan
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CandidateUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<CandidateCreateWithoutOrganizationInput, CandidateUncheckedCreateWithoutOrganizationInput> | CandidateCreateWithoutOrganizationInput[] | CandidateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutOrganizationInput | CandidateCreateOrConnectWithoutOrganizationInput[]
    upsert?: CandidateUpsertWithWhereUniqueWithoutOrganizationInput | CandidateUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: CandidateCreateManyOrganizationInputEnvelope
    set?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    disconnect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    delete?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    update?: CandidateUpdateWithWhereUniqueWithoutOrganizationInput | CandidateUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: CandidateUpdateManyWithWhereWithoutOrganizationInput | CandidateUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
  }

  export type CompanyUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<CompanyCreateWithoutOrganizationInput, CompanyUncheckedCreateWithoutOrganizationInput> | CompanyCreateWithoutOrganizationInput[] | CompanyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOrganizationInput | CompanyCreateOrConnectWithoutOrganizationInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutOrganizationInput | CompanyUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: CompanyCreateManyOrganizationInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutOrganizationInput | CompanyUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutOrganizationInput | CompanyUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type JobUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<JobCreateWithoutOrganizationInput, JobUncheckedCreateWithoutOrganizationInput> | JobCreateWithoutOrganizationInput[] | JobUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: JobCreateOrConnectWithoutOrganizationInput | JobCreateOrConnectWithoutOrganizationInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutOrganizationInput | JobUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: JobCreateManyOrganizationInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutOrganizationInput | JobUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: JobUpdateManyWithWhereWithoutOrganizationInput | JobUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type MatchingResultUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<MatchingResultCreateWithoutOrganizationInput, MatchingResultUncheckedCreateWithoutOrganizationInput> | MatchingResultCreateWithoutOrganizationInput[] | MatchingResultUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MatchingResultCreateOrConnectWithoutOrganizationInput | MatchingResultCreateOrConnectWithoutOrganizationInput[]
    upsert?: MatchingResultUpsertWithWhereUniqueWithoutOrganizationInput | MatchingResultUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: MatchingResultCreateManyOrganizationInputEnvelope
    set?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    disconnect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    delete?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    connect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    update?: MatchingResultUpdateWithWhereUniqueWithoutOrganizationInput | MatchingResultUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: MatchingResultUpdateManyWithWhereWithoutOrganizationInput | MatchingResultUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: MatchingResultScalarWhereInput | MatchingResultScalarWhereInput[]
  }

  export type UserUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CandidateUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<CandidateCreateWithoutOrganizationInput, CandidateUncheckedCreateWithoutOrganizationInput> | CandidateCreateWithoutOrganizationInput[] | CandidateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutOrganizationInput | CandidateCreateOrConnectWithoutOrganizationInput[]
    upsert?: CandidateUpsertWithWhereUniqueWithoutOrganizationInput | CandidateUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: CandidateCreateManyOrganizationInputEnvelope
    set?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    disconnect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    delete?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    update?: CandidateUpdateWithWhereUniqueWithoutOrganizationInput | CandidateUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: CandidateUpdateManyWithWhereWithoutOrganizationInput | CandidateUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<CompanyCreateWithoutOrganizationInput, CompanyUncheckedCreateWithoutOrganizationInput> | CompanyCreateWithoutOrganizationInput[] | CompanyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOrganizationInput | CompanyCreateOrConnectWithoutOrganizationInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutOrganizationInput | CompanyUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: CompanyCreateManyOrganizationInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutOrganizationInput | CompanyUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutOrganizationInput | CompanyUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type JobUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<JobCreateWithoutOrganizationInput, JobUncheckedCreateWithoutOrganizationInput> | JobCreateWithoutOrganizationInput[] | JobUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: JobCreateOrConnectWithoutOrganizationInput | JobCreateOrConnectWithoutOrganizationInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutOrganizationInput | JobUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: JobCreateManyOrganizationInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutOrganizationInput | JobUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: JobUpdateManyWithWhereWithoutOrganizationInput | JobUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type MatchingResultUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<MatchingResultCreateWithoutOrganizationInput, MatchingResultUncheckedCreateWithoutOrganizationInput> | MatchingResultCreateWithoutOrganizationInput[] | MatchingResultUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MatchingResultCreateOrConnectWithoutOrganizationInput | MatchingResultCreateOrConnectWithoutOrganizationInput[]
    upsert?: MatchingResultUpsertWithWhereUniqueWithoutOrganizationInput | MatchingResultUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: MatchingResultCreateManyOrganizationInputEnvelope
    set?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    disconnect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    delete?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    connect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    update?: MatchingResultUpdateWithWhereUniqueWithoutOrganizationInput | MatchingResultUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: MatchingResultUpdateManyWithWhereWithoutOrganizationInput | MatchingResultUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: MatchingResultScalarWhereInput | MatchingResultScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ActivityCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type CandidateCreateNestedManyWithoutAddedByInput = {
    create?: XOR<CandidateCreateWithoutAddedByInput, CandidateUncheckedCreateWithoutAddedByInput> | CandidateCreateWithoutAddedByInput[] | CandidateUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutAddedByInput | CandidateCreateOrConnectWithoutAddedByInput[]
    createMany?: CandidateCreateManyAddedByInputEnvelope
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
  }

  export type InterviewCreateNestedManyWithoutInterviewerInput = {
    create?: XOR<InterviewCreateWithoutInterviewerInput, InterviewUncheckedCreateWithoutInterviewerInput> | InterviewCreateWithoutInterviewerInput[] | InterviewUncheckedCreateWithoutInterviewerInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutInterviewerInput | InterviewCreateOrConnectWithoutInterviewerInput[]
    createMany?: InterviewCreateManyInterviewerInputEnvelope
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
  }

  export type JobCreateNestedManyWithoutRecruiterInput = {
    create?: XOR<JobCreateWithoutRecruiterInput, JobUncheckedCreateWithoutRecruiterInput> | JobCreateWithoutRecruiterInput[] | JobUncheckedCreateWithoutRecruiterInput[]
    connectOrCreate?: JobCreateOrConnectWithoutRecruiterInput | JobCreateOrConnectWithoutRecruiterInput[]
    createMany?: JobCreateManyRecruiterInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type CompanyCreateNestedOneWithoutUsersInput = {
    create?: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsersInput
    connect?: CompanyWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutUsersInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type ActivityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type CandidateUncheckedCreateNestedManyWithoutAddedByInput = {
    create?: XOR<CandidateCreateWithoutAddedByInput, CandidateUncheckedCreateWithoutAddedByInput> | CandidateCreateWithoutAddedByInput[] | CandidateUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutAddedByInput | CandidateCreateOrConnectWithoutAddedByInput[]
    createMany?: CandidateCreateManyAddedByInputEnvelope
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
  }

  export type InterviewUncheckedCreateNestedManyWithoutInterviewerInput = {
    create?: XOR<InterviewCreateWithoutInterviewerInput, InterviewUncheckedCreateWithoutInterviewerInput> | InterviewCreateWithoutInterviewerInput[] | InterviewUncheckedCreateWithoutInterviewerInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutInterviewerInput | InterviewCreateOrConnectWithoutInterviewerInput[]
    createMany?: InterviewCreateManyInterviewerInputEnvelope
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutRecruiterInput = {
    create?: XOR<JobCreateWithoutRecruiterInput, JobUncheckedCreateWithoutRecruiterInput> | JobCreateWithoutRecruiterInput[] | JobUncheckedCreateWithoutRecruiterInput[]
    connectOrCreate?: JobCreateOrConnectWithoutRecruiterInput | JobCreateOrConnectWithoutRecruiterInput[]
    createMany?: JobCreateManyRecruiterInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type ActivityUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutUserInput | ActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutUserInput | ActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutUserInput | ActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type CandidateUpdateManyWithoutAddedByNestedInput = {
    create?: XOR<CandidateCreateWithoutAddedByInput, CandidateUncheckedCreateWithoutAddedByInput> | CandidateCreateWithoutAddedByInput[] | CandidateUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutAddedByInput | CandidateCreateOrConnectWithoutAddedByInput[]
    upsert?: CandidateUpsertWithWhereUniqueWithoutAddedByInput | CandidateUpsertWithWhereUniqueWithoutAddedByInput[]
    createMany?: CandidateCreateManyAddedByInputEnvelope
    set?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    disconnect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    delete?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    update?: CandidateUpdateWithWhereUniqueWithoutAddedByInput | CandidateUpdateWithWhereUniqueWithoutAddedByInput[]
    updateMany?: CandidateUpdateManyWithWhereWithoutAddedByInput | CandidateUpdateManyWithWhereWithoutAddedByInput[]
    deleteMany?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
  }

  export type InterviewUpdateManyWithoutInterviewerNestedInput = {
    create?: XOR<InterviewCreateWithoutInterviewerInput, InterviewUncheckedCreateWithoutInterviewerInput> | InterviewCreateWithoutInterviewerInput[] | InterviewUncheckedCreateWithoutInterviewerInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutInterviewerInput | InterviewCreateOrConnectWithoutInterviewerInput[]
    upsert?: InterviewUpsertWithWhereUniqueWithoutInterviewerInput | InterviewUpsertWithWhereUniqueWithoutInterviewerInput[]
    createMany?: InterviewCreateManyInterviewerInputEnvelope
    set?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    disconnect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    delete?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    update?: InterviewUpdateWithWhereUniqueWithoutInterviewerInput | InterviewUpdateWithWhereUniqueWithoutInterviewerInput[]
    updateMany?: InterviewUpdateManyWithWhereWithoutInterviewerInput | InterviewUpdateManyWithWhereWithoutInterviewerInput[]
    deleteMany?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
  }

  export type JobUpdateManyWithoutRecruiterNestedInput = {
    create?: XOR<JobCreateWithoutRecruiterInput, JobUncheckedCreateWithoutRecruiterInput> | JobCreateWithoutRecruiterInput[] | JobUncheckedCreateWithoutRecruiterInput[]
    connectOrCreate?: JobCreateOrConnectWithoutRecruiterInput | JobCreateOrConnectWithoutRecruiterInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutRecruiterInput | JobUpsertWithWhereUniqueWithoutRecruiterInput[]
    createMany?: JobCreateManyRecruiterInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutRecruiterInput | JobUpdateWithWhereUniqueWithoutRecruiterInput[]
    updateMany?: JobUpdateManyWithWhereWithoutRecruiterInput | JobUpdateManyWithWhereWithoutRecruiterInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type CompanyUpdateOneWithoutUsersNestedInput = {
    create?: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsersInput
    upsert?: CompanyUpsertWithoutUsersInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUsersInput, CompanyUpdateWithoutUsersInput>, CompanyUncheckedUpdateWithoutUsersInput>
  }

  export type OrganizationUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    upsert?: OrganizationUpsertWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutUsersInput, OrganizationUpdateWithoutUsersInput>, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type ActivityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutUserInput | ActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutUserInput | ActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutUserInput | ActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type CandidateUncheckedUpdateManyWithoutAddedByNestedInput = {
    create?: XOR<CandidateCreateWithoutAddedByInput, CandidateUncheckedCreateWithoutAddedByInput> | CandidateCreateWithoutAddedByInput[] | CandidateUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutAddedByInput | CandidateCreateOrConnectWithoutAddedByInput[]
    upsert?: CandidateUpsertWithWhereUniqueWithoutAddedByInput | CandidateUpsertWithWhereUniqueWithoutAddedByInput[]
    createMany?: CandidateCreateManyAddedByInputEnvelope
    set?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    disconnect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    delete?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    update?: CandidateUpdateWithWhereUniqueWithoutAddedByInput | CandidateUpdateWithWhereUniqueWithoutAddedByInput[]
    updateMany?: CandidateUpdateManyWithWhereWithoutAddedByInput | CandidateUpdateManyWithWhereWithoutAddedByInput[]
    deleteMany?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
  }

  export type InterviewUncheckedUpdateManyWithoutInterviewerNestedInput = {
    create?: XOR<InterviewCreateWithoutInterviewerInput, InterviewUncheckedCreateWithoutInterviewerInput> | InterviewCreateWithoutInterviewerInput[] | InterviewUncheckedCreateWithoutInterviewerInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutInterviewerInput | InterviewCreateOrConnectWithoutInterviewerInput[]
    upsert?: InterviewUpsertWithWhereUniqueWithoutInterviewerInput | InterviewUpsertWithWhereUniqueWithoutInterviewerInput[]
    createMany?: InterviewCreateManyInterviewerInputEnvelope
    set?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    disconnect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    delete?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    update?: InterviewUpdateWithWhereUniqueWithoutInterviewerInput | InterviewUpdateWithWhereUniqueWithoutInterviewerInput[]
    updateMany?: InterviewUpdateManyWithWhereWithoutInterviewerInput | InterviewUpdateManyWithWhereWithoutInterviewerInput[]
    deleteMany?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
  }

  export type JobUncheckedUpdateManyWithoutRecruiterNestedInput = {
    create?: XOR<JobCreateWithoutRecruiterInput, JobUncheckedCreateWithoutRecruiterInput> | JobCreateWithoutRecruiterInput[] | JobUncheckedCreateWithoutRecruiterInput[]
    connectOrCreate?: JobCreateOrConnectWithoutRecruiterInput | JobCreateOrConnectWithoutRecruiterInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutRecruiterInput | JobUpsertWithWhereUniqueWithoutRecruiterInput[]
    createMany?: JobCreateManyRecruiterInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutRecruiterInput | JobUpdateWithWhereUniqueWithoutRecruiterInput[]
    updateMany?: JobUpdateManyWithWhereWithoutRecruiterInput | JobUpdateManyWithWhereWithoutRecruiterInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type CandidateCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CandidateCreateWithoutCompanyInput, CandidateUncheckedCreateWithoutCompanyInput> | CandidateCreateWithoutCompanyInput[] | CandidateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutCompanyInput | CandidateCreateOrConnectWithoutCompanyInput[]
    createMany?: CandidateCreateManyCompanyInputEnvelope
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
  }

  export type OrganizationCreateNestedOneWithoutCompaniesInput = {
    create?: XOR<OrganizationCreateWithoutCompaniesInput, OrganizationUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutCompaniesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type JobCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput> | JobCreateWithoutCompanyInput[] | JobUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCompanyInput | JobCreateOrConnectWithoutCompanyInput[]
    createMany?: JobCreateManyCompanyInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CandidateUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CandidateCreateWithoutCompanyInput, CandidateUncheckedCreateWithoutCompanyInput> | CandidateCreateWithoutCompanyInput[] | CandidateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutCompanyInput | CandidateCreateOrConnectWithoutCompanyInput[]
    createMany?: CandidateCreateManyCompanyInputEnvelope
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput> | JobCreateWithoutCompanyInput[] | JobUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCompanyInput | JobCreateOrConnectWithoutCompanyInput[]
    createMany?: JobCreateManyCompanyInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CandidateUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CandidateCreateWithoutCompanyInput, CandidateUncheckedCreateWithoutCompanyInput> | CandidateCreateWithoutCompanyInput[] | CandidateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutCompanyInput | CandidateCreateOrConnectWithoutCompanyInput[]
    upsert?: CandidateUpsertWithWhereUniqueWithoutCompanyInput | CandidateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CandidateCreateManyCompanyInputEnvelope
    set?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    disconnect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    delete?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    update?: CandidateUpdateWithWhereUniqueWithoutCompanyInput | CandidateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CandidateUpdateManyWithWhereWithoutCompanyInput | CandidateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutCompaniesNestedInput = {
    create?: XOR<OrganizationCreateWithoutCompaniesInput, OrganizationUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutCompaniesInput
    upsert?: OrganizationUpsertWithoutCompaniesInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutCompaniesInput, OrganizationUpdateWithoutCompaniesInput>, OrganizationUncheckedUpdateWithoutCompaniesInput>
  }

  export type JobUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput> | JobCreateWithoutCompanyInput[] | JobUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCompanyInput | JobCreateOrConnectWithoutCompanyInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutCompanyInput | JobUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobCreateManyCompanyInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutCompanyInput | JobUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobUpdateManyWithWhereWithoutCompanyInput | JobUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type UserUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCompanyInput | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCompanyInput | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCompanyInput | UserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CandidateUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CandidateCreateWithoutCompanyInput, CandidateUncheckedCreateWithoutCompanyInput> | CandidateCreateWithoutCompanyInput[] | CandidateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutCompanyInput | CandidateCreateOrConnectWithoutCompanyInput[]
    upsert?: CandidateUpsertWithWhereUniqueWithoutCompanyInput | CandidateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CandidateCreateManyCompanyInputEnvelope
    set?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    disconnect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    delete?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    update?: CandidateUpdateWithWhereUniqueWithoutCompanyInput | CandidateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CandidateUpdateManyWithWhereWithoutCompanyInput | CandidateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
  }

  export type JobUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput> | JobCreateWithoutCompanyInput[] | JobUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCompanyInput | JobCreateOrConnectWithoutCompanyInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutCompanyInput | JobUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobCreateManyCompanyInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutCompanyInput | JobUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobUpdateManyWithWhereWithoutCompanyInput | JobUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCompanyInput | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCompanyInput | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCompanyInput | UserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CandidateCreatetagsInput = {
    set: string[]
  }

  export type CandidateCreateindustryExperienceInput = {
    set: string[]
  }

  export type ActivityCreateNestedManyWithoutCandidateInput = {
    create?: XOR<ActivityCreateWithoutCandidateInput, ActivityUncheckedCreateWithoutCandidateInput> | ActivityCreateWithoutCandidateInput[] | ActivityUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutCandidateInput | ActivityCreateOrConnectWithoutCandidateInput[]
    createMany?: ActivityCreateManyCandidateInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCandidatesInput = {
    create?: XOR<UserCreateWithoutCandidatesInput, UserUncheckedCreateWithoutCandidatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCandidatesInput
    connect?: UserWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutCandidatesInput = {
    create?: XOR<CompanyCreateWithoutCandidatesInput, CompanyUncheckedCreateWithoutCandidatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCandidatesInput
    connect?: CompanyWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutCandidatesInput = {
    create?: XOR<OrganizationCreateWithoutCandidatesInput, OrganizationUncheckedCreateWithoutCandidatesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutCandidatesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type InterviewCreateNestedManyWithoutCandidateInput = {
    create?: XOR<InterviewCreateWithoutCandidateInput, InterviewUncheckedCreateWithoutCandidateInput> | InterviewCreateWithoutCandidateInput[] | InterviewUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutCandidateInput | InterviewCreateOrConnectWithoutCandidateInput[]
    createMany?: InterviewCreateManyCandidateInputEnvelope
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
  }

  export type JobApplicationCreateNestedManyWithoutCandidateInput = {
    create?: XOR<JobApplicationCreateWithoutCandidateInput, JobApplicationUncheckedCreateWithoutCandidateInput> | JobApplicationCreateWithoutCandidateInput[] | JobApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutCandidateInput | JobApplicationCreateOrConnectWithoutCandidateInput[]
    createMany?: JobApplicationCreateManyCandidateInputEnvelope
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
  }

  export type MatchingResultCreateNestedManyWithoutCandidateInput = {
    create?: XOR<MatchingResultCreateWithoutCandidateInput, MatchingResultUncheckedCreateWithoutCandidateInput> | MatchingResultCreateWithoutCandidateInput[] | MatchingResultUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: MatchingResultCreateOrConnectWithoutCandidateInput | MatchingResultCreateOrConnectWithoutCandidateInput[]
    createMany?: MatchingResultCreateManyCandidateInputEnvelope
    connect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
  }

  export type ActivityUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<ActivityCreateWithoutCandidateInput, ActivityUncheckedCreateWithoutCandidateInput> | ActivityCreateWithoutCandidateInput[] | ActivityUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutCandidateInput | ActivityCreateOrConnectWithoutCandidateInput[]
    createMany?: ActivityCreateManyCandidateInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type InterviewUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<InterviewCreateWithoutCandidateInput, InterviewUncheckedCreateWithoutCandidateInput> | InterviewCreateWithoutCandidateInput[] | InterviewUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutCandidateInput | InterviewCreateOrConnectWithoutCandidateInput[]
    createMany?: InterviewCreateManyCandidateInputEnvelope
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
  }

  export type JobApplicationUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<JobApplicationCreateWithoutCandidateInput, JobApplicationUncheckedCreateWithoutCandidateInput> | JobApplicationCreateWithoutCandidateInput[] | JobApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutCandidateInput | JobApplicationCreateOrConnectWithoutCandidateInput[]
    createMany?: JobApplicationCreateManyCandidateInputEnvelope
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
  }

  export type MatchingResultUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<MatchingResultCreateWithoutCandidateInput, MatchingResultUncheckedCreateWithoutCandidateInput> | MatchingResultCreateWithoutCandidateInput[] | MatchingResultUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: MatchingResultCreateOrConnectWithoutCandidateInput | MatchingResultCreateOrConnectWithoutCandidateInput[]
    createMany?: MatchingResultCreateManyCandidateInputEnvelope
    connect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
  }

  export type EnumCandidateStatusFieldUpdateOperationsInput = {
    set?: $Enums.CandidateStatus
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CandidateUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CandidateUpdateindustryExperienceInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ActivityUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<ActivityCreateWithoutCandidateInput, ActivityUncheckedCreateWithoutCandidateInput> | ActivityCreateWithoutCandidateInput[] | ActivityUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutCandidateInput | ActivityCreateOrConnectWithoutCandidateInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutCandidateInput | ActivityUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: ActivityCreateManyCandidateInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutCandidateInput | ActivityUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutCandidateInput | ActivityUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCandidatesNestedInput = {
    create?: XOR<UserCreateWithoutCandidatesInput, UserUncheckedCreateWithoutCandidatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCandidatesInput
    upsert?: UserUpsertWithoutCandidatesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCandidatesInput, UserUpdateWithoutCandidatesInput>, UserUncheckedUpdateWithoutCandidatesInput>
  }

  export type CompanyUpdateOneWithoutCandidatesNestedInput = {
    create?: XOR<CompanyCreateWithoutCandidatesInput, CompanyUncheckedCreateWithoutCandidatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCandidatesInput
    upsert?: CompanyUpsertWithoutCandidatesInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutCandidatesInput, CompanyUpdateWithoutCandidatesInput>, CompanyUncheckedUpdateWithoutCandidatesInput>
  }

  export type OrganizationUpdateOneRequiredWithoutCandidatesNestedInput = {
    create?: XOR<OrganizationCreateWithoutCandidatesInput, OrganizationUncheckedCreateWithoutCandidatesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutCandidatesInput
    upsert?: OrganizationUpsertWithoutCandidatesInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutCandidatesInput, OrganizationUpdateWithoutCandidatesInput>, OrganizationUncheckedUpdateWithoutCandidatesInput>
  }

  export type InterviewUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<InterviewCreateWithoutCandidateInput, InterviewUncheckedCreateWithoutCandidateInput> | InterviewCreateWithoutCandidateInput[] | InterviewUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutCandidateInput | InterviewCreateOrConnectWithoutCandidateInput[]
    upsert?: InterviewUpsertWithWhereUniqueWithoutCandidateInput | InterviewUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: InterviewCreateManyCandidateInputEnvelope
    set?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    disconnect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    delete?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    update?: InterviewUpdateWithWhereUniqueWithoutCandidateInput | InterviewUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: InterviewUpdateManyWithWhereWithoutCandidateInput | InterviewUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
  }

  export type JobApplicationUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<JobApplicationCreateWithoutCandidateInput, JobApplicationUncheckedCreateWithoutCandidateInput> | JobApplicationCreateWithoutCandidateInput[] | JobApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutCandidateInput | JobApplicationCreateOrConnectWithoutCandidateInput[]
    upsert?: JobApplicationUpsertWithWhereUniqueWithoutCandidateInput | JobApplicationUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: JobApplicationCreateManyCandidateInputEnvelope
    set?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    disconnect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    delete?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    update?: JobApplicationUpdateWithWhereUniqueWithoutCandidateInput | JobApplicationUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: JobApplicationUpdateManyWithWhereWithoutCandidateInput | JobApplicationUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: JobApplicationScalarWhereInput | JobApplicationScalarWhereInput[]
  }

  export type MatchingResultUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<MatchingResultCreateWithoutCandidateInput, MatchingResultUncheckedCreateWithoutCandidateInput> | MatchingResultCreateWithoutCandidateInput[] | MatchingResultUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: MatchingResultCreateOrConnectWithoutCandidateInput | MatchingResultCreateOrConnectWithoutCandidateInput[]
    upsert?: MatchingResultUpsertWithWhereUniqueWithoutCandidateInput | MatchingResultUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: MatchingResultCreateManyCandidateInputEnvelope
    set?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    disconnect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    delete?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    connect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    update?: MatchingResultUpdateWithWhereUniqueWithoutCandidateInput | MatchingResultUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: MatchingResultUpdateManyWithWhereWithoutCandidateInput | MatchingResultUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: MatchingResultScalarWhereInput | MatchingResultScalarWhereInput[]
  }

  export type ActivityUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<ActivityCreateWithoutCandidateInput, ActivityUncheckedCreateWithoutCandidateInput> | ActivityCreateWithoutCandidateInput[] | ActivityUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutCandidateInput | ActivityCreateOrConnectWithoutCandidateInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutCandidateInput | ActivityUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: ActivityCreateManyCandidateInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutCandidateInput | ActivityUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutCandidateInput | ActivityUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type InterviewUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<InterviewCreateWithoutCandidateInput, InterviewUncheckedCreateWithoutCandidateInput> | InterviewCreateWithoutCandidateInput[] | InterviewUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutCandidateInput | InterviewCreateOrConnectWithoutCandidateInput[]
    upsert?: InterviewUpsertWithWhereUniqueWithoutCandidateInput | InterviewUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: InterviewCreateManyCandidateInputEnvelope
    set?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    disconnect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    delete?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    update?: InterviewUpdateWithWhereUniqueWithoutCandidateInput | InterviewUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: InterviewUpdateManyWithWhereWithoutCandidateInput | InterviewUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
  }

  export type JobApplicationUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<JobApplicationCreateWithoutCandidateInput, JobApplicationUncheckedCreateWithoutCandidateInput> | JobApplicationCreateWithoutCandidateInput[] | JobApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutCandidateInput | JobApplicationCreateOrConnectWithoutCandidateInput[]
    upsert?: JobApplicationUpsertWithWhereUniqueWithoutCandidateInput | JobApplicationUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: JobApplicationCreateManyCandidateInputEnvelope
    set?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    disconnect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    delete?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    update?: JobApplicationUpdateWithWhereUniqueWithoutCandidateInput | JobApplicationUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: JobApplicationUpdateManyWithWhereWithoutCandidateInput | JobApplicationUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: JobApplicationScalarWhereInput | JobApplicationScalarWhereInput[]
  }

  export type MatchingResultUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<MatchingResultCreateWithoutCandidateInput, MatchingResultUncheckedCreateWithoutCandidateInput> | MatchingResultCreateWithoutCandidateInput[] | MatchingResultUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: MatchingResultCreateOrConnectWithoutCandidateInput | MatchingResultCreateOrConnectWithoutCandidateInput[]
    upsert?: MatchingResultUpsertWithWhereUniqueWithoutCandidateInput | MatchingResultUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: MatchingResultCreateManyCandidateInputEnvelope
    set?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    disconnect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    delete?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    connect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    update?: MatchingResultUpdateWithWhereUniqueWithoutCandidateInput | MatchingResultUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: MatchingResultUpdateManyWithWhereWithoutCandidateInput | MatchingResultUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: MatchingResultScalarWhereInput | MatchingResultScalarWhereInput[]
  }

  export type ActivityCreateNestedManyWithoutJobInput = {
    create?: XOR<ActivityCreateWithoutJobInput, ActivityUncheckedCreateWithoutJobInput> | ActivityCreateWithoutJobInput[] | ActivityUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutJobInput | ActivityCreateOrConnectWithoutJobInput[]
    createMany?: ActivityCreateManyJobInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type InterviewCreateNestedManyWithoutJobInput = {
    create?: XOR<InterviewCreateWithoutJobInput, InterviewUncheckedCreateWithoutJobInput> | InterviewCreateWithoutJobInput[] | InterviewUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutJobInput | InterviewCreateOrConnectWithoutJobInput[]
    createMany?: InterviewCreateManyJobInputEnvelope
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
  }

  export type JobApplicationCreateNestedManyWithoutJobInput = {
    create?: XOR<JobApplicationCreateWithoutJobInput, JobApplicationUncheckedCreateWithoutJobInput> | JobApplicationCreateWithoutJobInput[] | JobApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutJobInput | JobApplicationCreateOrConnectWithoutJobInput[]
    createMany?: JobApplicationCreateManyJobInputEnvelope
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
  }

  export type CompanyCreateNestedOneWithoutJobsInput = {
    create?: XOR<CompanyCreateWithoutJobsInput, CompanyUncheckedCreateWithoutJobsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutJobsInput
    connect?: CompanyWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutJobsInput = {
    create?: XOR<OrganizationCreateWithoutJobsInput, OrganizationUncheckedCreateWithoutJobsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutJobsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutJobsInput = {
    create?: XOR<UserCreateWithoutJobsInput, UserUncheckedCreateWithoutJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobsInput
    connect?: UserWhereUniqueInput
  }

  export type MatchingResultCreateNestedManyWithoutJobInput = {
    create?: XOR<MatchingResultCreateWithoutJobInput, MatchingResultUncheckedCreateWithoutJobInput> | MatchingResultCreateWithoutJobInput[] | MatchingResultUncheckedCreateWithoutJobInput[]
    connectOrCreate?: MatchingResultCreateOrConnectWithoutJobInput | MatchingResultCreateOrConnectWithoutJobInput[]
    createMany?: MatchingResultCreateManyJobInputEnvelope
    connect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
  }

  export type ActivityUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<ActivityCreateWithoutJobInput, ActivityUncheckedCreateWithoutJobInput> | ActivityCreateWithoutJobInput[] | ActivityUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutJobInput | ActivityCreateOrConnectWithoutJobInput[]
    createMany?: ActivityCreateManyJobInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type InterviewUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<InterviewCreateWithoutJobInput, InterviewUncheckedCreateWithoutJobInput> | InterviewCreateWithoutJobInput[] | InterviewUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutJobInput | InterviewCreateOrConnectWithoutJobInput[]
    createMany?: InterviewCreateManyJobInputEnvelope
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
  }

  export type JobApplicationUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<JobApplicationCreateWithoutJobInput, JobApplicationUncheckedCreateWithoutJobInput> | JobApplicationCreateWithoutJobInput[] | JobApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutJobInput | JobApplicationCreateOrConnectWithoutJobInput[]
    createMany?: JobApplicationCreateManyJobInputEnvelope
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
  }

  export type MatchingResultUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<MatchingResultCreateWithoutJobInput, MatchingResultUncheckedCreateWithoutJobInput> | MatchingResultCreateWithoutJobInput[] | MatchingResultUncheckedCreateWithoutJobInput[]
    connectOrCreate?: MatchingResultCreateOrConnectWithoutJobInput | MatchingResultCreateOrConnectWithoutJobInput[]
    createMany?: MatchingResultCreateManyJobInputEnvelope
    connect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
  }

  export type EnumJobTypeFieldUpdateOperationsInput = {
    set?: $Enums.JobType
  }

  export type EnumJobLevelFieldUpdateOperationsInput = {
    set?: $Enums.JobLevel
  }

  export type EnumJobStatusFieldUpdateOperationsInput = {
    set?: $Enums.JobStatus
  }

  export type EnumPriorityFieldUpdateOperationsInput = {
    set?: $Enums.Priority
  }

  export type ActivityUpdateManyWithoutJobNestedInput = {
    create?: XOR<ActivityCreateWithoutJobInput, ActivityUncheckedCreateWithoutJobInput> | ActivityCreateWithoutJobInput[] | ActivityUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutJobInput | ActivityCreateOrConnectWithoutJobInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutJobInput | ActivityUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: ActivityCreateManyJobInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutJobInput | ActivityUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutJobInput | ActivityUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type InterviewUpdateManyWithoutJobNestedInput = {
    create?: XOR<InterviewCreateWithoutJobInput, InterviewUncheckedCreateWithoutJobInput> | InterviewCreateWithoutJobInput[] | InterviewUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutJobInput | InterviewCreateOrConnectWithoutJobInput[]
    upsert?: InterviewUpsertWithWhereUniqueWithoutJobInput | InterviewUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: InterviewCreateManyJobInputEnvelope
    set?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    disconnect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    delete?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    update?: InterviewUpdateWithWhereUniqueWithoutJobInput | InterviewUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: InterviewUpdateManyWithWhereWithoutJobInput | InterviewUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
  }

  export type JobApplicationUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobApplicationCreateWithoutJobInput, JobApplicationUncheckedCreateWithoutJobInput> | JobApplicationCreateWithoutJobInput[] | JobApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutJobInput | JobApplicationCreateOrConnectWithoutJobInput[]
    upsert?: JobApplicationUpsertWithWhereUniqueWithoutJobInput | JobApplicationUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobApplicationCreateManyJobInputEnvelope
    set?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    disconnect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    delete?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    update?: JobApplicationUpdateWithWhereUniqueWithoutJobInput | JobApplicationUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobApplicationUpdateManyWithWhereWithoutJobInput | JobApplicationUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobApplicationScalarWhereInput | JobApplicationScalarWhereInput[]
  }

  export type CompanyUpdateOneRequiredWithoutJobsNestedInput = {
    create?: XOR<CompanyCreateWithoutJobsInput, CompanyUncheckedCreateWithoutJobsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutJobsInput
    upsert?: CompanyUpsertWithoutJobsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutJobsInput, CompanyUpdateWithoutJobsInput>, CompanyUncheckedUpdateWithoutJobsInput>
  }

  export type OrganizationUpdateOneRequiredWithoutJobsNestedInput = {
    create?: XOR<OrganizationCreateWithoutJobsInput, OrganizationUncheckedCreateWithoutJobsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutJobsInput
    upsert?: OrganizationUpsertWithoutJobsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutJobsInput, OrganizationUpdateWithoutJobsInput>, OrganizationUncheckedUpdateWithoutJobsInput>
  }

  export type UserUpdateOneRequiredWithoutJobsNestedInput = {
    create?: XOR<UserCreateWithoutJobsInput, UserUncheckedCreateWithoutJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobsInput
    upsert?: UserUpsertWithoutJobsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutJobsInput, UserUpdateWithoutJobsInput>, UserUncheckedUpdateWithoutJobsInput>
  }

  export type MatchingResultUpdateManyWithoutJobNestedInput = {
    create?: XOR<MatchingResultCreateWithoutJobInput, MatchingResultUncheckedCreateWithoutJobInput> | MatchingResultCreateWithoutJobInput[] | MatchingResultUncheckedCreateWithoutJobInput[]
    connectOrCreate?: MatchingResultCreateOrConnectWithoutJobInput | MatchingResultCreateOrConnectWithoutJobInput[]
    upsert?: MatchingResultUpsertWithWhereUniqueWithoutJobInput | MatchingResultUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: MatchingResultCreateManyJobInputEnvelope
    set?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    disconnect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    delete?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    connect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    update?: MatchingResultUpdateWithWhereUniqueWithoutJobInput | MatchingResultUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: MatchingResultUpdateManyWithWhereWithoutJobInput | MatchingResultUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: MatchingResultScalarWhereInput | MatchingResultScalarWhereInput[]
  }

  export type ActivityUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<ActivityCreateWithoutJobInput, ActivityUncheckedCreateWithoutJobInput> | ActivityCreateWithoutJobInput[] | ActivityUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutJobInput | ActivityCreateOrConnectWithoutJobInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutJobInput | ActivityUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: ActivityCreateManyJobInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutJobInput | ActivityUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutJobInput | ActivityUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type InterviewUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<InterviewCreateWithoutJobInput, InterviewUncheckedCreateWithoutJobInput> | InterviewCreateWithoutJobInput[] | InterviewUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutJobInput | InterviewCreateOrConnectWithoutJobInput[]
    upsert?: InterviewUpsertWithWhereUniqueWithoutJobInput | InterviewUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: InterviewCreateManyJobInputEnvelope
    set?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    disconnect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    delete?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    update?: InterviewUpdateWithWhereUniqueWithoutJobInput | InterviewUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: InterviewUpdateManyWithWhereWithoutJobInput | InterviewUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
  }

  export type JobApplicationUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobApplicationCreateWithoutJobInput, JobApplicationUncheckedCreateWithoutJobInput> | JobApplicationCreateWithoutJobInput[] | JobApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobApplicationCreateOrConnectWithoutJobInput | JobApplicationCreateOrConnectWithoutJobInput[]
    upsert?: JobApplicationUpsertWithWhereUniqueWithoutJobInput | JobApplicationUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobApplicationCreateManyJobInputEnvelope
    set?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    disconnect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    delete?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    connect?: JobApplicationWhereUniqueInput | JobApplicationWhereUniqueInput[]
    update?: JobApplicationUpdateWithWhereUniqueWithoutJobInput | JobApplicationUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobApplicationUpdateManyWithWhereWithoutJobInput | JobApplicationUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobApplicationScalarWhereInput | JobApplicationScalarWhereInput[]
  }

  export type MatchingResultUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<MatchingResultCreateWithoutJobInput, MatchingResultUncheckedCreateWithoutJobInput> | MatchingResultCreateWithoutJobInput[] | MatchingResultUncheckedCreateWithoutJobInput[]
    connectOrCreate?: MatchingResultCreateOrConnectWithoutJobInput | MatchingResultCreateOrConnectWithoutJobInput[]
    upsert?: MatchingResultUpsertWithWhereUniqueWithoutJobInput | MatchingResultUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: MatchingResultCreateManyJobInputEnvelope
    set?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    disconnect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    delete?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    connect?: MatchingResultWhereUniqueInput | MatchingResultWhereUniqueInput[]
    update?: MatchingResultUpdateWithWhereUniqueWithoutJobInput | MatchingResultUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: MatchingResultUpdateManyWithWhereWithoutJobInput | MatchingResultUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: MatchingResultScalarWhereInput | MatchingResultScalarWhereInput[]
  }

  export type ActivityCreateNestedManyWithoutApplicationInput = {
    create?: XOR<ActivityCreateWithoutApplicationInput, ActivityUncheckedCreateWithoutApplicationInput> | ActivityCreateWithoutApplicationInput[] | ActivityUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutApplicationInput | ActivityCreateOrConnectWithoutApplicationInput[]
    createMany?: ActivityCreateManyApplicationInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type InterviewCreateNestedManyWithoutApplicationInput = {
    create?: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput> | InterviewCreateWithoutApplicationInput[] | InterviewUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutApplicationInput | InterviewCreateOrConnectWithoutApplicationInput[]
    createMany?: InterviewCreateManyApplicationInputEnvelope
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
  }

  export type CandidateCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutApplicationsInput
    connect?: CandidateWhereUniqueInput
  }

  export type JobCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobCreateOrConnectWithoutApplicationsInput
    connect?: JobWhereUniqueInput
  }

  export type ActivityUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<ActivityCreateWithoutApplicationInput, ActivityUncheckedCreateWithoutApplicationInput> | ActivityCreateWithoutApplicationInput[] | ActivityUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutApplicationInput | ActivityCreateOrConnectWithoutApplicationInput[]
    createMany?: ActivityCreateManyApplicationInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type InterviewUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput> | InterviewCreateWithoutApplicationInput[] | InterviewUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutApplicationInput | InterviewCreateOrConnectWithoutApplicationInput[]
    createMany?: InterviewCreateManyApplicationInputEnvelope
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
  }

  export type EnumApplicationStatusFieldUpdateOperationsInput = {
    set?: $Enums.ApplicationStatus
  }

  export type ActivityUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<ActivityCreateWithoutApplicationInput, ActivityUncheckedCreateWithoutApplicationInput> | ActivityCreateWithoutApplicationInput[] | ActivityUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutApplicationInput | ActivityCreateOrConnectWithoutApplicationInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutApplicationInput | ActivityUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: ActivityCreateManyApplicationInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutApplicationInput | ActivityUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutApplicationInput | ActivityUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type InterviewUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput> | InterviewCreateWithoutApplicationInput[] | InterviewUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutApplicationInput | InterviewCreateOrConnectWithoutApplicationInput[]
    upsert?: InterviewUpsertWithWhereUniqueWithoutApplicationInput | InterviewUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: InterviewCreateManyApplicationInputEnvelope
    set?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    disconnect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    delete?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    update?: InterviewUpdateWithWhereUniqueWithoutApplicationInput | InterviewUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: InterviewUpdateManyWithWhereWithoutApplicationInput | InterviewUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
  }

  export type CandidateUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutApplicationsInput
    upsert?: CandidateUpsertWithoutApplicationsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutApplicationsInput, CandidateUpdateWithoutApplicationsInput>, CandidateUncheckedUpdateWithoutApplicationsInput>
  }

  export type JobUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobCreateOrConnectWithoutApplicationsInput
    upsert?: JobUpsertWithoutApplicationsInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutApplicationsInput, JobUpdateWithoutApplicationsInput>, JobUncheckedUpdateWithoutApplicationsInput>
  }

  export type ActivityUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<ActivityCreateWithoutApplicationInput, ActivityUncheckedCreateWithoutApplicationInput> | ActivityCreateWithoutApplicationInput[] | ActivityUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutApplicationInput | ActivityCreateOrConnectWithoutApplicationInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutApplicationInput | ActivityUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: ActivityCreateManyApplicationInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutApplicationInput | ActivityUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutApplicationInput | ActivityUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type InterviewUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput> | InterviewCreateWithoutApplicationInput[] | InterviewUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutApplicationInput | InterviewCreateOrConnectWithoutApplicationInput[]
    upsert?: InterviewUpsertWithWhereUniqueWithoutApplicationInput | InterviewUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: InterviewCreateManyApplicationInputEnvelope
    set?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    disconnect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    delete?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    update?: InterviewUpdateWithWhereUniqueWithoutApplicationInput | InterviewUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: InterviewUpdateManyWithWhereWithoutApplicationInput | InterviewUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
  }

  export type CandidateCreateNestedOneWithoutMatchingResultsInput = {
    create?: XOR<CandidateCreateWithoutMatchingResultsInput, CandidateUncheckedCreateWithoutMatchingResultsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutMatchingResultsInput
    connect?: CandidateWhereUniqueInput
  }

  export type JobCreateNestedOneWithoutMatchingResultsInput = {
    create?: XOR<JobCreateWithoutMatchingResultsInput, JobUncheckedCreateWithoutMatchingResultsInput>
    connectOrCreate?: JobCreateOrConnectWithoutMatchingResultsInput
    connect?: JobWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutMatchingResultsInput = {
    create?: XOR<OrganizationCreateWithoutMatchingResultsInput, OrganizationUncheckedCreateWithoutMatchingResultsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMatchingResultsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CandidateUpdateOneRequiredWithoutMatchingResultsNestedInput = {
    create?: XOR<CandidateCreateWithoutMatchingResultsInput, CandidateUncheckedCreateWithoutMatchingResultsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutMatchingResultsInput
    upsert?: CandidateUpsertWithoutMatchingResultsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutMatchingResultsInput, CandidateUpdateWithoutMatchingResultsInput>, CandidateUncheckedUpdateWithoutMatchingResultsInput>
  }

  export type JobUpdateOneRequiredWithoutMatchingResultsNestedInput = {
    create?: XOR<JobCreateWithoutMatchingResultsInput, JobUncheckedCreateWithoutMatchingResultsInput>
    connectOrCreate?: JobCreateOrConnectWithoutMatchingResultsInput
    upsert?: JobUpsertWithoutMatchingResultsInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutMatchingResultsInput, JobUpdateWithoutMatchingResultsInput>, JobUncheckedUpdateWithoutMatchingResultsInput>
  }

  export type OrganizationUpdateOneRequiredWithoutMatchingResultsNestedInput = {
    create?: XOR<OrganizationCreateWithoutMatchingResultsInput, OrganizationUncheckedCreateWithoutMatchingResultsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMatchingResultsInput
    upsert?: OrganizationUpsertWithoutMatchingResultsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutMatchingResultsInput, OrganizationUpdateWithoutMatchingResultsInput>, OrganizationUncheckedUpdateWithoutMatchingResultsInput>
  }

  export type JobApplicationCreateNestedOneWithoutInterviewsInput = {
    create?: XOR<JobApplicationCreateWithoutInterviewsInput, JobApplicationUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: JobApplicationCreateOrConnectWithoutInterviewsInput
    connect?: JobApplicationWhereUniqueInput
  }

  export type CandidateCreateNestedOneWithoutInterviewsInput = {
    create?: XOR<CandidateCreateWithoutInterviewsInput, CandidateUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutInterviewsInput
    connect?: CandidateWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutConductedInterviewsInput = {
    create?: XOR<UserCreateWithoutConductedInterviewsInput, UserUncheckedCreateWithoutConductedInterviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConductedInterviewsInput
    connect?: UserWhereUniqueInput
  }

  export type JobCreateNestedOneWithoutInterviewsInput = {
    create?: XOR<JobCreateWithoutInterviewsInput, JobUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: JobCreateOrConnectWithoutInterviewsInput
    connect?: JobWhereUniqueInput
  }

  export type EnumInterviewTypeFieldUpdateOperationsInput = {
    set?: $Enums.InterviewType
  }

  export type EnumInterviewStatusFieldUpdateOperationsInput = {
    set?: $Enums.InterviewStatus
  }

  export type NullableEnumInterviewOutcomeFieldUpdateOperationsInput = {
    set?: $Enums.InterviewOutcome | null
  }

  export type JobApplicationUpdateOneWithoutInterviewsNestedInput = {
    create?: XOR<JobApplicationCreateWithoutInterviewsInput, JobApplicationUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: JobApplicationCreateOrConnectWithoutInterviewsInput
    upsert?: JobApplicationUpsertWithoutInterviewsInput
    disconnect?: JobApplicationWhereInput | boolean
    delete?: JobApplicationWhereInput | boolean
    connect?: JobApplicationWhereUniqueInput
    update?: XOR<XOR<JobApplicationUpdateToOneWithWhereWithoutInterviewsInput, JobApplicationUpdateWithoutInterviewsInput>, JobApplicationUncheckedUpdateWithoutInterviewsInput>
  }

  export type CandidateUpdateOneRequiredWithoutInterviewsNestedInput = {
    create?: XOR<CandidateCreateWithoutInterviewsInput, CandidateUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutInterviewsInput
    upsert?: CandidateUpsertWithoutInterviewsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutInterviewsInput, CandidateUpdateWithoutInterviewsInput>, CandidateUncheckedUpdateWithoutInterviewsInput>
  }

  export type UserUpdateOneRequiredWithoutConductedInterviewsNestedInput = {
    create?: XOR<UserCreateWithoutConductedInterviewsInput, UserUncheckedCreateWithoutConductedInterviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConductedInterviewsInput
    upsert?: UserUpsertWithoutConductedInterviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConductedInterviewsInput, UserUpdateWithoutConductedInterviewsInput>, UserUncheckedUpdateWithoutConductedInterviewsInput>
  }

  export type JobUpdateOneRequiredWithoutInterviewsNestedInput = {
    create?: XOR<JobCreateWithoutInterviewsInput, JobUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: JobCreateOrConnectWithoutInterviewsInput
    upsert?: JobUpsertWithoutInterviewsInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutInterviewsInput, JobUpdateWithoutInterviewsInput>, JobUncheckedUpdateWithoutInterviewsInput>
  }

  export type JobApplicationCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<JobApplicationCreateWithoutActivitiesInput, JobApplicationUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: JobApplicationCreateOrConnectWithoutActivitiesInput
    connect?: JobApplicationWhereUniqueInput
  }

  export type CandidateCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<CandidateCreateWithoutActivitiesInput, CandidateUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutActivitiesInput
    connect?: CandidateWhereUniqueInput
  }

  export type JobCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<JobCreateWithoutActivitiesInput, JobUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: JobCreateOrConnectWithoutActivitiesInput
    connect?: JobWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumActivityTypeFieldUpdateOperationsInput = {
    set?: $Enums.ActivityType
  }

  export type JobApplicationUpdateOneWithoutActivitiesNestedInput = {
    create?: XOR<JobApplicationCreateWithoutActivitiesInput, JobApplicationUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: JobApplicationCreateOrConnectWithoutActivitiesInput
    upsert?: JobApplicationUpsertWithoutActivitiesInput
    disconnect?: JobApplicationWhereInput | boolean
    delete?: JobApplicationWhereInput | boolean
    connect?: JobApplicationWhereUniqueInput
    update?: XOR<XOR<JobApplicationUpdateToOneWithWhereWithoutActivitiesInput, JobApplicationUpdateWithoutActivitiesInput>, JobApplicationUncheckedUpdateWithoutActivitiesInput>
  }

  export type CandidateUpdateOneWithoutActivitiesNestedInput = {
    create?: XOR<CandidateCreateWithoutActivitiesInput, CandidateUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutActivitiesInput
    upsert?: CandidateUpsertWithoutActivitiesInput
    disconnect?: CandidateWhereInput | boolean
    delete?: CandidateWhereInput | boolean
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutActivitiesInput, CandidateUpdateWithoutActivitiesInput>, CandidateUncheckedUpdateWithoutActivitiesInput>
  }

  export type JobUpdateOneWithoutActivitiesNestedInput = {
    create?: XOR<JobCreateWithoutActivitiesInput, JobUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: JobCreateOrConnectWithoutActivitiesInput
    upsert?: JobUpsertWithoutActivitiesInput
    disconnect?: JobWhereInput | boolean
    delete?: JobWhereInput | boolean
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutActivitiesInput, JobUpdateWithoutActivitiesInput>, JobUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserUpdateOneWithoutActivitiesNestedInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    upsert?: UserUpsertWithoutActivitiesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivitiesInput, UserUpdateWithoutActivitiesInput>, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumSubscriptionPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionPlan | EnumSubscriptionPlanFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionPlanFilter<$PrismaModel> | $Enums.SubscriptionPlan
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumSubscriptionPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionPlan | EnumSubscriptionPlanFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionPlanWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionPlan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionPlanFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionPlanFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumCandidateStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CandidateStatus | EnumCandidateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCandidateStatusFilter<$PrismaModel> | $Enums.CandidateStatus
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumCandidateStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CandidateStatus | EnumCandidateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCandidateStatusWithAggregatesFilter<$PrismaModel> | $Enums.CandidateStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCandidateStatusFilter<$PrismaModel>
    _max?: NestedEnumCandidateStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumJobTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeFilter<$PrismaModel> | $Enums.JobType
  }

  export type NestedEnumJobLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.JobLevel | EnumJobLevelFieldRefInput<$PrismaModel>
    in?: $Enums.JobLevel[] | ListEnumJobLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobLevel[] | ListEnumJobLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumJobLevelFilter<$PrismaModel> | $Enums.JobLevel
  }

  export type NestedEnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type NestedEnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type NestedEnumJobTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeWithAggregatesFilter<$PrismaModel> | $Enums.JobType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobTypeFilter<$PrismaModel>
    _max?: NestedEnumJobTypeFilter<$PrismaModel>
  }

  export type NestedEnumJobLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobLevel | EnumJobLevelFieldRefInput<$PrismaModel>
    in?: $Enums.JobLevel[] | ListEnumJobLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobLevel[] | ListEnumJobLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumJobLevelWithAggregatesFilter<$PrismaModel> | $Enums.JobLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobLevelFilter<$PrismaModel>
    _max?: NestedEnumJobLevelFilter<$PrismaModel>
  }

  export type NestedEnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type NestedEnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type NestedEnumApplicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusFilter<$PrismaModel> | $Enums.ApplicationStatus
  }

  export type NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumInterviewTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewType | EnumInterviewTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InterviewType[] | ListEnumInterviewTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterviewType[] | ListEnumInterviewTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInterviewTypeFilter<$PrismaModel> | $Enums.InterviewType
  }

  export type NestedEnumInterviewStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewStatus | EnumInterviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInterviewStatusFilter<$PrismaModel> | $Enums.InterviewStatus
  }

  export type NestedEnumInterviewOutcomeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewOutcome | EnumInterviewOutcomeFieldRefInput<$PrismaModel> | null
    in?: $Enums.InterviewOutcome[] | ListEnumInterviewOutcomeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.InterviewOutcome[] | ListEnumInterviewOutcomeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumInterviewOutcomeNullableFilter<$PrismaModel> | $Enums.InterviewOutcome | null
  }

  export type NestedEnumInterviewTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewType | EnumInterviewTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InterviewType[] | ListEnumInterviewTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterviewType[] | ListEnumInterviewTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInterviewTypeWithAggregatesFilter<$PrismaModel> | $Enums.InterviewType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInterviewTypeFilter<$PrismaModel>
    _max?: NestedEnumInterviewTypeFilter<$PrismaModel>
  }

  export type NestedEnumInterviewStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewStatus | EnumInterviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInterviewStatusWithAggregatesFilter<$PrismaModel> | $Enums.InterviewStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInterviewStatusFilter<$PrismaModel>
    _max?: NestedEnumInterviewStatusFilter<$PrismaModel>
  }

  export type NestedEnumInterviewOutcomeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewOutcome | EnumInterviewOutcomeFieldRefInput<$PrismaModel> | null
    in?: $Enums.InterviewOutcome[] | ListEnumInterviewOutcomeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.InterviewOutcome[] | ListEnumInterviewOutcomeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumInterviewOutcomeNullableWithAggregatesFilter<$PrismaModel> | $Enums.InterviewOutcome | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumInterviewOutcomeNullableFilter<$PrismaModel>
    _max?: NestedEnumInterviewOutcomeNullableFilter<$PrismaModel>
  }

  export type NestedEnumActivityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityType | EnumActivityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActivityType[] | ListEnumActivityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActivityType[] | ListEnumActivityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumActivityTypeFilter<$PrismaModel> | $Enums.ActivityType
  }

  export type NestedEnumActivityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityType | EnumActivityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActivityType[] | ListEnumActivityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActivityType[] | ListEnumActivityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumActivityTypeWithAggregatesFilter<$PrismaModel> | $Enums.ActivityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActivityTypeFilter<$PrismaModel>
    _max?: NestedEnumActivityTypeFilter<$PrismaModel>
  }

  export type CandidateCreateWithoutOrganizationInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityCreateNestedManyWithoutCandidateInput
    addedBy: UserCreateNestedOneWithoutCandidatesInput
    company?: CompanyCreateNestedOneWithoutCandidatesInput
    interviews?: InterviewCreateNestedManyWithoutCandidateInput
    applications?: JobApplicationCreateNestedManyWithoutCandidateInput
    matchingResults?: MatchingResultCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutOrganizationInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    companyId?: string | null
    addedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutCandidateInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutCandidateInput
    applications?: JobApplicationUncheckedCreateNestedManyWithoutCandidateInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutOrganizationInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutOrganizationInput, CandidateUncheckedCreateWithoutOrganizationInput>
  }

  export type CandidateCreateManyOrganizationInputEnvelope = {
    data: CandidateCreateManyOrganizationInput | CandidateCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    website?: string | null
    logo?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateCreateNestedManyWithoutCompanyInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    users?: UserCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    website?: string | null
    logo?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateUncheckedCreateNestedManyWithoutCompanyInput
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutOrganizationInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutOrganizationInput, CompanyUncheckedCreateWithoutOrganizationInput>
  }

  export type CompanyCreateManyOrganizationInputEnvelope = {
    data: CompanyCreateManyOrganizationInput | CompanyCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type JobCreateWithoutOrganizationInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityCreateNestedManyWithoutJobInput
    interviews?: InterviewCreateNestedManyWithoutJobInput
    applications?: JobApplicationCreateNestedManyWithoutJobInput
    company: CompanyCreateNestedOneWithoutJobsInput
    recruiter: UserCreateNestedOneWithoutJobsInput
    matchingResults?: MatchingResultCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutOrganizationInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    companyId: string
    recruiterId: string
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutJobInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutJobInput
    applications?: JobApplicationUncheckedCreateNestedManyWithoutJobInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutOrganizationInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutOrganizationInput, JobUncheckedCreateWithoutOrganizationInput>
  }

  export type JobCreateManyOrganizationInputEnvelope = {
    data: JobCreateManyOrganizationInput | JobCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type MatchingResultCreateWithoutOrganizationInput = {
    id?: string
    score: number
    embeddingSimilarity: number
    skillMatches: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: Date | string
    expiresAt: Date | string
    candidate: CandidateCreateNestedOneWithoutMatchingResultsInput
    job: JobCreateNestedOneWithoutMatchingResultsInput
  }

  export type MatchingResultUncheckedCreateWithoutOrganizationInput = {
    id?: string
    jobId: string
    candidateId: string
    score: number
    embeddingSimilarity: number
    skillMatches: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: Date | string
    expiresAt: Date | string
  }

  export type MatchingResultCreateOrConnectWithoutOrganizationInput = {
    where: MatchingResultWhereUniqueInput
    create: XOR<MatchingResultCreateWithoutOrganizationInput, MatchingResultUncheckedCreateWithoutOrganizationInput>
  }

  export type MatchingResultCreateManyOrganizationInputEnvelope = {
    data: MatchingResultCreateManyOrganizationInput | MatchingResultCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutOrganizationInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    activities?: ActivityCreateNestedManyWithoutUserInput
    candidates?: CandidateCreateNestedManyWithoutAddedByInput
    conductedInterviews?: InterviewCreateNestedManyWithoutInterviewerInput
    jobs?: JobCreateNestedManyWithoutRecruiterInput
    company?: CompanyCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutOrganizationInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    candidates?: CandidateUncheckedCreateNestedManyWithoutAddedByInput
    conductedInterviews?: InterviewUncheckedCreateNestedManyWithoutInterviewerInput
    jobs?: JobUncheckedCreateNestedManyWithoutRecruiterInput
  }

  export type UserCreateOrConnectWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserCreateManyOrganizationInputEnvelope = {
    data: UserCreateManyOrganizationInput | UserCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type CandidateUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: CandidateWhereUniqueInput
    update: XOR<CandidateUpdateWithoutOrganizationInput, CandidateUncheckedUpdateWithoutOrganizationInput>
    create: XOR<CandidateCreateWithoutOrganizationInput, CandidateUncheckedCreateWithoutOrganizationInput>
  }

  export type CandidateUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: CandidateWhereUniqueInput
    data: XOR<CandidateUpdateWithoutOrganizationInput, CandidateUncheckedUpdateWithoutOrganizationInput>
  }

  export type CandidateUpdateManyWithWhereWithoutOrganizationInput = {
    where: CandidateScalarWhereInput
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type CandidateScalarWhereInput = {
    AND?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
    OR?: CandidateScalarWhereInput[]
    NOT?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
    id?: StringFilter<"Candidate"> | string
    email?: StringFilter<"Candidate"> | string
    firstName?: StringFilter<"Candidate"> | string
    lastName?: StringFilter<"Candidate"> | string
    phone?: StringNullableFilter<"Candidate"> | string | null
    linkedin?: StringNullableFilter<"Candidate"> | string | null
    github?: StringNullableFilter<"Candidate"> | string | null
    portfolio?: StringNullableFilter<"Candidate"> | string | null
    resume?: StringNullableFilter<"Candidate"> | string | null
    summary?: StringNullableFilter<"Candidate"> | string | null
    resumeUrl?: StringNullableFilter<"Candidate"> | string | null
    status?: EnumCandidateStatusFilter<"Candidate"> | $Enums.CandidateStatus
    location?: StringNullableFilter<"Candidate"> | string | null
    timezone?: StringNullableFilter<"Candidate"> | string | null
    yearsOfExperience?: IntNullableFilter<"Candidate"> | number | null
    currentSalary?: FloatNullableFilter<"Candidate"> | number | null
    expectedSalary?: FloatNullableFilter<"Candidate"> | number | null
    availability?: DateTimeNullableFilter<"Candidate"> | Date | string | null
    source?: StringNullableFilter<"Candidate"> | string | null
    notes?: StringNullableFilter<"Candidate"> | string | null
    tags?: StringNullableListFilter<"Candidate">
    companyId?: StringNullableFilter<"Candidate"> | string | null
    addedById?: StringFilter<"Candidate"> | string
    createdAt?: DateTimeFilter<"Candidate"> | Date | string
    updatedAt?: DateTimeFilter<"Candidate"> | Date | string
    organizationId?: StringFilter<"Candidate"> | string
    certifications?: JsonNullableFilter<"Candidate">
    currentRole?: StringNullableFilter<"Candidate"> | string | null
    education?: JsonNullableFilter<"Candidate">
    experience?: JsonNullableFilter<"Candidate">
    industryExperience?: StringNullableListFilter<"Candidate">
    projects?: JsonNullableFilter<"Candidate">
    salaryExpectation?: JsonNullableFilter<"Candidate">
    skills?: JsonNullableFilter<"Candidate">
    embedding?: StringNullableFilter<"Candidate"> | string | null
    embeddingAt?: DateTimeNullableFilter<"Candidate"> | Date | string | null
    embeddingModel?: StringNullableFilter<"Candidate"> | string | null
  }

  export type CompanyUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutOrganizationInput, CompanyUncheckedUpdateWithoutOrganizationInput>
    create: XOR<CompanyCreateWithoutOrganizationInput, CompanyUncheckedCreateWithoutOrganizationInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutOrganizationInput, CompanyUncheckedUpdateWithoutOrganizationInput>
  }

  export type CompanyUpdateManyWithWhereWithoutOrganizationInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type CompanyScalarWhereInput = {
    AND?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    OR?: CompanyScalarWhereInput[]
    NOT?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    id?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    description?: StringNullableFilter<"Company"> | string | null
    website?: StringNullableFilter<"Company"> | string | null
    logo?: StringNullableFilter<"Company"> | string | null
    email?: StringNullableFilter<"Company"> | string | null
    phone?: StringNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    organizationId?: StringFilter<"Company"> | string
  }

  export type JobUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutOrganizationInput, JobUncheckedUpdateWithoutOrganizationInput>
    create: XOR<JobCreateWithoutOrganizationInput, JobUncheckedCreateWithoutOrganizationInput>
  }

  export type JobUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutOrganizationInput, JobUncheckedUpdateWithoutOrganizationInput>
  }

  export type JobUpdateManyWithWhereWithoutOrganizationInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type JobScalarWhereInput = {
    AND?: JobScalarWhereInput | JobScalarWhereInput[]
    OR?: JobScalarWhereInput[]
    NOT?: JobScalarWhereInput | JobScalarWhereInput[]
    id?: StringFilter<"Job"> | string
    title?: StringFilter<"Job"> | string
    description?: StringFilter<"Job"> | string
    requirements?: StringNullableFilter<"Job"> | string | null
    department?: StringNullableFilter<"Job"> | string | null
    location?: StringNullableFilter<"Job"> | string | null
    remote?: BoolFilter<"Job"> | boolean
    type?: EnumJobTypeFilter<"Job"> | $Enums.JobType
    level?: EnumJobLevelFilter<"Job"> | $Enums.JobLevel
    salaryMin?: FloatNullableFilter<"Job"> | number | null
    salaryMax?: FloatNullableFilter<"Job"> | number | null
    currency?: StringFilter<"Job"> | string
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    priority?: EnumPriorityFilter<"Job"> | $Enums.Priority
    startDate?: DateTimeNullableFilter<"Job"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Job"> | Date | string | null
    deadline?: DateTimeNullableFilter<"Job"> | Date | string | null
    companyId?: StringFilter<"Job"> | string
    recruiterId?: StringFilter<"Job"> | string
    jobDescriptionUrl?: StringNullableFilter<"Job"> | string | null
    aiGenerated?: BoolFilter<"Job"> | boolean
    aiPrompt?: StringNullableFilter<"Job"> | string | null
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
    organizationId?: StringFilter<"Job"> | string
    applicationInfo?: JsonNullableFilter<"Job">
    benefits?: JsonNullableFilter<"Job">
    metadata?: JsonNullableFilter<"Job">
    requirementsDetailed?: JsonNullableFilter<"Job">
    responsibilities?: JsonNullableFilter<"Job">
    jobInfo?: JsonNullableFilter<"Job">
    embedding?: StringNullableFilter<"Job"> | string | null
    embeddingAt?: DateTimeNullableFilter<"Job"> | Date | string | null
    embeddingModel?: StringNullableFilter<"Job"> | string | null
  }

  export type MatchingResultUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: MatchingResultWhereUniqueInput
    update: XOR<MatchingResultUpdateWithoutOrganizationInput, MatchingResultUncheckedUpdateWithoutOrganizationInput>
    create: XOR<MatchingResultCreateWithoutOrganizationInput, MatchingResultUncheckedCreateWithoutOrganizationInput>
  }

  export type MatchingResultUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: MatchingResultWhereUniqueInput
    data: XOR<MatchingResultUpdateWithoutOrganizationInput, MatchingResultUncheckedUpdateWithoutOrganizationInput>
  }

  export type MatchingResultUpdateManyWithWhereWithoutOrganizationInput = {
    where: MatchingResultScalarWhereInput
    data: XOR<MatchingResultUpdateManyMutationInput, MatchingResultUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type MatchingResultScalarWhereInput = {
    AND?: MatchingResultScalarWhereInput | MatchingResultScalarWhereInput[]
    OR?: MatchingResultScalarWhereInput[]
    NOT?: MatchingResultScalarWhereInput | MatchingResultScalarWhereInput[]
    id?: StringFilter<"MatchingResult"> | string
    jobId?: StringFilter<"MatchingResult"> | string
    candidateId?: StringFilter<"MatchingResult"> | string
    score?: FloatFilter<"MatchingResult"> | number
    embeddingSimilarity?: FloatFilter<"MatchingResult"> | number
    skillMatches?: JsonFilter<"MatchingResult">
    aiAnalysis?: JsonNullableFilter<"MatchingResult">
    calculatedAt?: DateTimeFilter<"MatchingResult"> | Date | string
    expiresAt?: DateTimeFilter<"MatchingResult"> | Date | string
    organizationId?: StringFilter<"MatchingResult"> | string
  }

  export type UserUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
  }

  export type UserUpdateManyWithWhereWithoutOrganizationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    companyId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    isActive?: BoolFilter<"User"> | boolean
    organizationId?: StringFilter<"User"> | string
  }

  export type ActivityCreateWithoutUserInput = {
    id?: string
    type: $Enums.ActivityType
    title: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    application?: JobApplicationCreateNestedOneWithoutActivitiesInput
    candidate?: CandidateCreateNestedOneWithoutActivitiesInput
    job?: JobCreateNestedOneWithoutActivitiesInput
  }

  export type ActivityUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.ActivityType
    title: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    candidateId?: string | null
    jobId?: string | null
    applicationId?: string | null
    createdAt?: Date | string
  }

  export type ActivityCreateOrConnectWithoutUserInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput>
  }

  export type ActivityCreateManyUserInputEnvelope = {
    data: ActivityCreateManyUserInput | ActivityCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CandidateCreateWithoutAddedByInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityCreateNestedManyWithoutCandidateInput
    company?: CompanyCreateNestedOneWithoutCandidatesInput
    organization: OrganizationCreateNestedOneWithoutCandidatesInput
    interviews?: InterviewCreateNestedManyWithoutCandidateInput
    applications?: JobApplicationCreateNestedManyWithoutCandidateInput
    matchingResults?: MatchingResultCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutAddedByInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutCandidateInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutCandidateInput
    applications?: JobApplicationUncheckedCreateNestedManyWithoutCandidateInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutAddedByInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutAddedByInput, CandidateUncheckedCreateWithoutAddedByInput>
  }

  export type CandidateCreateManyAddedByInputEnvelope = {
    data: CandidateCreateManyAddedByInput | CandidateCreateManyAddedByInput[]
    skipDuplicates?: boolean
  }

  export type InterviewCreateWithoutInterviewerInput = {
    id?: string
    title: string
    type?: $Enums.InterviewType
    status?: $Enums.InterviewStatus
    scheduledAt: Date | string
    duration?: number
    timezone?: string | null
    location?: string | null
    notes?: string | null
    feedback?: string | null
    rating?: number | null
    outcome?: $Enums.InterviewOutcome | null
    createdAt?: Date | string
    updatedAt?: Date | string
    application?: JobApplicationCreateNestedOneWithoutInterviewsInput
    candidate: CandidateCreateNestedOneWithoutInterviewsInput
    job: JobCreateNestedOneWithoutInterviewsInput
  }

  export type InterviewUncheckedCreateWithoutInterviewerInput = {
    id?: string
    title: string
    type?: $Enums.InterviewType
    status?: $Enums.InterviewStatus
    scheduledAt: Date | string
    duration?: number
    timezone?: string | null
    location?: string | null
    notes?: string | null
    feedback?: string | null
    rating?: number | null
    outcome?: $Enums.InterviewOutcome | null
    candidateId: string
    jobId: string
    applicationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InterviewCreateOrConnectWithoutInterviewerInput = {
    where: InterviewWhereUniqueInput
    create: XOR<InterviewCreateWithoutInterviewerInput, InterviewUncheckedCreateWithoutInterviewerInput>
  }

  export type InterviewCreateManyInterviewerInputEnvelope = {
    data: InterviewCreateManyInterviewerInput | InterviewCreateManyInterviewerInput[]
    skipDuplicates?: boolean
  }

  export type JobCreateWithoutRecruiterInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityCreateNestedManyWithoutJobInput
    interviews?: InterviewCreateNestedManyWithoutJobInput
    applications?: JobApplicationCreateNestedManyWithoutJobInput
    company: CompanyCreateNestedOneWithoutJobsInput
    organization: OrganizationCreateNestedOneWithoutJobsInput
    matchingResults?: MatchingResultCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutRecruiterInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    companyId: string
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutJobInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutJobInput
    applications?: JobApplicationUncheckedCreateNestedManyWithoutJobInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutRecruiterInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutRecruiterInput, JobUncheckedCreateWithoutRecruiterInput>
  }

  export type JobCreateManyRecruiterInputEnvelope = {
    data: JobCreateManyRecruiterInput | JobCreateManyRecruiterInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    website?: string | null
    logo?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateCreateNestedManyWithoutCompanyInput
    organization: OrganizationCreateNestedOneWithoutCompaniesInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    website?: string | null
    logo?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    candidates?: CandidateUncheckedCreateNestedManyWithoutCompanyInput
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutUsersInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
  }

  export type OrganizationCreateWithoutUsersInput = {
    id?: string
    slug: string
    name: string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: string | null
    subdomain?: string | null
    plan?: $Enums.SubscriptionPlan
    maxUsers?: number
    maxJobs?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    contactEmail: string
    billingEmail?: string | null
    contactPhone?: string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateCreateNestedManyWithoutOrganizationInput
    companies?: CompanyCreateNestedManyWithoutOrganizationInput
    jobs?: JobCreateNestedManyWithoutOrganizationInput
    matchingResults?: MatchingResultCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutUsersInput = {
    id?: string
    slug: string
    name: string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: string | null
    subdomain?: string | null
    plan?: $Enums.SubscriptionPlan
    maxUsers?: number
    maxJobs?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    contactEmail: string
    billingEmail?: string | null
    contactPhone?: string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateUncheckedCreateNestedManyWithoutOrganizationInput
    companies?: CompanyUncheckedCreateNestedManyWithoutOrganizationInput
    jobs?: JobUncheckedCreateNestedManyWithoutOrganizationInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutUsersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
  }

  export type ActivityUpsertWithWhereUniqueWithoutUserInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutUserInput, ActivityUncheckedUpdateWithoutUserInput>
    create: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutUserInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutUserInput, ActivityUncheckedUpdateWithoutUserInput>
  }

  export type ActivityUpdateManyWithWhereWithoutUserInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutUserInput>
  }

  export type ActivityScalarWhereInput = {
    AND?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    OR?: ActivityScalarWhereInput[]
    NOT?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    id?: StringFilter<"Activity"> | string
    type?: EnumActivityTypeFilter<"Activity"> | $Enums.ActivityType
    title?: StringFilter<"Activity"> | string
    description?: StringNullableFilter<"Activity"> | string | null
    metadata?: JsonNullableFilter<"Activity">
    userId?: StringNullableFilter<"Activity"> | string | null
    candidateId?: StringNullableFilter<"Activity"> | string | null
    jobId?: StringNullableFilter<"Activity"> | string | null
    applicationId?: StringNullableFilter<"Activity"> | string | null
    createdAt?: DateTimeFilter<"Activity"> | Date | string
  }

  export type CandidateUpsertWithWhereUniqueWithoutAddedByInput = {
    where: CandidateWhereUniqueInput
    update: XOR<CandidateUpdateWithoutAddedByInput, CandidateUncheckedUpdateWithoutAddedByInput>
    create: XOR<CandidateCreateWithoutAddedByInput, CandidateUncheckedCreateWithoutAddedByInput>
  }

  export type CandidateUpdateWithWhereUniqueWithoutAddedByInput = {
    where: CandidateWhereUniqueInput
    data: XOR<CandidateUpdateWithoutAddedByInput, CandidateUncheckedUpdateWithoutAddedByInput>
  }

  export type CandidateUpdateManyWithWhereWithoutAddedByInput = {
    where: CandidateScalarWhereInput
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyWithoutAddedByInput>
  }

  export type InterviewUpsertWithWhereUniqueWithoutInterviewerInput = {
    where: InterviewWhereUniqueInput
    update: XOR<InterviewUpdateWithoutInterviewerInput, InterviewUncheckedUpdateWithoutInterviewerInput>
    create: XOR<InterviewCreateWithoutInterviewerInput, InterviewUncheckedCreateWithoutInterviewerInput>
  }

  export type InterviewUpdateWithWhereUniqueWithoutInterviewerInput = {
    where: InterviewWhereUniqueInput
    data: XOR<InterviewUpdateWithoutInterviewerInput, InterviewUncheckedUpdateWithoutInterviewerInput>
  }

  export type InterviewUpdateManyWithWhereWithoutInterviewerInput = {
    where: InterviewScalarWhereInput
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyWithoutInterviewerInput>
  }

  export type InterviewScalarWhereInput = {
    AND?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
    OR?: InterviewScalarWhereInput[]
    NOT?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
    id?: StringFilter<"Interview"> | string
    title?: StringFilter<"Interview"> | string
    type?: EnumInterviewTypeFilter<"Interview"> | $Enums.InterviewType
    status?: EnumInterviewStatusFilter<"Interview"> | $Enums.InterviewStatus
    scheduledAt?: DateTimeFilter<"Interview"> | Date | string
    duration?: IntFilter<"Interview"> | number
    timezone?: StringNullableFilter<"Interview"> | string | null
    location?: StringNullableFilter<"Interview"> | string | null
    notes?: StringNullableFilter<"Interview"> | string | null
    feedback?: StringNullableFilter<"Interview"> | string | null
    rating?: FloatNullableFilter<"Interview"> | number | null
    outcome?: EnumInterviewOutcomeNullableFilter<"Interview"> | $Enums.InterviewOutcome | null
    candidateId?: StringFilter<"Interview"> | string
    jobId?: StringFilter<"Interview"> | string
    applicationId?: StringNullableFilter<"Interview"> | string | null
    interviewerId?: StringFilter<"Interview"> | string
    createdAt?: DateTimeFilter<"Interview"> | Date | string
    updatedAt?: DateTimeFilter<"Interview"> | Date | string
  }

  export type JobUpsertWithWhereUniqueWithoutRecruiterInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutRecruiterInput, JobUncheckedUpdateWithoutRecruiterInput>
    create: XOR<JobCreateWithoutRecruiterInput, JobUncheckedCreateWithoutRecruiterInput>
  }

  export type JobUpdateWithWhereUniqueWithoutRecruiterInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutRecruiterInput, JobUncheckedUpdateWithoutRecruiterInput>
  }

  export type JobUpdateManyWithWhereWithoutRecruiterInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutRecruiterInput>
  }

  export type CompanyUpsertWithoutUsersInput = {
    update: XOR<CompanyUpdateWithoutUsersInput, CompanyUncheckedUpdateWithoutUsersInput>
    create: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutUsersInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutUsersInput, CompanyUncheckedUpdateWithoutUsersInput>
  }

  export type CompanyUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUpdateManyWithoutCompanyNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutCompaniesNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    candidates?: CandidateUncheckedUpdateManyWithoutCompanyNestedInput
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type OrganizationUpsertWithoutUsersInput = {
    update: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutUsersInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type OrganizationUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxJobs?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUpdateManyWithoutOrganizationNestedInput
    companies?: CompanyUpdateManyWithoutOrganizationNestedInput
    jobs?: JobUpdateManyWithoutOrganizationNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxJobs?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUncheckedUpdateManyWithoutOrganizationNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutOrganizationNestedInput
    jobs?: JobUncheckedUpdateManyWithoutOrganizationNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type CandidateCreateWithoutCompanyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityCreateNestedManyWithoutCandidateInput
    addedBy: UserCreateNestedOneWithoutCandidatesInput
    organization: OrganizationCreateNestedOneWithoutCandidatesInput
    interviews?: InterviewCreateNestedManyWithoutCandidateInput
    applications?: JobApplicationCreateNestedManyWithoutCandidateInput
    matchingResults?: MatchingResultCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutCompanyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    addedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutCandidateInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutCandidateInput
    applications?: JobApplicationUncheckedCreateNestedManyWithoutCandidateInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutCompanyInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutCompanyInput, CandidateUncheckedCreateWithoutCompanyInput>
  }

  export type CandidateCreateManyCompanyInputEnvelope = {
    data: CandidateCreateManyCompanyInput | CandidateCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationCreateWithoutCompaniesInput = {
    id?: string
    slug: string
    name: string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: string | null
    subdomain?: string | null
    plan?: $Enums.SubscriptionPlan
    maxUsers?: number
    maxJobs?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    contactEmail: string
    billingEmail?: string | null
    contactPhone?: string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateCreateNestedManyWithoutOrganizationInput
    jobs?: JobCreateNestedManyWithoutOrganizationInput
    matchingResults?: MatchingResultCreateNestedManyWithoutOrganizationInput
    users?: UserCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutCompaniesInput = {
    id?: string
    slug: string
    name: string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: string | null
    subdomain?: string | null
    plan?: $Enums.SubscriptionPlan
    maxUsers?: number
    maxJobs?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    contactEmail: string
    billingEmail?: string | null
    contactPhone?: string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateUncheckedCreateNestedManyWithoutOrganizationInput
    jobs?: JobUncheckedCreateNestedManyWithoutOrganizationInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutOrganizationInput
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutCompaniesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutCompaniesInput, OrganizationUncheckedCreateWithoutCompaniesInput>
  }

  export type JobCreateWithoutCompanyInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityCreateNestedManyWithoutJobInput
    interviews?: InterviewCreateNestedManyWithoutJobInput
    applications?: JobApplicationCreateNestedManyWithoutJobInput
    organization: OrganizationCreateNestedOneWithoutJobsInput
    recruiter: UserCreateNestedOneWithoutJobsInput
    matchingResults?: MatchingResultCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutCompanyInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    recruiterId: string
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutJobInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutJobInput
    applications?: JobApplicationUncheckedCreateNestedManyWithoutJobInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutCompanyInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput>
  }

  export type JobCreateManyCompanyInputEnvelope = {
    data: JobCreateManyCompanyInput | JobCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCompanyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    activities?: ActivityCreateNestedManyWithoutUserInput
    candidates?: CandidateCreateNestedManyWithoutAddedByInput
    conductedInterviews?: InterviewCreateNestedManyWithoutInterviewerInput
    jobs?: JobCreateNestedManyWithoutRecruiterInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutCompanyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    organizationId: string
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    candidates?: CandidateUncheckedCreateNestedManyWithoutAddedByInput
    conductedInterviews?: InterviewUncheckedCreateNestedManyWithoutInterviewerInput
    jobs?: JobUncheckedCreateNestedManyWithoutRecruiterInput
  }

  export type UserCreateOrConnectWithoutCompanyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserCreateManyCompanyInputEnvelope = {
    data: UserCreateManyCompanyInput | UserCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type CandidateUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CandidateWhereUniqueInput
    update: XOR<CandidateUpdateWithoutCompanyInput, CandidateUncheckedUpdateWithoutCompanyInput>
    create: XOR<CandidateCreateWithoutCompanyInput, CandidateUncheckedCreateWithoutCompanyInput>
  }

  export type CandidateUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CandidateWhereUniqueInput
    data: XOR<CandidateUpdateWithoutCompanyInput, CandidateUncheckedUpdateWithoutCompanyInput>
  }

  export type CandidateUpdateManyWithWhereWithoutCompanyInput = {
    where: CandidateScalarWhereInput
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyWithoutCompanyInput>
  }

  export type OrganizationUpsertWithoutCompaniesInput = {
    update: XOR<OrganizationUpdateWithoutCompaniesInput, OrganizationUncheckedUpdateWithoutCompaniesInput>
    create: XOR<OrganizationCreateWithoutCompaniesInput, OrganizationUncheckedCreateWithoutCompaniesInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutCompaniesInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutCompaniesInput, OrganizationUncheckedUpdateWithoutCompaniesInput>
  }

  export type OrganizationUpdateWithoutCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxJobs?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUpdateManyWithoutOrganizationNestedInput
    jobs?: JobUpdateManyWithoutOrganizationNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutOrganizationNestedInput
    users?: UserUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxJobs?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUncheckedUpdateManyWithoutOrganizationNestedInput
    jobs?: JobUncheckedUpdateManyWithoutOrganizationNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutOrganizationNestedInput
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type JobUpsertWithWhereUniqueWithoutCompanyInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutCompanyInput, JobUncheckedUpdateWithoutCompanyInput>
    create: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput>
  }

  export type JobUpdateWithWhereUniqueWithoutCompanyInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutCompanyInput, JobUncheckedUpdateWithoutCompanyInput>
  }

  export type JobUpdateManyWithWhereWithoutCompanyInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutCompanyInput>
  }

  export type UserUpsertWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
  }

  export type UserUpdateManyWithWhereWithoutCompanyInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCompanyInput>
  }

  export type ActivityCreateWithoutCandidateInput = {
    id?: string
    type: $Enums.ActivityType
    title: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    application?: JobApplicationCreateNestedOneWithoutActivitiesInput
    job?: JobCreateNestedOneWithoutActivitiesInput
    user?: UserCreateNestedOneWithoutActivitiesInput
  }

  export type ActivityUncheckedCreateWithoutCandidateInput = {
    id?: string
    type: $Enums.ActivityType
    title: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    jobId?: string | null
    applicationId?: string | null
    createdAt?: Date | string
  }

  export type ActivityCreateOrConnectWithoutCandidateInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutCandidateInput, ActivityUncheckedCreateWithoutCandidateInput>
  }

  export type ActivityCreateManyCandidateInputEnvelope = {
    data: ActivityCreateManyCandidateInput | ActivityCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCandidatesInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    activities?: ActivityCreateNestedManyWithoutUserInput
    conductedInterviews?: InterviewCreateNestedManyWithoutInterviewerInput
    jobs?: JobCreateNestedManyWithoutRecruiterInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutCandidatesInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    organizationId: string
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    conductedInterviews?: InterviewUncheckedCreateNestedManyWithoutInterviewerInput
    jobs?: JobUncheckedCreateNestedManyWithoutRecruiterInput
  }

  export type UserCreateOrConnectWithoutCandidatesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCandidatesInput, UserUncheckedCreateWithoutCandidatesInput>
  }

  export type CompanyCreateWithoutCandidatesInput = {
    id?: string
    name: string
    description?: string | null
    website?: string | null
    logo?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutCompaniesInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    users?: UserCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutCandidatesInput = {
    id?: string
    name: string
    description?: string | null
    website?: string | null
    logo?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutCandidatesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutCandidatesInput, CompanyUncheckedCreateWithoutCandidatesInput>
  }

  export type OrganizationCreateWithoutCandidatesInput = {
    id?: string
    slug: string
    name: string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: string | null
    subdomain?: string | null
    plan?: $Enums.SubscriptionPlan
    maxUsers?: number
    maxJobs?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    contactEmail: string
    billingEmail?: string | null
    contactPhone?: string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyCreateNestedManyWithoutOrganizationInput
    jobs?: JobCreateNestedManyWithoutOrganizationInput
    matchingResults?: MatchingResultCreateNestedManyWithoutOrganizationInput
    users?: UserCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutCandidatesInput = {
    id?: string
    slug: string
    name: string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: string | null
    subdomain?: string | null
    plan?: $Enums.SubscriptionPlan
    maxUsers?: number
    maxJobs?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    contactEmail: string
    billingEmail?: string | null
    contactPhone?: string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyUncheckedCreateNestedManyWithoutOrganizationInput
    jobs?: JobUncheckedCreateNestedManyWithoutOrganizationInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutOrganizationInput
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutCandidatesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutCandidatesInput, OrganizationUncheckedCreateWithoutCandidatesInput>
  }

  export type InterviewCreateWithoutCandidateInput = {
    id?: string
    title: string
    type?: $Enums.InterviewType
    status?: $Enums.InterviewStatus
    scheduledAt: Date | string
    duration?: number
    timezone?: string | null
    location?: string | null
    notes?: string | null
    feedback?: string | null
    rating?: number | null
    outcome?: $Enums.InterviewOutcome | null
    createdAt?: Date | string
    updatedAt?: Date | string
    application?: JobApplicationCreateNestedOneWithoutInterviewsInput
    interviewer: UserCreateNestedOneWithoutConductedInterviewsInput
    job: JobCreateNestedOneWithoutInterviewsInput
  }

  export type InterviewUncheckedCreateWithoutCandidateInput = {
    id?: string
    title: string
    type?: $Enums.InterviewType
    status?: $Enums.InterviewStatus
    scheduledAt: Date | string
    duration?: number
    timezone?: string | null
    location?: string | null
    notes?: string | null
    feedback?: string | null
    rating?: number | null
    outcome?: $Enums.InterviewOutcome | null
    jobId: string
    applicationId?: string | null
    interviewerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InterviewCreateOrConnectWithoutCandidateInput = {
    where: InterviewWhereUniqueInput
    create: XOR<InterviewCreateWithoutCandidateInput, InterviewUncheckedCreateWithoutCandidateInput>
  }

  export type InterviewCreateManyCandidateInputEnvelope = {
    data: InterviewCreateManyCandidateInput | InterviewCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type JobApplicationCreateWithoutCandidateInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    appliedAt?: Date | string
    coverLetter?: string | null
    notes?: string | null
    rating?: number | null
    fitScore?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityCreateNestedManyWithoutApplicationInput
    interviews?: InterviewCreateNestedManyWithoutApplicationInput
    job: JobCreateNestedOneWithoutApplicationsInput
  }

  export type JobApplicationUncheckedCreateWithoutCandidateInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    appliedAt?: Date | string
    coverLetter?: string | null
    notes?: string | null
    rating?: number | null
    fitScore?: number | null
    jobId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityUncheckedCreateNestedManyWithoutApplicationInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type JobApplicationCreateOrConnectWithoutCandidateInput = {
    where: JobApplicationWhereUniqueInput
    create: XOR<JobApplicationCreateWithoutCandidateInput, JobApplicationUncheckedCreateWithoutCandidateInput>
  }

  export type JobApplicationCreateManyCandidateInputEnvelope = {
    data: JobApplicationCreateManyCandidateInput | JobApplicationCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type MatchingResultCreateWithoutCandidateInput = {
    id?: string
    score: number
    embeddingSimilarity: number
    skillMatches: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: Date | string
    expiresAt: Date | string
    job: JobCreateNestedOneWithoutMatchingResultsInput
    organization: OrganizationCreateNestedOneWithoutMatchingResultsInput
  }

  export type MatchingResultUncheckedCreateWithoutCandidateInput = {
    id?: string
    jobId: string
    score: number
    embeddingSimilarity: number
    skillMatches: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: Date | string
    expiresAt: Date | string
    organizationId: string
  }

  export type MatchingResultCreateOrConnectWithoutCandidateInput = {
    where: MatchingResultWhereUniqueInput
    create: XOR<MatchingResultCreateWithoutCandidateInput, MatchingResultUncheckedCreateWithoutCandidateInput>
  }

  export type MatchingResultCreateManyCandidateInputEnvelope = {
    data: MatchingResultCreateManyCandidateInput | MatchingResultCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type ActivityUpsertWithWhereUniqueWithoutCandidateInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutCandidateInput, ActivityUncheckedUpdateWithoutCandidateInput>
    create: XOR<ActivityCreateWithoutCandidateInput, ActivityUncheckedCreateWithoutCandidateInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutCandidateInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutCandidateInput, ActivityUncheckedUpdateWithoutCandidateInput>
  }

  export type ActivityUpdateManyWithWhereWithoutCandidateInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutCandidateInput>
  }

  export type UserUpsertWithoutCandidatesInput = {
    update: XOR<UserUpdateWithoutCandidatesInput, UserUncheckedUpdateWithoutCandidatesInput>
    create: XOR<UserCreateWithoutCandidatesInput, UserUncheckedCreateWithoutCandidatesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCandidatesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCandidatesInput, UserUncheckedUpdateWithoutCandidatesInput>
  }

  export type UserUpdateWithoutCandidatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    activities?: ActivityUpdateManyWithoutUserNestedInput
    conductedInterviews?: InterviewUpdateManyWithoutInterviewerNestedInput
    jobs?: JobUpdateManyWithoutRecruiterNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutCandidatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    conductedInterviews?: InterviewUncheckedUpdateManyWithoutInterviewerNestedInput
    jobs?: JobUncheckedUpdateManyWithoutRecruiterNestedInput
  }

  export type CompanyUpsertWithoutCandidatesInput = {
    update: XOR<CompanyUpdateWithoutCandidatesInput, CompanyUncheckedUpdateWithoutCandidatesInput>
    create: XOR<CompanyCreateWithoutCandidatesInput, CompanyUncheckedCreateWithoutCandidatesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutCandidatesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutCandidatesInput, CompanyUncheckedUpdateWithoutCandidatesInput>
  }

  export type CompanyUpdateWithoutCandidatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutCompaniesNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    users?: UserUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutCandidatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type OrganizationUpsertWithoutCandidatesInput = {
    update: XOR<OrganizationUpdateWithoutCandidatesInput, OrganizationUncheckedUpdateWithoutCandidatesInput>
    create: XOR<OrganizationCreateWithoutCandidatesInput, OrganizationUncheckedCreateWithoutCandidatesInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutCandidatesInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutCandidatesInput, OrganizationUncheckedUpdateWithoutCandidatesInput>
  }

  export type OrganizationUpdateWithoutCandidatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxJobs?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUpdateManyWithoutOrganizationNestedInput
    jobs?: JobUpdateManyWithoutOrganizationNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutOrganizationNestedInput
    users?: UserUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutCandidatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxJobs?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUncheckedUpdateManyWithoutOrganizationNestedInput
    jobs?: JobUncheckedUpdateManyWithoutOrganizationNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutOrganizationNestedInput
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type InterviewUpsertWithWhereUniqueWithoutCandidateInput = {
    where: InterviewWhereUniqueInput
    update: XOR<InterviewUpdateWithoutCandidateInput, InterviewUncheckedUpdateWithoutCandidateInput>
    create: XOR<InterviewCreateWithoutCandidateInput, InterviewUncheckedCreateWithoutCandidateInput>
  }

  export type InterviewUpdateWithWhereUniqueWithoutCandidateInput = {
    where: InterviewWhereUniqueInput
    data: XOR<InterviewUpdateWithoutCandidateInput, InterviewUncheckedUpdateWithoutCandidateInput>
  }

  export type InterviewUpdateManyWithWhereWithoutCandidateInput = {
    where: InterviewScalarWhereInput
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyWithoutCandidateInput>
  }

  export type JobApplicationUpsertWithWhereUniqueWithoutCandidateInput = {
    where: JobApplicationWhereUniqueInput
    update: XOR<JobApplicationUpdateWithoutCandidateInput, JobApplicationUncheckedUpdateWithoutCandidateInput>
    create: XOR<JobApplicationCreateWithoutCandidateInput, JobApplicationUncheckedCreateWithoutCandidateInput>
  }

  export type JobApplicationUpdateWithWhereUniqueWithoutCandidateInput = {
    where: JobApplicationWhereUniqueInput
    data: XOR<JobApplicationUpdateWithoutCandidateInput, JobApplicationUncheckedUpdateWithoutCandidateInput>
  }

  export type JobApplicationUpdateManyWithWhereWithoutCandidateInput = {
    where: JobApplicationScalarWhereInput
    data: XOR<JobApplicationUpdateManyMutationInput, JobApplicationUncheckedUpdateManyWithoutCandidateInput>
  }

  export type JobApplicationScalarWhereInput = {
    AND?: JobApplicationScalarWhereInput | JobApplicationScalarWhereInput[]
    OR?: JobApplicationScalarWhereInput[]
    NOT?: JobApplicationScalarWhereInput | JobApplicationScalarWhereInput[]
    id?: StringFilter<"JobApplication"> | string
    status?: EnumApplicationStatusFilter<"JobApplication"> | $Enums.ApplicationStatus
    appliedAt?: DateTimeFilter<"JobApplication"> | Date | string
    coverLetter?: StringNullableFilter<"JobApplication"> | string | null
    notes?: StringNullableFilter<"JobApplication"> | string | null
    rating?: FloatNullableFilter<"JobApplication"> | number | null
    fitScore?: FloatNullableFilter<"JobApplication"> | number | null
    candidateId?: StringFilter<"JobApplication"> | string
    jobId?: StringFilter<"JobApplication"> | string
    createdAt?: DateTimeFilter<"JobApplication"> | Date | string
    updatedAt?: DateTimeFilter<"JobApplication"> | Date | string
  }

  export type MatchingResultUpsertWithWhereUniqueWithoutCandidateInput = {
    where: MatchingResultWhereUniqueInput
    update: XOR<MatchingResultUpdateWithoutCandidateInput, MatchingResultUncheckedUpdateWithoutCandidateInput>
    create: XOR<MatchingResultCreateWithoutCandidateInput, MatchingResultUncheckedCreateWithoutCandidateInput>
  }

  export type MatchingResultUpdateWithWhereUniqueWithoutCandidateInput = {
    where: MatchingResultWhereUniqueInput
    data: XOR<MatchingResultUpdateWithoutCandidateInput, MatchingResultUncheckedUpdateWithoutCandidateInput>
  }

  export type MatchingResultUpdateManyWithWhereWithoutCandidateInput = {
    where: MatchingResultScalarWhereInput
    data: XOR<MatchingResultUpdateManyMutationInput, MatchingResultUncheckedUpdateManyWithoutCandidateInput>
  }

  export type ActivityCreateWithoutJobInput = {
    id?: string
    type: $Enums.ActivityType
    title: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    application?: JobApplicationCreateNestedOneWithoutActivitiesInput
    candidate?: CandidateCreateNestedOneWithoutActivitiesInput
    user?: UserCreateNestedOneWithoutActivitiesInput
  }

  export type ActivityUncheckedCreateWithoutJobInput = {
    id?: string
    type: $Enums.ActivityType
    title: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    candidateId?: string | null
    applicationId?: string | null
    createdAt?: Date | string
  }

  export type ActivityCreateOrConnectWithoutJobInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutJobInput, ActivityUncheckedCreateWithoutJobInput>
  }

  export type ActivityCreateManyJobInputEnvelope = {
    data: ActivityCreateManyJobInput | ActivityCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type InterviewCreateWithoutJobInput = {
    id?: string
    title: string
    type?: $Enums.InterviewType
    status?: $Enums.InterviewStatus
    scheduledAt: Date | string
    duration?: number
    timezone?: string | null
    location?: string | null
    notes?: string | null
    feedback?: string | null
    rating?: number | null
    outcome?: $Enums.InterviewOutcome | null
    createdAt?: Date | string
    updatedAt?: Date | string
    application?: JobApplicationCreateNestedOneWithoutInterviewsInput
    candidate: CandidateCreateNestedOneWithoutInterviewsInput
    interviewer: UserCreateNestedOneWithoutConductedInterviewsInput
  }

  export type InterviewUncheckedCreateWithoutJobInput = {
    id?: string
    title: string
    type?: $Enums.InterviewType
    status?: $Enums.InterviewStatus
    scheduledAt: Date | string
    duration?: number
    timezone?: string | null
    location?: string | null
    notes?: string | null
    feedback?: string | null
    rating?: number | null
    outcome?: $Enums.InterviewOutcome | null
    candidateId: string
    applicationId?: string | null
    interviewerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InterviewCreateOrConnectWithoutJobInput = {
    where: InterviewWhereUniqueInput
    create: XOR<InterviewCreateWithoutJobInput, InterviewUncheckedCreateWithoutJobInput>
  }

  export type InterviewCreateManyJobInputEnvelope = {
    data: InterviewCreateManyJobInput | InterviewCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type JobApplicationCreateWithoutJobInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    appliedAt?: Date | string
    coverLetter?: string | null
    notes?: string | null
    rating?: number | null
    fitScore?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityCreateNestedManyWithoutApplicationInput
    interviews?: InterviewCreateNestedManyWithoutApplicationInput
    candidate: CandidateCreateNestedOneWithoutApplicationsInput
  }

  export type JobApplicationUncheckedCreateWithoutJobInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    appliedAt?: Date | string
    coverLetter?: string | null
    notes?: string | null
    rating?: number | null
    fitScore?: number | null
    candidateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityUncheckedCreateNestedManyWithoutApplicationInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type JobApplicationCreateOrConnectWithoutJobInput = {
    where: JobApplicationWhereUniqueInput
    create: XOR<JobApplicationCreateWithoutJobInput, JobApplicationUncheckedCreateWithoutJobInput>
  }

  export type JobApplicationCreateManyJobInputEnvelope = {
    data: JobApplicationCreateManyJobInput | JobApplicationCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutJobsInput = {
    id?: string
    name: string
    description?: string | null
    website?: string | null
    logo?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateCreateNestedManyWithoutCompanyInput
    organization: OrganizationCreateNestedOneWithoutCompaniesInput
    users?: UserCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutJobsInput = {
    id?: string
    name: string
    description?: string | null
    website?: string | null
    logo?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    candidates?: CandidateUncheckedCreateNestedManyWithoutCompanyInput
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutJobsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutJobsInput, CompanyUncheckedCreateWithoutJobsInput>
  }

  export type OrganizationCreateWithoutJobsInput = {
    id?: string
    slug: string
    name: string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: string | null
    subdomain?: string | null
    plan?: $Enums.SubscriptionPlan
    maxUsers?: number
    maxJobs?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    contactEmail: string
    billingEmail?: string | null
    contactPhone?: string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateCreateNestedManyWithoutOrganizationInput
    companies?: CompanyCreateNestedManyWithoutOrganizationInput
    matchingResults?: MatchingResultCreateNestedManyWithoutOrganizationInput
    users?: UserCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutJobsInput = {
    id?: string
    slug: string
    name: string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: string | null
    subdomain?: string | null
    plan?: $Enums.SubscriptionPlan
    maxUsers?: number
    maxJobs?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    contactEmail: string
    billingEmail?: string | null
    contactPhone?: string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateUncheckedCreateNestedManyWithoutOrganizationInput
    companies?: CompanyUncheckedCreateNestedManyWithoutOrganizationInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutOrganizationInput
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutJobsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutJobsInput, OrganizationUncheckedCreateWithoutJobsInput>
  }

  export type UserCreateWithoutJobsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    activities?: ActivityCreateNestedManyWithoutUserInput
    candidates?: CandidateCreateNestedManyWithoutAddedByInput
    conductedInterviews?: InterviewCreateNestedManyWithoutInterviewerInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutJobsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    organizationId: string
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    candidates?: CandidateUncheckedCreateNestedManyWithoutAddedByInput
    conductedInterviews?: InterviewUncheckedCreateNestedManyWithoutInterviewerInput
  }

  export type UserCreateOrConnectWithoutJobsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutJobsInput, UserUncheckedCreateWithoutJobsInput>
  }

  export type MatchingResultCreateWithoutJobInput = {
    id?: string
    score: number
    embeddingSimilarity: number
    skillMatches: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: Date | string
    expiresAt: Date | string
    candidate: CandidateCreateNestedOneWithoutMatchingResultsInput
    organization: OrganizationCreateNestedOneWithoutMatchingResultsInput
  }

  export type MatchingResultUncheckedCreateWithoutJobInput = {
    id?: string
    candidateId: string
    score: number
    embeddingSimilarity: number
    skillMatches: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: Date | string
    expiresAt: Date | string
    organizationId: string
  }

  export type MatchingResultCreateOrConnectWithoutJobInput = {
    where: MatchingResultWhereUniqueInput
    create: XOR<MatchingResultCreateWithoutJobInput, MatchingResultUncheckedCreateWithoutJobInput>
  }

  export type MatchingResultCreateManyJobInputEnvelope = {
    data: MatchingResultCreateManyJobInput | MatchingResultCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type ActivityUpsertWithWhereUniqueWithoutJobInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutJobInput, ActivityUncheckedUpdateWithoutJobInput>
    create: XOR<ActivityCreateWithoutJobInput, ActivityUncheckedCreateWithoutJobInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutJobInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutJobInput, ActivityUncheckedUpdateWithoutJobInput>
  }

  export type ActivityUpdateManyWithWhereWithoutJobInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutJobInput>
  }

  export type InterviewUpsertWithWhereUniqueWithoutJobInput = {
    where: InterviewWhereUniqueInput
    update: XOR<InterviewUpdateWithoutJobInput, InterviewUncheckedUpdateWithoutJobInput>
    create: XOR<InterviewCreateWithoutJobInput, InterviewUncheckedCreateWithoutJobInput>
  }

  export type InterviewUpdateWithWhereUniqueWithoutJobInput = {
    where: InterviewWhereUniqueInput
    data: XOR<InterviewUpdateWithoutJobInput, InterviewUncheckedUpdateWithoutJobInput>
  }

  export type InterviewUpdateManyWithWhereWithoutJobInput = {
    where: InterviewScalarWhereInput
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyWithoutJobInput>
  }

  export type JobApplicationUpsertWithWhereUniqueWithoutJobInput = {
    where: JobApplicationWhereUniqueInput
    update: XOR<JobApplicationUpdateWithoutJobInput, JobApplicationUncheckedUpdateWithoutJobInput>
    create: XOR<JobApplicationCreateWithoutJobInput, JobApplicationUncheckedCreateWithoutJobInput>
  }

  export type JobApplicationUpdateWithWhereUniqueWithoutJobInput = {
    where: JobApplicationWhereUniqueInput
    data: XOR<JobApplicationUpdateWithoutJobInput, JobApplicationUncheckedUpdateWithoutJobInput>
  }

  export type JobApplicationUpdateManyWithWhereWithoutJobInput = {
    where: JobApplicationScalarWhereInput
    data: XOR<JobApplicationUpdateManyMutationInput, JobApplicationUncheckedUpdateManyWithoutJobInput>
  }

  export type CompanyUpsertWithoutJobsInput = {
    update: XOR<CompanyUpdateWithoutJobsInput, CompanyUncheckedUpdateWithoutJobsInput>
    create: XOR<CompanyCreateWithoutJobsInput, CompanyUncheckedCreateWithoutJobsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutJobsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutJobsInput, CompanyUncheckedUpdateWithoutJobsInput>
  }

  export type CompanyUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUpdateManyWithoutCompanyNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutCompaniesNestedInput
    users?: UserUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    candidates?: CandidateUncheckedUpdateManyWithoutCompanyNestedInput
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type OrganizationUpsertWithoutJobsInput = {
    update: XOR<OrganizationUpdateWithoutJobsInput, OrganizationUncheckedUpdateWithoutJobsInput>
    create: XOR<OrganizationCreateWithoutJobsInput, OrganizationUncheckedCreateWithoutJobsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutJobsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutJobsInput, OrganizationUncheckedUpdateWithoutJobsInput>
  }

  export type OrganizationUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxJobs?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUpdateManyWithoutOrganizationNestedInput
    companies?: CompanyUpdateManyWithoutOrganizationNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutOrganizationNestedInput
    users?: UserUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxJobs?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUncheckedUpdateManyWithoutOrganizationNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutOrganizationNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutOrganizationNestedInput
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutJobsInput = {
    update: XOR<UserUpdateWithoutJobsInput, UserUncheckedUpdateWithoutJobsInput>
    create: XOR<UserCreateWithoutJobsInput, UserUncheckedCreateWithoutJobsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutJobsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutJobsInput, UserUncheckedUpdateWithoutJobsInput>
  }

  export type UserUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    activities?: ActivityUpdateManyWithoutUserNestedInput
    candidates?: CandidateUpdateManyWithoutAddedByNestedInput
    conductedInterviews?: InterviewUpdateManyWithoutInterviewerNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    candidates?: CandidateUncheckedUpdateManyWithoutAddedByNestedInput
    conductedInterviews?: InterviewUncheckedUpdateManyWithoutInterviewerNestedInput
  }

  export type MatchingResultUpsertWithWhereUniqueWithoutJobInput = {
    where: MatchingResultWhereUniqueInput
    update: XOR<MatchingResultUpdateWithoutJobInput, MatchingResultUncheckedUpdateWithoutJobInput>
    create: XOR<MatchingResultCreateWithoutJobInput, MatchingResultUncheckedCreateWithoutJobInput>
  }

  export type MatchingResultUpdateWithWhereUniqueWithoutJobInput = {
    where: MatchingResultWhereUniqueInput
    data: XOR<MatchingResultUpdateWithoutJobInput, MatchingResultUncheckedUpdateWithoutJobInput>
  }

  export type MatchingResultUpdateManyWithWhereWithoutJobInput = {
    where: MatchingResultScalarWhereInput
    data: XOR<MatchingResultUpdateManyMutationInput, MatchingResultUncheckedUpdateManyWithoutJobInput>
  }

  export type ActivityCreateWithoutApplicationInput = {
    id?: string
    type: $Enums.ActivityType
    title: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    candidate?: CandidateCreateNestedOneWithoutActivitiesInput
    job?: JobCreateNestedOneWithoutActivitiesInput
    user?: UserCreateNestedOneWithoutActivitiesInput
  }

  export type ActivityUncheckedCreateWithoutApplicationInput = {
    id?: string
    type: $Enums.ActivityType
    title: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    candidateId?: string | null
    jobId?: string | null
    createdAt?: Date | string
  }

  export type ActivityCreateOrConnectWithoutApplicationInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutApplicationInput, ActivityUncheckedCreateWithoutApplicationInput>
  }

  export type ActivityCreateManyApplicationInputEnvelope = {
    data: ActivityCreateManyApplicationInput | ActivityCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type InterviewCreateWithoutApplicationInput = {
    id?: string
    title: string
    type?: $Enums.InterviewType
    status?: $Enums.InterviewStatus
    scheduledAt: Date | string
    duration?: number
    timezone?: string | null
    location?: string | null
    notes?: string | null
    feedback?: string | null
    rating?: number | null
    outcome?: $Enums.InterviewOutcome | null
    createdAt?: Date | string
    updatedAt?: Date | string
    candidate: CandidateCreateNestedOneWithoutInterviewsInput
    interviewer: UserCreateNestedOneWithoutConductedInterviewsInput
    job: JobCreateNestedOneWithoutInterviewsInput
  }

  export type InterviewUncheckedCreateWithoutApplicationInput = {
    id?: string
    title: string
    type?: $Enums.InterviewType
    status?: $Enums.InterviewStatus
    scheduledAt: Date | string
    duration?: number
    timezone?: string | null
    location?: string | null
    notes?: string | null
    feedback?: string | null
    rating?: number | null
    outcome?: $Enums.InterviewOutcome | null
    candidateId: string
    jobId: string
    interviewerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InterviewCreateOrConnectWithoutApplicationInput = {
    where: InterviewWhereUniqueInput
    create: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput>
  }

  export type InterviewCreateManyApplicationInputEnvelope = {
    data: InterviewCreateManyApplicationInput | InterviewCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type CandidateCreateWithoutApplicationsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityCreateNestedManyWithoutCandidateInput
    addedBy: UserCreateNestedOneWithoutCandidatesInput
    company?: CompanyCreateNestedOneWithoutCandidatesInput
    organization: OrganizationCreateNestedOneWithoutCandidatesInput
    interviews?: InterviewCreateNestedManyWithoutCandidateInput
    matchingResults?: MatchingResultCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutApplicationsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    companyId?: string | null
    addedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutCandidateInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutCandidateInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutApplicationsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
  }

  export type JobCreateWithoutApplicationsInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityCreateNestedManyWithoutJobInput
    interviews?: InterviewCreateNestedManyWithoutJobInput
    company: CompanyCreateNestedOneWithoutJobsInput
    organization: OrganizationCreateNestedOneWithoutJobsInput
    recruiter: UserCreateNestedOneWithoutJobsInput
    matchingResults?: MatchingResultCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutApplicationsInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    companyId: string
    recruiterId: string
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutJobInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutJobInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutApplicationsInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
  }

  export type ActivityUpsertWithWhereUniqueWithoutApplicationInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutApplicationInput, ActivityUncheckedUpdateWithoutApplicationInput>
    create: XOR<ActivityCreateWithoutApplicationInput, ActivityUncheckedCreateWithoutApplicationInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutApplicationInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutApplicationInput, ActivityUncheckedUpdateWithoutApplicationInput>
  }

  export type ActivityUpdateManyWithWhereWithoutApplicationInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutApplicationInput>
  }

  export type InterviewUpsertWithWhereUniqueWithoutApplicationInput = {
    where: InterviewWhereUniqueInput
    update: XOR<InterviewUpdateWithoutApplicationInput, InterviewUncheckedUpdateWithoutApplicationInput>
    create: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput>
  }

  export type InterviewUpdateWithWhereUniqueWithoutApplicationInput = {
    where: InterviewWhereUniqueInput
    data: XOR<InterviewUpdateWithoutApplicationInput, InterviewUncheckedUpdateWithoutApplicationInput>
  }

  export type InterviewUpdateManyWithWhereWithoutApplicationInput = {
    where: InterviewScalarWhereInput
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyWithoutApplicationInput>
  }

  export type CandidateUpsertWithoutApplicationsInput = {
    update: XOR<CandidateUpdateWithoutApplicationsInput, CandidateUncheckedUpdateWithoutApplicationsInput>
    create: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutApplicationsInput, CandidateUncheckedUpdateWithoutApplicationsInput>
  }

  export type CandidateUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutCandidateNestedInput
    addedBy?: UserUpdateOneRequiredWithoutCandidatesNestedInput
    company?: CompanyUpdateOneWithoutCandidatesNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutCandidatesNestedInput
    interviews?: InterviewUpdateManyWithoutCandidateNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    addedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutCandidateNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutCandidateNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type JobUpsertWithoutApplicationsInput = {
    update: XOR<JobUpdateWithoutApplicationsInput, JobUncheckedUpdateWithoutApplicationsInput>
    create: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutApplicationsInput, JobUncheckedUpdateWithoutApplicationsInput>
  }

  export type JobUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutJobNestedInput
    interviews?: InterviewUpdateManyWithoutJobNestedInput
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutJobsNestedInput
    recruiter?: UserUpdateOneRequiredWithoutJobsNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    recruiterId?: StringFieldUpdateOperationsInput | string
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutJobNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutJobNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutJobNestedInput
  }

  export type CandidateCreateWithoutMatchingResultsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityCreateNestedManyWithoutCandidateInput
    addedBy: UserCreateNestedOneWithoutCandidatesInput
    company?: CompanyCreateNestedOneWithoutCandidatesInput
    organization: OrganizationCreateNestedOneWithoutCandidatesInput
    interviews?: InterviewCreateNestedManyWithoutCandidateInput
    applications?: JobApplicationCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutMatchingResultsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    companyId?: string | null
    addedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutCandidateInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutCandidateInput
    applications?: JobApplicationUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutMatchingResultsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutMatchingResultsInput, CandidateUncheckedCreateWithoutMatchingResultsInput>
  }

  export type JobCreateWithoutMatchingResultsInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityCreateNestedManyWithoutJobInput
    interviews?: InterviewCreateNestedManyWithoutJobInput
    applications?: JobApplicationCreateNestedManyWithoutJobInput
    company: CompanyCreateNestedOneWithoutJobsInput
    organization: OrganizationCreateNestedOneWithoutJobsInput
    recruiter: UserCreateNestedOneWithoutJobsInput
  }

  export type JobUncheckedCreateWithoutMatchingResultsInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    companyId: string
    recruiterId: string
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutJobInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutJobInput
    applications?: JobApplicationUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutMatchingResultsInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutMatchingResultsInput, JobUncheckedCreateWithoutMatchingResultsInput>
  }

  export type OrganizationCreateWithoutMatchingResultsInput = {
    id?: string
    slug: string
    name: string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: string | null
    subdomain?: string | null
    plan?: $Enums.SubscriptionPlan
    maxUsers?: number
    maxJobs?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    contactEmail: string
    billingEmail?: string | null
    contactPhone?: string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateCreateNestedManyWithoutOrganizationInput
    companies?: CompanyCreateNestedManyWithoutOrganizationInput
    jobs?: JobCreateNestedManyWithoutOrganizationInput
    users?: UserCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutMatchingResultsInput = {
    id?: string
    slug: string
    name: string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: string | null
    subdomain?: string | null
    plan?: $Enums.SubscriptionPlan
    maxUsers?: number
    maxJobs?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    contactEmail: string
    billingEmail?: string | null
    contactPhone?: string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateUncheckedCreateNestedManyWithoutOrganizationInput
    companies?: CompanyUncheckedCreateNestedManyWithoutOrganizationInput
    jobs?: JobUncheckedCreateNestedManyWithoutOrganizationInput
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutMatchingResultsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutMatchingResultsInput, OrganizationUncheckedCreateWithoutMatchingResultsInput>
  }

  export type CandidateUpsertWithoutMatchingResultsInput = {
    update: XOR<CandidateUpdateWithoutMatchingResultsInput, CandidateUncheckedUpdateWithoutMatchingResultsInput>
    create: XOR<CandidateCreateWithoutMatchingResultsInput, CandidateUncheckedCreateWithoutMatchingResultsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutMatchingResultsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutMatchingResultsInput, CandidateUncheckedUpdateWithoutMatchingResultsInput>
  }

  export type CandidateUpdateWithoutMatchingResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutCandidateNestedInput
    addedBy?: UserUpdateOneRequiredWithoutCandidatesNestedInput
    company?: CompanyUpdateOneWithoutCandidatesNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutCandidatesNestedInput
    interviews?: InterviewUpdateManyWithoutCandidateNestedInput
    applications?: JobApplicationUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutMatchingResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    addedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutCandidateNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutCandidateNestedInput
    applications?: JobApplicationUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type JobUpsertWithoutMatchingResultsInput = {
    update: XOR<JobUpdateWithoutMatchingResultsInput, JobUncheckedUpdateWithoutMatchingResultsInput>
    create: XOR<JobCreateWithoutMatchingResultsInput, JobUncheckedCreateWithoutMatchingResultsInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutMatchingResultsInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutMatchingResultsInput, JobUncheckedUpdateWithoutMatchingResultsInput>
  }

  export type JobUpdateWithoutMatchingResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutJobNestedInput
    interviews?: InterviewUpdateManyWithoutJobNestedInput
    applications?: JobApplicationUpdateManyWithoutJobNestedInput
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutJobsNestedInput
    recruiter?: UserUpdateOneRequiredWithoutJobsNestedInput
  }

  export type JobUncheckedUpdateWithoutMatchingResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    recruiterId?: StringFieldUpdateOperationsInput | string
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutJobNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutJobNestedInput
    applications?: JobApplicationUncheckedUpdateManyWithoutJobNestedInput
  }

  export type OrganizationUpsertWithoutMatchingResultsInput = {
    update: XOR<OrganizationUpdateWithoutMatchingResultsInput, OrganizationUncheckedUpdateWithoutMatchingResultsInput>
    create: XOR<OrganizationCreateWithoutMatchingResultsInput, OrganizationUncheckedCreateWithoutMatchingResultsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutMatchingResultsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutMatchingResultsInput, OrganizationUncheckedUpdateWithoutMatchingResultsInput>
  }

  export type OrganizationUpdateWithoutMatchingResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxJobs?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUpdateManyWithoutOrganizationNestedInput
    companies?: CompanyUpdateManyWithoutOrganizationNestedInput
    jobs?: JobUpdateManyWithoutOrganizationNestedInput
    users?: UserUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutMatchingResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brandConfig?: NullableJsonNullValueInput | InputJsonValue
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxJobs?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    features?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUncheckedUpdateManyWithoutOrganizationNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutOrganizationNestedInput
    jobs?: JobUncheckedUpdateManyWithoutOrganizationNestedInput
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type JobApplicationCreateWithoutInterviewsInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    appliedAt?: Date | string
    coverLetter?: string | null
    notes?: string | null
    rating?: number | null
    fitScore?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityCreateNestedManyWithoutApplicationInput
    candidate: CandidateCreateNestedOneWithoutApplicationsInput
    job: JobCreateNestedOneWithoutApplicationsInput
  }

  export type JobApplicationUncheckedCreateWithoutInterviewsInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    appliedAt?: Date | string
    coverLetter?: string | null
    notes?: string | null
    rating?: number | null
    fitScore?: number | null
    candidateId: string
    jobId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type JobApplicationCreateOrConnectWithoutInterviewsInput = {
    where: JobApplicationWhereUniqueInput
    create: XOR<JobApplicationCreateWithoutInterviewsInput, JobApplicationUncheckedCreateWithoutInterviewsInput>
  }

  export type CandidateCreateWithoutInterviewsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityCreateNestedManyWithoutCandidateInput
    addedBy: UserCreateNestedOneWithoutCandidatesInput
    company?: CompanyCreateNestedOneWithoutCandidatesInput
    organization: OrganizationCreateNestedOneWithoutCandidatesInput
    applications?: JobApplicationCreateNestedManyWithoutCandidateInput
    matchingResults?: MatchingResultCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutInterviewsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    companyId?: string | null
    addedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutCandidateInput
    applications?: JobApplicationUncheckedCreateNestedManyWithoutCandidateInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutInterviewsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutInterviewsInput, CandidateUncheckedCreateWithoutInterviewsInput>
  }

  export type UserCreateWithoutConductedInterviewsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    activities?: ActivityCreateNestedManyWithoutUserInput
    candidates?: CandidateCreateNestedManyWithoutAddedByInput
    jobs?: JobCreateNestedManyWithoutRecruiterInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutConductedInterviewsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    organizationId: string
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    candidates?: CandidateUncheckedCreateNestedManyWithoutAddedByInput
    jobs?: JobUncheckedCreateNestedManyWithoutRecruiterInput
  }

  export type UserCreateOrConnectWithoutConductedInterviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConductedInterviewsInput, UserUncheckedCreateWithoutConductedInterviewsInput>
  }

  export type JobCreateWithoutInterviewsInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityCreateNestedManyWithoutJobInput
    applications?: JobApplicationCreateNestedManyWithoutJobInput
    company: CompanyCreateNestedOneWithoutJobsInput
    organization: OrganizationCreateNestedOneWithoutJobsInput
    recruiter: UserCreateNestedOneWithoutJobsInput
    matchingResults?: MatchingResultCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutInterviewsInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    companyId: string
    recruiterId: string
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutJobInput
    applications?: JobApplicationUncheckedCreateNestedManyWithoutJobInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutInterviewsInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutInterviewsInput, JobUncheckedCreateWithoutInterviewsInput>
  }

  export type JobApplicationUpsertWithoutInterviewsInput = {
    update: XOR<JobApplicationUpdateWithoutInterviewsInput, JobApplicationUncheckedUpdateWithoutInterviewsInput>
    create: XOR<JobApplicationCreateWithoutInterviewsInput, JobApplicationUncheckedCreateWithoutInterviewsInput>
    where?: JobApplicationWhereInput
  }

  export type JobApplicationUpdateToOneWithWhereWithoutInterviewsInput = {
    where?: JobApplicationWhereInput
    data: XOR<JobApplicationUpdateWithoutInterviewsInput, JobApplicationUncheckedUpdateWithoutInterviewsInput>
  }

  export type JobApplicationUpdateWithoutInterviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUpdateManyWithoutApplicationNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutApplicationsNestedInput
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type JobApplicationUncheckedUpdateWithoutInterviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateId?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type CandidateUpsertWithoutInterviewsInput = {
    update: XOR<CandidateUpdateWithoutInterviewsInput, CandidateUncheckedUpdateWithoutInterviewsInput>
    create: XOR<CandidateCreateWithoutInterviewsInput, CandidateUncheckedCreateWithoutInterviewsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutInterviewsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutInterviewsInput, CandidateUncheckedUpdateWithoutInterviewsInput>
  }

  export type CandidateUpdateWithoutInterviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutCandidateNestedInput
    addedBy?: UserUpdateOneRequiredWithoutCandidatesNestedInput
    company?: CompanyUpdateOneWithoutCandidatesNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutCandidatesNestedInput
    applications?: JobApplicationUpdateManyWithoutCandidateNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutInterviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    addedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutCandidateNestedInput
    applications?: JobApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type UserUpsertWithoutConductedInterviewsInput = {
    update: XOR<UserUpdateWithoutConductedInterviewsInput, UserUncheckedUpdateWithoutConductedInterviewsInput>
    create: XOR<UserCreateWithoutConductedInterviewsInput, UserUncheckedCreateWithoutConductedInterviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConductedInterviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConductedInterviewsInput, UserUncheckedUpdateWithoutConductedInterviewsInput>
  }

  export type UserUpdateWithoutConductedInterviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    activities?: ActivityUpdateManyWithoutUserNestedInput
    candidates?: CandidateUpdateManyWithoutAddedByNestedInput
    jobs?: JobUpdateManyWithoutRecruiterNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutConductedInterviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    candidates?: CandidateUncheckedUpdateManyWithoutAddedByNestedInput
    jobs?: JobUncheckedUpdateManyWithoutRecruiterNestedInput
  }

  export type JobUpsertWithoutInterviewsInput = {
    update: XOR<JobUpdateWithoutInterviewsInput, JobUncheckedUpdateWithoutInterviewsInput>
    create: XOR<JobCreateWithoutInterviewsInput, JobUncheckedCreateWithoutInterviewsInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutInterviewsInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutInterviewsInput, JobUncheckedUpdateWithoutInterviewsInput>
  }

  export type JobUpdateWithoutInterviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutJobNestedInput
    applications?: JobApplicationUpdateManyWithoutJobNestedInput
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutJobsNestedInput
    recruiter?: UserUpdateOneRequiredWithoutJobsNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutInterviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    recruiterId?: StringFieldUpdateOperationsInput | string
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutJobNestedInput
    applications?: JobApplicationUncheckedUpdateManyWithoutJobNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobApplicationCreateWithoutActivitiesInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    appliedAt?: Date | string
    coverLetter?: string | null
    notes?: string | null
    rating?: number | null
    fitScore?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    interviews?: InterviewCreateNestedManyWithoutApplicationInput
    candidate: CandidateCreateNestedOneWithoutApplicationsInput
    job: JobCreateNestedOneWithoutApplicationsInput
  }

  export type JobApplicationUncheckedCreateWithoutActivitiesInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    appliedAt?: Date | string
    coverLetter?: string | null
    notes?: string | null
    rating?: number | null
    fitScore?: number | null
    candidateId: string
    jobId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    interviews?: InterviewUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type JobApplicationCreateOrConnectWithoutActivitiesInput = {
    where: JobApplicationWhereUniqueInput
    create: XOR<JobApplicationCreateWithoutActivitiesInput, JobApplicationUncheckedCreateWithoutActivitiesInput>
  }

  export type CandidateCreateWithoutActivitiesInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    addedBy: UserCreateNestedOneWithoutCandidatesInput
    company?: CompanyCreateNestedOneWithoutCandidatesInput
    organization: OrganizationCreateNestedOneWithoutCandidatesInput
    interviews?: InterviewCreateNestedManyWithoutCandidateInput
    applications?: JobApplicationCreateNestedManyWithoutCandidateInput
    matchingResults?: MatchingResultCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutActivitiesInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    companyId?: string | null
    addedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    interviews?: InterviewUncheckedCreateNestedManyWithoutCandidateInput
    applications?: JobApplicationUncheckedCreateNestedManyWithoutCandidateInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutActivitiesInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutActivitiesInput, CandidateUncheckedCreateWithoutActivitiesInput>
  }

  export type JobCreateWithoutActivitiesInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    interviews?: InterviewCreateNestedManyWithoutJobInput
    applications?: JobApplicationCreateNestedManyWithoutJobInput
    company: CompanyCreateNestedOneWithoutJobsInput
    organization: OrganizationCreateNestedOneWithoutJobsInput
    recruiter: UserCreateNestedOneWithoutJobsInput
    matchingResults?: MatchingResultCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutActivitiesInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    companyId: string
    recruiterId: string
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
    interviews?: InterviewUncheckedCreateNestedManyWithoutJobInput
    applications?: JobApplicationUncheckedCreateNestedManyWithoutJobInput
    matchingResults?: MatchingResultUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutActivitiesInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutActivitiesInput, JobUncheckedCreateWithoutActivitiesInput>
  }

  export type UserCreateWithoutActivitiesInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    candidates?: CandidateCreateNestedManyWithoutAddedByInput
    conductedInterviews?: InterviewCreateNestedManyWithoutInterviewerInput
    jobs?: JobCreateNestedManyWithoutRecruiterInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutActivitiesInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    organizationId: string
    candidates?: CandidateUncheckedCreateNestedManyWithoutAddedByInput
    conductedInterviews?: InterviewUncheckedCreateNestedManyWithoutInterviewerInput
    jobs?: JobUncheckedCreateNestedManyWithoutRecruiterInput
  }

  export type UserCreateOrConnectWithoutActivitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
  }

  export type JobApplicationUpsertWithoutActivitiesInput = {
    update: XOR<JobApplicationUpdateWithoutActivitiesInput, JobApplicationUncheckedUpdateWithoutActivitiesInput>
    create: XOR<JobApplicationCreateWithoutActivitiesInput, JobApplicationUncheckedCreateWithoutActivitiesInput>
    where?: JobApplicationWhereInput
  }

  export type JobApplicationUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: JobApplicationWhereInput
    data: XOR<JobApplicationUpdateWithoutActivitiesInput, JobApplicationUncheckedUpdateWithoutActivitiesInput>
  }

  export type JobApplicationUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interviews?: InterviewUpdateManyWithoutApplicationNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutApplicationsNestedInput
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type JobApplicationUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateId?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interviews?: InterviewUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type CandidateUpsertWithoutActivitiesInput = {
    update: XOR<CandidateUpdateWithoutActivitiesInput, CandidateUncheckedUpdateWithoutActivitiesInput>
    create: XOR<CandidateCreateWithoutActivitiesInput, CandidateUncheckedCreateWithoutActivitiesInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutActivitiesInput, CandidateUncheckedUpdateWithoutActivitiesInput>
  }

  export type CandidateUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    addedBy?: UserUpdateOneRequiredWithoutCandidatesNestedInput
    company?: CompanyUpdateOneWithoutCandidatesNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutCandidatesNestedInput
    interviews?: InterviewUpdateManyWithoutCandidateNestedInput
    applications?: JobApplicationUpdateManyWithoutCandidateNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    addedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    interviews?: InterviewUncheckedUpdateManyWithoutCandidateNestedInput
    applications?: JobApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type JobUpsertWithoutActivitiesInput = {
    update: XOR<JobUpdateWithoutActivitiesInput, JobUncheckedUpdateWithoutActivitiesInput>
    create: XOR<JobCreateWithoutActivitiesInput, JobUncheckedCreateWithoutActivitiesInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutActivitiesInput, JobUncheckedUpdateWithoutActivitiesInput>
  }

  export type JobUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    interviews?: InterviewUpdateManyWithoutJobNestedInput
    applications?: JobApplicationUpdateManyWithoutJobNestedInput
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutJobsNestedInput
    recruiter?: UserUpdateOneRequiredWithoutJobsNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    recruiterId?: StringFieldUpdateOperationsInput | string
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    interviews?: InterviewUncheckedUpdateManyWithoutJobNestedInput
    applications?: JobApplicationUncheckedUpdateManyWithoutJobNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutJobNestedInput
  }

  export type UserUpsertWithoutActivitiesInput = {
    update: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    candidates?: CandidateUpdateManyWithoutAddedByNestedInput
    conductedInterviews?: InterviewUpdateManyWithoutInterviewerNestedInput
    jobs?: JobUpdateManyWithoutRecruiterNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
    candidates?: CandidateUncheckedUpdateManyWithoutAddedByNestedInput
    conductedInterviews?: InterviewUncheckedUpdateManyWithoutInterviewerNestedInput
    jobs?: JobUncheckedUpdateManyWithoutRecruiterNestedInput
  }

  export type CandidateCreateManyOrganizationInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    companyId?: string | null
    addedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
  }

  export type CompanyCreateManyOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    website?: string | null
    logo?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobCreateManyOrganizationInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    companyId: string
    recruiterId: string
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
  }

  export type MatchingResultCreateManyOrganizationInput = {
    id?: string
    jobId: string
    candidateId: string
    score: number
    embeddingSimilarity: number
    skillMatches: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: Date | string
    expiresAt: Date | string
  }

  export type UserCreateManyOrganizationInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
  }

  export type CandidateUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutCandidateNestedInput
    addedBy?: UserUpdateOneRequiredWithoutCandidatesNestedInput
    company?: CompanyUpdateOneWithoutCandidatesNestedInput
    interviews?: InterviewUpdateManyWithoutCandidateNestedInput
    applications?: JobApplicationUpdateManyWithoutCandidateNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    addedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutCandidateNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutCandidateNestedInput
    applications?: JobApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    addedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompanyUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUpdateManyWithoutCompanyNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    users?: UserUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUncheckedUpdateManyWithoutCompanyNestedInput
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutJobNestedInput
    interviews?: InterviewUpdateManyWithoutJobNestedInput
    applications?: JobApplicationUpdateManyWithoutJobNestedInput
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    recruiter?: UserUpdateOneRequiredWithoutJobsNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    recruiterId?: StringFieldUpdateOperationsInput | string
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutJobNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutJobNestedInput
    applications?: JobApplicationUncheckedUpdateManyWithoutJobNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    recruiterId?: StringFieldUpdateOperationsInput | string
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchingResultUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    embeddingSimilarity?: FloatFieldUpdateOperationsInput | number
    skillMatches?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidateUpdateOneRequiredWithoutMatchingResultsNestedInput
    job?: JobUpdateOneRequiredWithoutMatchingResultsNestedInput
  }

  export type MatchingResultUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    embeddingSimilarity?: FloatFieldUpdateOperationsInput | number
    skillMatches?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchingResultUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    embeddingSimilarity?: FloatFieldUpdateOperationsInput | number
    skillMatches?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    activities?: ActivityUpdateManyWithoutUserNestedInput
    candidates?: CandidateUpdateManyWithoutAddedByNestedInput
    conductedInterviews?: InterviewUpdateManyWithoutInterviewerNestedInput
    jobs?: JobUpdateManyWithoutRecruiterNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    candidates?: CandidateUncheckedUpdateManyWithoutAddedByNestedInput
    conductedInterviews?: InterviewUncheckedUpdateManyWithoutInterviewerNestedInput
    jobs?: JobUncheckedUpdateManyWithoutRecruiterNestedInput
  }

  export type UserUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityCreateManyUserInput = {
    id?: string
    type: $Enums.ActivityType
    title: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    candidateId?: string | null
    jobId?: string | null
    applicationId?: string | null
    createdAt?: Date | string
  }

  export type CandidateCreateManyAddedByInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    companyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
  }

  export type InterviewCreateManyInterviewerInput = {
    id?: string
    title: string
    type?: $Enums.InterviewType
    status?: $Enums.InterviewStatus
    scheduledAt: Date | string
    duration?: number
    timezone?: string | null
    location?: string | null
    notes?: string | null
    feedback?: string | null
    rating?: number | null
    outcome?: $Enums.InterviewOutcome | null
    candidateId: string
    jobId: string
    applicationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobCreateManyRecruiterInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    companyId: string
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
  }

  export type ActivityUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: JobApplicationUpdateOneWithoutActivitiesNestedInput
    candidate?: CandidateUpdateOneWithoutActivitiesNestedInput
    job?: JobUpdateOneWithoutActivitiesNestedInput
  }

  export type ActivityUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateUpdateWithoutAddedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutCandidateNestedInput
    company?: CompanyUpdateOneWithoutCandidatesNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutCandidatesNestedInput
    interviews?: InterviewUpdateManyWithoutCandidateNestedInput
    applications?: JobApplicationUpdateManyWithoutCandidateNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutAddedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutCandidateNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutCandidateNestedInput
    applications?: JobApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateManyWithoutAddedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewUpdateWithoutInterviewerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: JobApplicationUpdateOneWithoutInterviewsNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutInterviewsNestedInput
    job?: JobUpdateOneRequiredWithoutInterviewsNestedInput
  }

  export type InterviewUncheckedUpdateWithoutInterviewerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    candidateId?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewUncheckedUpdateManyWithoutInterviewerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    candidateId?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUpdateWithoutRecruiterInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutJobNestedInput
    interviews?: InterviewUpdateManyWithoutJobNestedInput
    applications?: JobApplicationUpdateManyWithoutJobNestedInput
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutJobsNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutRecruiterInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutJobNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutJobNestedInput
    applications?: JobApplicationUncheckedUpdateManyWithoutJobNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutRecruiterInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateCreateManyCompanyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    phone?: string | null
    linkedin?: string | null
    github?: string | null
    portfolio?: string | null
    resume?: string | null
    summary?: string | null
    resumeUrl?: string | null
    status?: $Enums.CandidateStatus
    location?: string | null
    timezone?: string | null
    yearsOfExperience?: number | null
    currentSalary?: number | null
    expectedSalary?: number | null
    availability?: Date | string | null
    source?: string | null
    notes?: string | null
    tags?: CandidateCreatetagsInput | string[]
    addedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateCreateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
  }

  export type JobCreateManyCompanyInput = {
    id?: string
    title: string
    description: string
    requirements?: string | null
    department?: string | null
    location?: string | null
    remote?: boolean
    type?: $Enums.JobType
    level?: $Enums.JobLevel
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string
    status?: $Enums.JobStatus
    priority?: $Enums.Priority
    startDate?: Date | string | null
    endDate?: Date | string | null
    deadline?: Date | string | null
    recruiterId: string
    jobDescriptionUrl?: string | null
    aiGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: string | null
    embeddingAt?: Date | string | null
    embeddingModel?: string | null
  }

  export type UserCreateManyCompanyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isActive?: boolean
    organizationId: string
  }

  export type CandidateUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutCandidateNestedInput
    addedBy?: UserUpdateOneRequiredWithoutCandidatesNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutCandidatesNestedInput
    interviews?: InterviewUpdateManyWithoutCandidateNestedInput
    applications?: JobApplicationUpdateManyWithoutCandidateNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    addedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutCandidateNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutCandidateNestedInput
    applications?: JobApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    github?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    resume?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    currentSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    expectedSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    availability?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CandidateUpdatetagsInput | string[]
    addedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    certifications?: NullableJsonNullValueInput | InputJsonValue
    currentRole?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableJsonNullValueInput | InputJsonValue
    experience?: NullableJsonNullValueInput | InputJsonValue
    industryExperience?: CandidateUpdateindustryExperienceInput | string[]
    projects?: NullableJsonNullValueInput | InputJsonValue
    salaryExpectation?: NullableJsonNullValueInput | InputJsonValue
    skills?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutJobNestedInput
    interviews?: InterviewUpdateManyWithoutJobNestedInput
    applications?: JobApplicationUpdateManyWithoutJobNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutJobsNestedInput
    recruiter?: UserUpdateOneRequiredWithoutJobsNestedInput
    matchingResults?: MatchingResultUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recruiterId?: StringFieldUpdateOperationsInput | string
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutJobNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutJobNestedInput
    applications?: JobApplicationUncheckedUpdateManyWithoutJobNestedInput
    matchingResults?: MatchingResultUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    remote?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    level?: EnumJobLevelFieldUpdateOperationsInput | $Enums.JobLevel
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recruiterId?: StringFieldUpdateOperationsInput | string
    jobDescriptionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    applicationInfo?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    requirementsDetailed?: NullableJsonNullValueInput | InputJsonValue
    responsibilities?: NullableJsonNullValueInput | InputJsonValue
    jobInfo?: NullableJsonNullValueInput | InputJsonValue
    embedding?: NullableStringFieldUpdateOperationsInput | string | null
    embeddingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    embeddingModel?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    activities?: ActivityUpdateManyWithoutUserNestedInput
    candidates?: CandidateUpdateManyWithoutAddedByNestedInput
    conductedInterviews?: InterviewUpdateManyWithoutInterviewerNestedInput
    jobs?: JobUpdateManyWithoutRecruiterNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    candidates?: CandidateUncheckedUpdateManyWithoutAddedByNestedInput
    conductedInterviews?: InterviewUncheckedUpdateManyWithoutInterviewerNestedInput
    jobs?: JobUncheckedUpdateManyWithoutRecruiterNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityCreateManyCandidateInput = {
    id?: string
    type: $Enums.ActivityType
    title: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    jobId?: string | null
    applicationId?: string | null
    createdAt?: Date | string
  }

  export type InterviewCreateManyCandidateInput = {
    id?: string
    title: string
    type?: $Enums.InterviewType
    status?: $Enums.InterviewStatus
    scheduledAt: Date | string
    duration?: number
    timezone?: string | null
    location?: string | null
    notes?: string | null
    feedback?: string | null
    rating?: number | null
    outcome?: $Enums.InterviewOutcome | null
    jobId: string
    applicationId?: string | null
    interviewerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobApplicationCreateManyCandidateInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    appliedAt?: Date | string
    coverLetter?: string | null
    notes?: string | null
    rating?: number | null
    fitScore?: number | null
    jobId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchingResultCreateManyCandidateInput = {
    id?: string
    jobId: string
    score: number
    embeddingSimilarity: number
    skillMatches: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: Date | string
    expiresAt: Date | string
    organizationId: string
  }

  export type ActivityUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: JobApplicationUpdateOneWithoutActivitiesNestedInput
    job?: JobUpdateOneWithoutActivitiesNestedInput
    user?: UserUpdateOneWithoutActivitiesNestedInput
  }

  export type ActivityUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: JobApplicationUpdateOneWithoutInterviewsNestedInput
    interviewer?: UserUpdateOneRequiredWithoutConductedInterviewsNestedInput
    job?: JobUpdateOneRequiredWithoutInterviewsNestedInput
  }

  export type InterviewUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    jobId?: StringFieldUpdateOperationsInput | string
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    jobId?: StringFieldUpdateOperationsInput | string
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobApplicationUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUpdateManyWithoutApplicationNestedInput
    interviews?: InterviewUpdateManyWithoutApplicationNestedInput
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type JobApplicationUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    jobId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUncheckedUpdateManyWithoutApplicationNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type JobApplicationUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    jobId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchingResultUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    embeddingSimilarity?: FloatFieldUpdateOperationsInput | number
    skillMatches?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutMatchingResultsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutMatchingResultsNestedInput
  }

  export type MatchingResultUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    embeddingSimilarity?: FloatFieldUpdateOperationsInput | number
    skillMatches?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type MatchingResultUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    embeddingSimilarity?: FloatFieldUpdateOperationsInput | number
    skillMatches?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityCreateManyJobInput = {
    id?: string
    type: $Enums.ActivityType
    title: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    candidateId?: string | null
    applicationId?: string | null
    createdAt?: Date | string
  }

  export type InterviewCreateManyJobInput = {
    id?: string
    title: string
    type?: $Enums.InterviewType
    status?: $Enums.InterviewStatus
    scheduledAt: Date | string
    duration?: number
    timezone?: string | null
    location?: string | null
    notes?: string | null
    feedback?: string | null
    rating?: number | null
    outcome?: $Enums.InterviewOutcome | null
    candidateId: string
    applicationId?: string | null
    interviewerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobApplicationCreateManyJobInput = {
    id?: string
    status?: $Enums.ApplicationStatus
    appliedAt?: Date | string
    coverLetter?: string | null
    notes?: string | null
    rating?: number | null
    fitScore?: number | null
    candidateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchingResultCreateManyJobInput = {
    id?: string
    candidateId: string
    score: number
    embeddingSimilarity: number
    skillMatches: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: Date | string
    expiresAt: Date | string
    organizationId: string
  }

  export type ActivityUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: JobApplicationUpdateOneWithoutActivitiesNestedInput
    candidate?: CandidateUpdateOneWithoutActivitiesNestedInput
    user?: UserUpdateOneWithoutActivitiesNestedInput
  }

  export type ActivityUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: JobApplicationUpdateOneWithoutInterviewsNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutInterviewsNestedInput
    interviewer?: UserUpdateOneRequiredWithoutConductedInterviewsNestedInput
  }

  export type InterviewUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    candidateId?: StringFieldUpdateOperationsInput | string
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    candidateId?: StringFieldUpdateOperationsInput | string
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    interviewerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobApplicationUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUpdateManyWithoutApplicationNestedInput
    interviews?: InterviewUpdateManyWithoutApplicationNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type JobApplicationUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUncheckedUpdateManyWithoutApplicationNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type JobApplicationUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fitScore?: NullableFloatFieldUpdateOperationsInput | number | null
    candidateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchingResultUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    embeddingSimilarity?: FloatFieldUpdateOperationsInput | number
    skillMatches?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidateUpdateOneRequiredWithoutMatchingResultsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutMatchingResultsNestedInput
  }

  export type MatchingResultUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    embeddingSimilarity?: FloatFieldUpdateOperationsInput | number
    skillMatches?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type MatchingResultUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    embeddingSimilarity?: FloatFieldUpdateOperationsInput | number
    skillMatches?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    calculatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityCreateManyApplicationInput = {
    id?: string
    type: $Enums.ActivityType
    title: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    candidateId?: string | null
    jobId?: string | null
    createdAt?: Date | string
  }

  export type InterviewCreateManyApplicationInput = {
    id?: string
    title: string
    type?: $Enums.InterviewType
    status?: $Enums.InterviewStatus
    scheduledAt: Date | string
    duration?: number
    timezone?: string | null
    location?: string | null
    notes?: string | null
    feedback?: string | null
    rating?: number | null
    outcome?: $Enums.InterviewOutcome | null
    candidateId: string
    jobId: string
    interviewerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivityUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidateUpdateOneWithoutActivitiesNestedInput
    job?: JobUpdateOneWithoutActivitiesNestedInput
    user?: UserUpdateOneWithoutActivitiesNestedInput
  }

  export type ActivityUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumActivityTypeFieldUpdateOperationsInput | $Enums.ActivityType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidateUpdateOneRequiredWithoutInterviewsNestedInput
    interviewer?: UserUpdateOneRequiredWithoutConductedInterviewsNestedInput
    job?: JobUpdateOneRequiredWithoutInterviewsNestedInput
  }

  export type InterviewUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    candidateId?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    interviewerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: EnumInterviewTypeFieldUpdateOperationsInput | $Enums.InterviewType
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    outcome?: NullableEnumInterviewOutcomeFieldUpdateOperationsInput | $Enums.InterviewOutcome | null
    candidateId?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    interviewerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}