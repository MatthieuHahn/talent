// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// White Label Organization/Tenant Management
model Organization {
  id   String @id @default(cuid())
  slug String @unique // Used for subdomain routing (e.g., client1.recruitmentcrm.com)
  name String

  // White label configuration
  brandConfig Json? // Stores branding configuration (colors, logo, etc.)
  domain      String? // Custom domain
  subdomain   String? // Subdomain prefix

  // Plan/Subscription
  plan        SubscriptionPlan @default(STARTER)
  maxUsers    Int              @default(5)
  maxJobs     Int              @default(50)
  isActive    Boolean          @default(true)
  trialEndsAt DateTime?

  // Contact and billing
  contactEmail   String
  billingEmail   String?
  contactPhone   String?
  billingAddress Json? // Flexible billing address storage

  // Features enabled for this organization
  features Json @default("{\"aiAssisted\": true, \"customBranding\": false, \"apiAccess\": false}")

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users      User[]
  companies  Company[]
  candidates Candidate[]
  jobs       Job[]

  @@map("organizations")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  role      UserRole @default(RECRUITER)

  // Organization association (for multi-tenancy)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Company association (within the organization)
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  // Activity tracking
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?
  isActive  Boolean   @default(true)

  // Relations
  candidates          Candidate[]
  jobs                Job[]
  activities          Activity[]
  conductedInterviews Interview[] @relation("InterviewerToInterview")

  @@map("users")
}

model Company {
  id          String  @id @default(cuid())
  name        String
  description String?
  website     String?
  logo        String?

  // Organization association (for multi-tenancy)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Contact info
  email   String?
  phone   String?
  address String?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users      User[]
  jobs       Job[]
  candidates Candidate[]

  @@map("companies")
}

// Candidate Management
model Candidate {
  id        String          @id @default(cuid())
  email     String
  firstName String
  lastName  String
  phone     String?
  linkedin  String?
  github    String?
  portfolio String?
  resume    String? // File path or URL
  summary   String?
  status    CandidateStatus @default(ACTIVE)

  // Organization association (for multi-tenancy)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Location
  location String?
  timezone String?

  // Experience
  yearsOfExperience Int?
  currentSalary     Float?
  expectedSalary    Float?
  availability      DateTime?

  // Tracking
  source String? // How they were found/added
  notes  String?
  tags   String[] // Skills, technologies, etc.

  // Company/Recruiter association
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  addedById String
  addedBy   User   @relation(fields: [addedById], references: [id])

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  applications JobApplication[]
  activities   Activity[]
  interviews   Interview[]

  // Ensure email uniqueness within organization
  @@unique([email, organizationId])
  @@map("candidates")
}

// Job Management
model Job {
  id           String  @id @default(cuid())
  title        String
  description  String
  requirements String?

  // Organization association (for multi-tenancy)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Job details
  department String?
  location   String?
  remote     Boolean  @default(false)
  type       JobType  @default(FULL_TIME)
  level      JobLevel @default(MID)

  // Compensation
  salaryMin Float?
  salaryMax Float?
  currency  String @default("USD")

  // Status
  status   JobStatus @default(DRAFT)
  priority Priority  @default(MEDIUM)

  // Dates
  startDate DateTime?
  endDate   DateTime?
  deadline  DateTime?

  // Company/Recruiter association
  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  recruiterId String
  recruiter   User   @relation(fields: [recruiterId], references: [id])

  // AI-related fields
  aiGenerated Boolean @default(false)
  aiPrompt    String? // Original prompt used to generate job

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  applications JobApplication[]
  activities   Activity[]
  interviews   Interview[]

  @@map("jobs")
}

// Application Tracking
model JobApplication {
  id     String            @id @default(cuid())
  status ApplicationStatus @default(APPLIED)

  // Application details
  appliedAt   DateTime @default(now())
  coverLetter String?
  notes       String?

  // Scoring/Rating
  rating   Float? // 1-5 or 1-10 scale
  fitScore Float? // AI-generated fit score

  // Relations
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  jobId String
  job   Job    @relation(fields: [jobId], references: [id])

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  interviews Interview[]
  activities Activity[]

  @@unique([candidateId, jobId])
  @@map("job_applications")
}

// Interview Scheduling
model Interview {
  id     String          @id @default(cuid())
  title  String
  type   InterviewType   @default(PHONE)
  status InterviewStatus @default(SCHEDULED)

  // Schedule details
  scheduledAt DateTime
  duration    Int      @default(60) // minutes
  timezone    String?
  location    String? // Physical address or meeting link
  notes       String?

  // Feedback
  feedback String?
  rating   Float? // 1-5 or 1-10 scale
  outcome  InterviewOutcome?

  // Relations
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  jobId String
  job   Job    @relation(fields: [jobId], references: [id])

  applicationId String?
  application   JobApplication? @relation(fields: [applicationId], references: [id])

  interviewerId String
  interviewer   User   @relation("InterviewerToInterview", fields: [interviewerId], references: [id])

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("interviews")
}

// Activity/Event Tracking
model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  title       String
  description String?

  // Metadata
  metadata Json? // Flexible data storage

  // Relations
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  candidateId String?
  candidate   Candidate? @relation(fields: [candidateId], references: [id])

  jobId String?
  job   Job?    @relation(fields: [jobId], references: [id])

  applicationId String?
  application   JobApplication? @relation(fields: [applicationId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())

  @@map("activities")
}

// Enums
enum SubscriptionPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum UserRole {
  ADMIN
  RECRUITER
  HIRING_MANAGER
  INTERVIEWER
}

enum CandidateStatus {
  ACTIVE
  INACTIVE
  HIRED
  REJECTED
  BLACKLISTED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
}

enum JobLevel {
  ENTRY
  JUNIOR
  MID
  SENIOR
  LEAD
  PRINCIPAL
  EXECUTIVE
}

enum JobStatus {
  DRAFT
  ACTIVE
  PAUSED
  CLOSED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ApplicationStatus {
  APPLIED
  REVIEWING
  PHONE_SCREEN
  INTERVIEW
  TECHNICAL_TEST
  FINAL_INTERVIEW
  REFERENCE_CHECK
  OFFER_MADE
  OFFER_ACCEPTED
  OFFER_REJECTED
  REJECTED
  WITHDRAWN
}

enum InterviewType {
  PHONE
  VIDEO
  IN_PERSON
  TECHNICAL
  BEHAVIORAL
  CULTURAL_FIT
}

enum InterviewStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum InterviewOutcome {
  PASS
  FAIL
  MAYBE
  NO_SHOW
}

enum ActivityType {
  CANDIDATE_ADDED
  CANDIDATE_UPDATED
  JOB_CREATED
  JOB_UPDATED
  APPLICATION_SUBMITTED
  APPLICATION_STATUS_CHANGED
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  NOTE_ADDED
  EMAIL_SENT
  CALL_MADE
  AI_MATCH_FOUND
  ORGANIZATION_CREATED
  USER_INVITED
}
